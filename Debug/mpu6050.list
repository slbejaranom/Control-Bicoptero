
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08004e58  08004e58  00014e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  080050f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a8  200001dc  080052cc  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000384  080052cc  00020384  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015667  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002856  00000000  00000000  0003586c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008a82  00000000  00000000  000380c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a68  00000000  00000000  00040b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001008  00000000  00000000  000415b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000157a4  00000000  00000000  000425b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a2f7  00000000  00000000  00057d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00074257  00000000  00000000  00062053  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000f7  00000000  00000000  000d62aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a94  00000000  00000000  000d63a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e3c 	.word	0x08004e3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004e3c 	.word	0x08004e3c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_InitTick+0x3c>)
{
 8000b2c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2e:	7818      	ldrb	r0, [r3, #0]
 8000b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b34:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b38:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <HAL_InitTick+0x40>)
 8000b3a:	6810      	ldr	r0, [r2, #0]
 8000b3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b40:	f000 f88c 	bl	8000c5c <HAL_SYSTICK_Config>
 8000b44:	4604      	mov	r4, r0
 8000b46:	b958      	cbnz	r0, 8000b60 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b48:	2d0f      	cmp	r5, #15
 8000b4a:	d809      	bhi.n	8000b60 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	4629      	mov	r1, r5
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f842 	bl	8000bdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4620      	mov	r0, r4
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <HAL_InitTick+0x44>)
 8000b5c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b5e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b60:	2001      	movs	r0, #1
 8000b62:	e7fc      	b.n	8000b5e <HAL_InitTick+0x36>
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_Init+0x20>)
{
 8000b72:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	f043 0310 	orr.w	r3, r3, #16
 8000b7c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7e:	f000 f81b 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff ffd0 	bl	8000b28 <HAL_InitTick>
  HAL_MspInit();
 8000b88:	f001 ff7c 	bl	8002a84 <HAL_MspInit>
}
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	bd08      	pop	{r3, pc}
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b94:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <HAL_IncTick+0x10>)
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <HAL_IncTick+0x14>)
 8000b98:	6811      	ldr	r1, [r2, #0]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	440b      	add	r3, r1
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	2000020c 	.word	0x2000020c
 8000ba8:	20000000 	.word	0x20000000

08000bac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <HAL_GetTick+0x8>)
 8000bae:	6818      	ldr	r0, [r3, #0]
}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2000020c 	.word	0x2000020c

08000bb8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bba:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bbe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bc6:	041b      	lsls	r3, r3, #16
 8000bc8:	0c1b      	lsrs	r3, r3, #16
 8000bca:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000bd2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000bd4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bde:	b570      	push	{r4, r5, r6, lr}
 8000be0:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be2:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bea:	f1c4 0507 	rsb	r5, r4, #7
 8000bee:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf0:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	bf28      	it	cs
 8000bf6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf8:	2b06      	cmp	r3, #6
 8000bfa:	bf98      	it	ls
 8000bfc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfe:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	bf88      	it	hi
 8000c04:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c06:	ea21 0303 	bic.w	r3, r1, r3
 8000c0a:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	fa06 f404 	lsl.w	r4, r6, r4
 8000c10:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c14:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c16:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	bfa8      	it	ge
 8000c1c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000c20:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	bfb8      	it	lt
 8000c26:	4a06      	ldrlt	r2, [pc, #24]	; (8000c40 <HAL_NVIC_SetPriority+0x64>)
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	bfb5      	itete	lt
 8000c2c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	e000ed00 	.word	0xe000ed00
 8000c40:	e000ed14 	.word	0xe000ed14

08000c44 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c44:	2301      	movs	r3, #1
 8000c46:	0942      	lsrs	r2, r0, #5
 8000c48:	f000 001f 	and.w	r0, r0, #31
 8000c4c:	fa03 f000 	lsl.w	r0, r3, r0
 8000c50:	4b01      	ldr	r3, [pc, #4]	; (8000c58 <HAL_NVIC_EnableIRQ+0x14>)
 8000c52:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	3801      	subs	r0, #1
 8000c5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c62:	d20a      	bcs.n	8000c7a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000c8c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c8e:	4616      	mov	r6, r2
 8000c90:	4b65      	ldr	r3, [pc, #404]	; (8000e28 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c92:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000e38 <HAL_GPIO_Init+0x1b0>
 8000c96:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000e3c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000c9a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000ca0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d17e      	bne.n	8000daa <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8000cac:	684d      	ldr	r5, [r1, #4]
 8000cae:	2d12      	cmp	r5, #18
 8000cb0:	f000 80ae 	beq.w	8000e10 <HAL_GPIO_Init+0x188>
 8000cb4:	f200 8087 	bhi.w	8000dc6 <HAL_GPIO_Init+0x13e>
 8000cb8:	2d02      	cmp	r5, #2
 8000cba:	f000 80a6 	beq.w	8000e0a <HAL_GPIO_Init+0x182>
 8000cbe:	d87b      	bhi.n	8000db8 <HAL_GPIO_Init+0x130>
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	f000 808d 	beq.w	8000de0 <HAL_GPIO_Init+0x158>
 8000cc6:	2d01      	cmp	r5, #1
 8000cc8:	f000 809d 	beq.w	8000e06 <HAL_GPIO_Init+0x17e>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ccc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cd0:	2cff      	cmp	r4, #255	; 0xff
 8000cd2:	bf93      	iteet	ls
 8000cd4:	4682      	movls	sl, r0
 8000cd6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000cda:	3d08      	subhi	r5, #8
 8000cdc:	f8d0 b000 	ldrls.w	fp, [r0]
 8000ce0:	bf92      	itee	ls
 8000ce2:	00b5      	lslls	r5, r6, #2
 8000ce4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000ce8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cea:	fa09 f805 	lsl.w	r8, r9, r5
 8000cee:	ea2b 0808 	bic.w	r8, fp, r8
 8000cf2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cf6:	bf88      	it	hi
 8000cf8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cfc:	ea48 0505 	orr.w	r5, r8, r5
 8000d00:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d04:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000d08:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000d0c:	d04d      	beq.n	8000daa <HAL_GPIO_Init+0x122>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0e:	4f47      	ldr	r7, [pc, #284]	; (8000e2c <HAL_GPIO_Init+0x1a4>)
 8000d10:	f026 0803 	bic.w	r8, r6, #3
 8000d14:	69bd      	ldr	r5, [r7, #24]
 8000d16:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000d1a:	f045 0501 	orr.w	r5, r5, #1
 8000d1e:	61bd      	str	r5, [r7, #24]
 8000d20:	69bd      	ldr	r5, [r7, #24]
 8000d22:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000d26:	f005 0501 	and.w	r5, r5, #1
 8000d2a:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d2c:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d30:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d32:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000d36:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d3a:	fa09 f90b 	lsl.w	r9, r9, fp
 8000d3e:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d42:	4d3b      	ldr	r5, [pc, #236]	; (8000e30 <HAL_GPIO_Init+0x1a8>)
 8000d44:	42a8      	cmp	r0, r5
 8000d46:	d068      	beq.n	8000e1a <HAL_GPIO_Init+0x192>
 8000d48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d4c:	42a8      	cmp	r0, r5
 8000d4e:	d066      	beq.n	8000e1e <HAL_GPIO_Init+0x196>
 8000d50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d54:	42a8      	cmp	r0, r5
 8000d56:	d064      	beq.n	8000e22 <HAL_GPIO_Init+0x19a>
 8000d58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d5c:	42a8      	cmp	r0, r5
 8000d5e:	bf0c      	ite	eq
 8000d60:	2503      	moveq	r5, #3
 8000d62:	2504      	movne	r5, #4
 8000d64:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d68:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000d6c:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d70:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d72:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000d76:	bf14      	ite	ne
 8000d78:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d7a:	43a5      	biceq	r5, r4
 8000d7c:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d7e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d80:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000d84:	bf14      	ite	ne
 8000d86:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d88:	43a5      	biceq	r5, r4
 8000d8a:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d8c:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d8e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d92:	bf14      	ite	ne
 8000d94:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d96:	43a5      	biceq	r5, r4
 8000d98:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d9a:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d9c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da0:	bf14      	ite	ne
 8000da2:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000da4:	ea25 0404 	biceq.w	r4, r5, r4
 8000da8:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000daa:	3601      	adds	r6, #1
 8000dac:	2e10      	cmp	r6, #16
 8000dae:	f47f af74 	bne.w	8000c9a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000db2:	b003      	add	sp, #12
 8000db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000db8:	2d03      	cmp	r5, #3
 8000dba:	d022      	beq.n	8000e02 <HAL_GPIO_Init+0x17a>
 8000dbc:	2d11      	cmp	r5, #17
 8000dbe:	d185      	bne.n	8000ccc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dc0:	68ca      	ldr	r2, [r1, #12]
 8000dc2:	3204      	adds	r2, #4
          break;
 8000dc4:	e782      	b.n	8000ccc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000dc6:	4f1b      	ldr	r7, [pc, #108]	; (8000e34 <HAL_GPIO_Init+0x1ac>)
 8000dc8:	42bd      	cmp	r5, r7
 8000dca:	d009      	beq.n	8000de0 <HAL_GPIO_Init+0x158>
 8000dcc:	d812      	bhi.n	8000df4 <HAL_GPIO_Init+0x16c>
 8000dce:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000e40 <HAL_GPIO_Init+0x1b8>
 8000dd2:	454d      	cmp	r5, r9
 8000dd4:	d004      	beq.n	8000de0 <HAL_GPIO_Init+0x158>
 8000dd6:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000dda:	454d      	cmp	r5, r9
 8000ddc:	f47f af76 	bne.w	8000ccc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000de0:	688a      	ldr	r2, [r1, #8]
 8000de2:	b1c2      	cbz	r2, 8000e16 <HAL_GPIO_Init+0x18e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de4:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000de6:	bf0c      	ite	eq
 8000de8:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000dec:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df0:	2208      	movs	r2, #8
 8000df2:	e76b      	b.n	8000ccc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000df4:	4565      	cmp	r5, ip
 8000df6:	d0f3      	beq.n	8000de0 <HAL_GPIO_Init+0x158>
 8000df8:	4575      	cmp	r5, lr
 8000dfa:	d0f1      	beq.n	8000de0 <HAL_GPIO_Init+0x158>
 8000dfc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000e44 <HAL_GPIO_Init+0x1bc>
 8000e00:	e7eb      	b.n	8000dda <HAL_GPIO_Init+0x152>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e02:	2200      	movs	r2, #0
 8000e04:	e762      	b.n	8000ccc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e06:	68ca      	ldr	r2, [r1, #12]
          break;
 8000e08:	e760      	b.n	8000ccc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e0a:	68ca      	ldr	r2, [r1, #12]
 8000e0c:	3208      	adds	r2, #8
          break;
 8000e0e:	e75d      	b.n	8000ccc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e10:	68ca      	ldr	r2, [r1, #12]
 8000e12:	320c      	adds	r2, #12
          break;
 8000e14:	e75a      	b.n	8000ccc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e16:	2204      	movs	r2, #4
 8000e18:	e758      	b.n	8000ccc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	e7a2      	b.n	8000d64 <HAL_GPIO_Init+0xdc>
 8000e1e:	2501      	movs	r5, #1
 8000e20:	e7a0      	b.n	8000d64 <HAL_GPIO_Init+0xdc>
 8000e22:	2502      	movs	r5, #2
 8000e24:	e79e      	b.n	8000d64 <HAL_GPIO_Init+0xdc>
 8000e26:	bf00      	nop
 8000e28:	40010400 	.word	0x40010400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010800 	.word	0x40010800
 8000e34:	10210000 	.word	0x10210000
 8000e38:	10310000 	.word	0x10310000
 8000e3c:	10320000 	.word	0x10320000
 8000e40:	10110000 	.word	0x10110000
 8000e44:	10220000 	.word	0x10220000

08000e48 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e48:	6802      	ldr	r2, [r0, #0]
 8000e4a:	6953      	ldr	r3, [r2, #20]
 8000e4c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000e50:	d00d      	beq.n	8000e6e <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e52:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000e56:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e58:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000e5a:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e5c:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000e66:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	4770      	bx	lr
  }
  return HAL_OK;
 8000e6e:	4618      	mov	r0, r3
}
 8000e70:	4770      	bx	lr

08000e72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e76:	4604      	mov	r4, r0
 8000e78:	4616      	mov	r6, r2
 8000e7a:	4698      	mov	r8, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e7c:	b28f      	uxth	r7, r1
 8000e7e:	6825      	ldr	r5, [r4, #0]
 8000e80:	6968      	ldr	r0, [r5, #20]
 8000e82:	ea37 0000 	bics.w	r0, r7, r0
 8000e86:	d013      	beq.n	8000eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e88:	696b      	ldr	r3, [r5, #20]
 8000e8a:	055a      	lsls	r2, r3, #21
 8000e8c:	d512      	bpl.n	8000eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e8e:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000e90:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e98:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000e9c:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000ea2:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000ea4:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000ea6:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000ea8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000eac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8000eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000eb4:	1c73      	adds	r3, r6, #1
 8000eb6:	d0e3      	beq.n	8000e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000eb8:	b946      	cbnz	r6, 8000ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000eba:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000ebc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ebe:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000ec0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000ec4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000ec8:	2003      	movs	r0, #3
 8000eca:	e7f1      	b.n	8000eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ecc:	f7ff fe6e 	bl	8000bac <HAL_GetTick>
 8000ed0:	eba0 0008 	sub.w	r0, r0, r8
 8000ed4:	42b0      	cmp	r0, r6
 8000ed6:	d9d2      	bls.n	8000e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 8000ed8:	e7ef      	b.n	8000eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>

08000eda <I2C_WaitOnFlagUntilTimeout>:
{
 8000eda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ede:	4605      	mov	r5, r0
 8000ee0:	4690      	mov	r8, r2
 8000ee2:	461f      	mov	r7, r3
 8000ee4:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000ee6:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8000eea:	b28c      	uxth	r4, r1
 8000eec:	6829      	ldr	r1, [r5, #0]
 8000eee:	f1b9 0f01 	cmp.w	r9, #1
 8000ef2:	bf0c      	ite	eq
 8000ef4:	694b      	ldreq	r3, [r1, #20]
 8000ef6:	698b      	ldrne	r3, [r1, #24]
 8000ef8:	ea34 0303 	bics.w	r3, r4, r3
 8000efc:	bf0c      	ite	eq
 8000efe:	2301      	moveq	r3, #1
 8000f00:	2300      	movne	r3, #0
 8000f02:	4598      	cmp	r8, r3
 8000f04:	d001      	beq.n	8000f0a <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8000f06:	2000      	movs	r0, #0
 8000f08:	e00c      	b.n	8000f24 <I2C_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8000f0a:	1c7b      	adds	r3, r7, #1
 8000f0c:	d0ef      	beq.n	8000eee <I2C_WaitOnFlagUntilTimeout+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f0e:	b95f      	cbnz	r7, 8000f28 <I2C_WaitOnFlagUntilTimeout+0x4e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f10:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000f12:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8000f14:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f16:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000f18:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000f1c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f20:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 8000f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f28:	f7ff fe40 	bl	8000bac <HAL_GetTick>
 8000f2c:	1b80      	subs	r0, r0, r6
 8000f2e:	42b8      	cmp	r0, r7
 8000f30:	d9dc      	bls.n	8000eec <I2C_WaitOnFlagUntilTimeout+0x12>
 8000f32:	e7ed      	b.n	8000f10 <I2C_WaitOnFlagUntilTimeout+0x36>

08000f34 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	4604      	mov	r4, r0
 8000f38:	460d      	mov	r5, r1
 8000f3a:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	061b      	lsls	r3, r3, #24
 8000f42:	d501      	bpl.n	8000f48 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000f44:	2000      	movs	r0, #0
 8000f46:	e012      	b.n	8000f6e <I2C_WaitOnTXEFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f7ff ff7d 	bl	8000e48 <I2C_IsAcknowledgeFailed>
 8000f4e:	b9a8      	cbnz	r0, 8000f7c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000f50:	1c6a      	adds	r2, r5, #1
 8000f52:	d0f3      	beq.n	8000f3c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f54:	b965      	cbnz	r5, 8000f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f56:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000f58:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f5a:	f043 0320 	orr.w	r3, r3, #32
 8000f5e:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f60:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000f62:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f64:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000f66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000f6a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f70:	f7ff fe1c 	bl	8000bac <HAL_GetTick>
 8000f74:	1b80      	subs	r0, r0, r6
 8000f76:	42a8      	cmp	r0, r5
 8000f78:	d9e0      	bls.n	8000f3c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000f7a:	e7ec      	b.n	8000f56 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	e7f6      	b.n	8000f6e <I2C_WaitOnTXEFlagUntilTimeout+0x3a>

08000f80 <I2C_RequestMemoryWrite>:
{
 8000f80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000f84:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f86:	6802      	ldr	r2, [r0, #0]
{
 8000f88:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f8a:	6813      	ldr	r3, [r2, #0]
{
 8000f8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f92:	6013      	str	r3, [r2, #0]
{
 8000f94:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f96:	9600      	str	r6, [sp, #0]
 8000f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000fa0:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fa2:	f7ff ff9a 	bl	8000eda <I2C_WaitOnFlagUntilTimeout>
 8000fa6:	b968      	cbnz	r0, 8000fc4 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000fae:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000fb2:	4633      	mov	r3, r6
 8000fb4:	491a      	ldr	r1, [pc, #104]	; (8001020 <I2C_RequestMemoryWrite+0xa0>)
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f7ff ff5b 	bl	8000e72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000fbc:	b130      	cbz	r0, 8000fcc <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d018      	beq.n	8000ff6 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8000fc4:	2003      	movs	r0, #3
}
 8000fc6:	b004      	add	sp, #16
 8000fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	9003      	str	r0, [sp, #12]
 8000fd0:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fd2:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fd4:	9203      	str	r2, [sp, #12]
 8000fd6:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fd8:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fda:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fdc:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fde:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fe0:	f7ff ffa8 	bl	8000f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8000fe4:	b148      	cbz	r0, 8000ffa <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d1eb      	bne.n	8000fc4 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000fec:	6822      	ldr	r2, [r4, #0]
 8000fee:	6813      	ldr	r3, [r2, #0]
 8000ff0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff4:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	e7e5      	b.n	8000fc6 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000ffa:	f1b8 0f01 	cmp.w	r8, #1
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	d102      	bne.n	8001008 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001002:	b2ed      	uxtb	r5, r5
 8001004:	611d      	str	r5, [r3, #16]
 8001006:	e7de      	b.n	8000fc6 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001008:	0a2a      	lsrs	r2, r5, #8
 800100a:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800100c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800100e:	4632      	mov	r2, r6
 8001010:	4620      	mov	r0, r4
 8001012:	f7ff ff8f 	bl	8000f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001016:	2800      	cmp	r0, #0
 8001018:	d1e5      	bne.n	8000fe6 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	e7f1      	b.n	8001002 <I2C_RequestMemoryWrite+0x82>
 800101e:	bf00      	nop
 8001020:	00010002 	.word	0x00010002

08001024 <I2C_RequestMemoryRead>:
{
 8001024:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001028:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800102a:	6803      	ldr	r3, [r0, #0]
{
 800102c:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800102e:	681a      	ldr	r2, [r3, #0]
{
 8001030:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001032:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001038:	681a      	ldr	r2, [r3, #0]
{
 800103a:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800103c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001040:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001042:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001046:	9500      	str	r5, [sp, #0]
 8001048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800104a:	2200      	movs	r2, #0
{
 800104c:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800104e:	f7ff ff44 	bl	8000eda <I2C_WaitOnFlagUntilTimeout>
 8001052:	b980      	cbnz	r0, 8001076 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	b2ff      	uxtb	r7, r7
 8001058:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800105c:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800105e:	492d      	ldr	r1, [pc, #180]	; (8001114 <I2C_RequestMemoryRead+0xf0>)
 8001060:	462b      	mov	r3, r5
 8001062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001064:	4620      	mov	r0, r4
 8001066:	f7ff ff04 	bl	8000e72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800106a:	b140      	cbz	r0, 800107e <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800106c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800106e:	2b04      	cmp	r3, #4
 8001070:	d101      	bne.n	8001076 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	e000      	b.n	8001078 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001076:	2003      	movs	r0, #3
}
 8001078:	b004      	add	sp, #16
 800107a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	9003      	str	r0, [sp, #12]
 8001082:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001084:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001086:	9203      	str	r2, [sp, #12]
 8001088:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800108a:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800108c:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800108e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001090:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001092:	f7ff ff4f 	bl	8000f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001096:	b140      	cbz	r0, 80010aa <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800109a:	2b04      	cmp	r3, #4
 800109c:	d1eb      	bne.n	8001076 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800109e:	6822      	ldr	r2, [r4, #0]
 80010a0:	6813      	ldr	r3, [r2, #0]
 80010a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	e7e3      	b.n	8001072 <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80010aa:	f1b8 0f01 	cmp.w	r8, #1
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	d124      	bne.n	80010fc <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80010b2:	b2f6      	uxtb	r6, r6
 80010b4:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010b6:	462a      	mov	r2, r5
 80010b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff ff3a 	bl	8000f34 <I2C_WaitOnTXEFlagUntilTimeout>
 80010c0:	4602      	mov	r2, r0
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d1e8      	bne.n	8001098 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80010c6:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010c8:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80010ca:	680b      	ldr	r3, [r1, #0]
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010d2:	9500      	str	r5, [sp, #0]
 80010d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010da:	f7ff fefe 	bl	8000eda <I2C_WaitOnFlagUntilTimeout>
 80010de:	2800      	cmp	r0, #0
 80010e0:	d1c9      	bne.n	8001076 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	f047 0701 	orr.w	r7, r7, #1
 80010e8:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80010ec:	462b      	mov	r3, r5
 80010ee:	4909      	ldr	r1, [pc, #36]	; (8001114 <I2C_RequestMemoryRead+0xf0>)
 80010f0:	4620      	mov	r0, r4
 80010f2:	f7ff febe 	bl	8000e72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010f6:	2800      	cmp	r0, #0
 80010f8:	d1b8      	bne.n	800106c <I2C_RequestMemoryRead+0x48>
 80010fa:	e7bd      	b.n	8001078 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80010fc:	0a32      	lsrs	r2, r6, #8
 80010fe:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001100:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001102:	462a      	mov	r2, r5
 8001104:	4620      	mov	r0, r4
 8001106:	f7ff ff15 	bl	8000f34 <I2C_WaitOnTXEFlagUntilTimeout>
 800110a:	2800      	cmp	r0, #0
 800110c:	d1c4      	bne.n	8001098 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	e7cf      	b.n	80010b2 <I2C_RequestMemoryRead+0x8e>
 8001112:	bf00      	nop
 8001114:	00010002 	.word	0x00010002

08001118 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001118:	b570      	push	{r4, r5, r6, lr}
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
 800111e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001120:	6820      	ldr	r0, [r4, #0]
 8001122:	6943      	ldr	r3, [r0, #20]
 8001124:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001128:	d001      	beq.n	800112e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800112a:	2000      	movs	r0, #0
 800112c:	e00d      	b.n	800114a <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800112e:	6942      	ldr	r2, [r0, #20]
 8001130:	06d2      	lsls	r2, r2, #27
 8001132:	d50b      	bpl.n	800114c <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001134:	f06f 0210 	mvn.w	r2, #16
 8001138:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 800113a:	2220      	movs	r2, #32
      return HAL_ERROR;
 800113c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800113e:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001140:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001144:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001146:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 800114a:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800114c:	b95d      	cbnz	r5, 8001166 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800114e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001150:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001152:	f043 0320 	orr.w	r3, r3, #32
 8001156:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001158:	2320      	movs	r3, #32
 800115a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800115e:	2300      	movs	r3, #0
 8001160:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001164:	e7f1      	b.n	800114a <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001166:	f7ff fd21 	bl	8000bac <HAL_GetTick>
 800116a:	1b80      	subs	r0, r0, r6
 800116c:	42a8      	cmp	r0, r5
 800116e:	d9d7      	bls.n	8001120 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001170:	e7ed      	b.n	800114e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001172 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001172:	b570      	push	{r4, r5, r6, lr}
 8001174:	4604      	mov	r4, r0
 8001176:	460d      	mov	r5, r1
 8001178:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	075b      	lsls	r3, r3, #29
 8001180:	d501      	bpl.n	8001186 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001182:	2000      	movs	r0, #0
 8001184:	e012      	b.n	80011ac <I2C_WaitOnBTFFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff fe5e 	bl	8000e48 <I2C_IsAcknowledgeFailed>
 800118c:	b9a8      	cbnz	r0, 80011ba <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800118e:	1c6a      	adds	r2, r5, #1
 8001190:	d0f3      	beq.n	800117a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001192:	b965      	cbnz	r5, 80011ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001194:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001196:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800119e:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80011a0:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80011a2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80011a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80011a8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 80011ac:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80011ae:	f7ff fcfd 	bl	8000bac <HAL_GetTick>
 80011b2:	1b80      	subs	r0, r0, r6
 80011b4:	42a8      	cmp	r0, r5
 80011b6:	d9e0      	bls.n	800117a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80011b8:	e7ec      	b.n	8001194 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80011ba:	2001      	movs	r0, #1
 80011bc:	e7f6      	b.n	80011ac <I2C_WaitOnBTFFlagUntilTimeout+0x3a>
	...

080011c0 <HAL_I2C_Init>:
{
 80011c0:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 80011c2:	4604      	mov	r4, r0
 80011c4:	b908      	cbnz	r0, 80011ca <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80011c6:	2001      	movs	r0, #1
}
 80011c8:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80011ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011d2:	b91b      	cbnz	r3, 80011dc <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80011d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80011d8:	f001 fc76 	bl	8002ac8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80011dc:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80011de:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80011e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80011e4:	6813      	ldr	r3, [r2, #0]
 80011e6:	f023 0301 	bic.w	r3, r3, #1
 80011ea:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011ec:	f000 fc92 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	4a2f      	ldr	r2, [pc, #188]	; (80012b0 <HAL_I2C_Init+0xf0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d830      	bhi.n	800125a <HAL_I2C_Init+0x9a>
 80011f8:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <HAL_I2C_Init+0xf4>)
 80011fa:	4290      	cmp	r0, r2
 80011fc:	d9e3      	bls.n	80011c6 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80011fe:	4a2e      	ldr	r2, [pc, #184]	; (80012b8 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001200:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001202:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001206:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001208:	3201      	adds	r2, #1
 800120a:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800120c:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <HAL_I2C_Init+0xf0>)
 800120e:	3801      	subs	r0, #1
 8001210:	4293      	cmp	r3, r2
 8001212:	d832      	bhi.n	800127a <HAL_I2C_Init+0xba>
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fbb0 f0f3 	udiv	r0, r0, r3
 800121a:	1c43      	adds	r3, r0, #1
 800121c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001220:	2b04      	cmp	r3, #4
 8001222:	bf38      	it	cc
 8001224:	2304      	movcc	r3, #4
 8001226:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001228:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001230:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001238:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800123c:	4313      	orrs	r3, r2
 800123e:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001240:	680b      	ldr	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001242:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800124a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800124c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800124e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001252:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001254:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001258:	e7b6      	b.n	80011c8 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <HAL_I2C_Init+0xfc>)
 800125c:	4290      	cmp	r0, r2
 800125e:	d9b2      	bls.n	80011c6 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001260:	4d15      	ldr	r5, [pc, #84]	; (80012b8 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001262:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001266:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 800126a:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800126c:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 800126e:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001270:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001274:	fbb2 f2f5 	udiv	r2, r2, r5
 8001278:	e7c6      	b.n	8001208 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800127a:	68a2      	ldr	r2, [r4, #8]
 800127c:	b952      	cbnz	r2, 8001294 <HAL_I2C_Init+0xd4>
 800127e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001282:	fbb0 f0f3 	udiv	r0, r0, r3
 8001286:	1c43      	adds	r3, r0, #1
 8001288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800128c:	b16b      	cbz	r3, 80012aa <HAL_I2C_Init+0xea>
 800128e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001292:	e7c8      	b.n	8001226 <HAL_I2C_Init+0x66>
 8001294:	2219      	movs	r2, #25
 8001296:	4353      	muls	r3, r2
 8001298:	fbb0 f0f3 	udiv	r0, r0, r3
 800129c:	1c43      	adds	r3, r0, #1
 800129e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a2:	b113      	cbz	r3, 80012aa <HAL_I2C_Init+0xea>
 80012a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a8:	e7bd      	b.n	8001226 <HAL_I2C_Init+0x66>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e7bb      	b.n	8001226 <HAL_I2C_Init+0x66>
 80012ae:	bf00      	nop
 80012b0:	000186a0 	.word	0x000186a0
 80012b4:	001e847f 	.word	0x001e847f
 80012b8:	000f4240 	.word	0x000f4240
 80012bc:	003d08ff 	.word	0x003d08ff

080012c0 <HAL_I2C_Mem_Write>:
{
 80012c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80012c4:	4604      	mov	r4, r0
 80012c6:	469a      	mov	sl, r3
 80012c8:	4688      	mov	r8, r1
 80012ca:	4691      	mov	r9, r2
 80012cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 80012ce:	f7ff fc6d 	bl	8000bac <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80012d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80012d6:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80012d8:	2b20      	cmp	r3, #32
 80012da:	d003      	beq.n	80012e4 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80012dc:	2002      	movs	r0, #2
}
 80012de:	b002      	add	sp, #8
 80012e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012e4:	9000      	str	r0, [sp, #0]
 80012e6:	2319      	movs	r3, #25
 80012e8:	2201      	movs	r2, #1
 80012ea:	493e      	ldr	r1, [pc, #248]	; (80013e4 <HAL_I2C_Mem_Write+0x124>)
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fdf4 	bl	8000eda <I2C_WaitOnFlagUntilTimeout>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d1f2      	bne.n	80012dc <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80012f6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d0ee      	beq.n	80012dc <HAL_I2C_Mem_Write+0x1c>
 80012fe:	2301      	movs	r3, #1
 8001300:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001304:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001306:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001308:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800130a:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800130c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800130e:	bf58      	it	pl
 8001310:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001312:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001314:	bf5c      	itt	pl
 8001316:	f042 0201 	orrpl.w	r2, r2, #1
 800131a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001322:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001324:	2321      	movs	r3, #33	; 0x21
 8001326:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800132a:	2340      	movs	r3, #64	; 0x40
 800132c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001332:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001334:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001336:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800133a:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 800133e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001342:	464a      	mov	r2, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001344:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001346:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001348:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800134a:	4653      	mov	r3, sl
 800134c:	f7ff fe18 	bl	8000f80 <I2C_RequestMemoryWrite>
 8001350:	2800      	cmp	r0, #0
 8001352:	d02a      	beq.n	80013aa <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001354:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001356:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800135a:	2b04      	cmp	r3, #4
 800135c:	d107      	bne.n	800136e <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 800135e:	2001      	movs	r0, #1
 8001360:	e7bd      	b.n	80012de <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001362:	f7ff fde7 	bl	8000f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001366:	b120      	cbz	r0, 8001372 <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800136a:	2b04      	cmp	r3, #4
 800136c:	d034      	beq.n	80013d8 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 800136e:	2003      	movs	r0, #3
 8001370:	e7b5      	b.n	80012de <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001372:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001374:	6827      	ldr	r7, [r4, #0]
 8001376:	1c4b      	adds	r3, r1, #1
 8001378:	6263      	str	r3, [r4, #36]	; 0x24
 800137a:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 800137c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800137e:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001380:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001382:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 8001384:	3b01      	subs	r3, #1
 8001386:	b29b      	uxth	r3, r3
 8001388:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800138a:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 800138c:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800138e:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001390:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001392:	d50a      	bpl.n	80013aa <HAL_I2C_Mem_Write+0xea>
 8001394:	b148      	cbz	r0, 80013aa <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001396:	1c8b      	adds	r3, r1, #2
 8001398:	6263      	str	r3, [r4, #36]	; 0x24
 800139a:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 800139c:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800139e:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 80013a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80013a2:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80013aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ac:	462a      	mov	r2, r5
 80013ae:	4631      	mov	r1, r6
 80013b0:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1d5      	bne.n	8001362 <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013b6:	f7ff fedc 	bl	8001172 <I2C_WaitOnBTFFlagUntilTimeout>
 80013ba:	2800      	cmp	r0, #0
 80013bc:	d1d4      	bne.n	8001368 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	6813      	ldr	r3, [r2, #0]
 80013c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80013c8:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80013ca:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80013ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80013d6:	e782      	b.n	80012de <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013d8:	6822      	ldr	r2, [r4, #0]
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e7bc      	b.n	800135e <HAL_I2C_Mem_Write+0x9e>
 80013e4:	00100002 	.word	0x00100002
 80013e8:	ffff0000 	.word	0xffff0000

080013ec <HAL_I2C_Mem_Read>:
{
 80013ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013f0:	4604      	mov	r4, r0
 80013f2:	b086      	sub	sp, #24
 80013f4:	469a      	mov	sl, r3
 80013f6:	460d      	mov	r5, r1
 80013f8:	4691      	mov	r9, r2
 80013fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80013fc:	f7ff fbd6 	bl	8000bac <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001400:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001404:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001406:	2b20      	cmp	r3, #32
 8001408:	d004      	beq.n	8001414 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 800140a:	2502      	movs	r5, #2
}
 800140c:	4628      	mov	r0, r5
 800140e:	b006      	add	sp, #24
 8001410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001414:	9000      	str	r0, [sp, #0]
 8001416:	2319      	movs	r3, #25
 8001418:	2201      	movs	r2, #1
 800141a:	4980      	ldr	r1, [pc, #512]	; (800161c <HAL_I2C_Mem_Read+0x230>)
 800141c:	4620      	mov	r0, r4
 800141e:	f7ff fd5c 	bl	8000eda <I2C_WaitOnFlagUntilTimeout>
 8001422:	2800      	cmp	r0, #0
 8001424:	d1f1      	bne.n	800140a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001426:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800142a:	2b01      	cmp	r3, #1
 800142c:	d0ed      	beq.n	800140a <HAL_I2C_Mem_Read+0x1e>
 800142e:	2301      	movs	r3, #1
 8001430:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001434:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001436:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800143a:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800143c:	4620      	mov	r0, r4
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800143e:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001440:	bf58      	it	pl
 8001442:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001444:	4629      	mov	r1, r5
      __HAL_I2C_ENABLE(hi2c);
 8001446:	bf5c      	itt	pl
 8001448:	f042 0201 	orrpl.w	r2, r2, #1
 800144c:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001454:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001456:	2322      	movs	r3, #34	; 0x22
 8001458:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800145c:	2340      	movs	r3, #64	; 0x40
 800145e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001464:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001468:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800146a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800146e:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8001472:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001474:	4b6a      	ldr	r3, [pc, #424]	; (8001620 <HAL_I2C_Mem_Read+0x234>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001476:	464a      	mov	r2, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001478:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800147a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800147c:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800147e:	4653      	mov	r3, sl
 8001480:	f7ff fdd0 	bl	8001024 <I2C_RequestMemoryRead>
 8001484:	4605      	mov	r5, r0
 8001486:	b130      	cbz	r0, 8001496 <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001488:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800148a:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800148e:	2b04      	cmp	r3, #4
 8001490:	d13d      	bne.n	800150e <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 8001492:	2501      	movs	r5, #1
 8001494:	e7ba      	b.n	800140c <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001496:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	b992      	cbnz	r2, 80014c2 <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800149c:	9002      	str	r0, [sp, #8]
 800149e:	695a      	ldr	r2, [r3, #20]
 80014a0:	9202      	str	r2, [sp, #8]
 80014a2:	699a      	ldr	r2, [r3, #24]
 80014a4:	9202      	str	r2, [sp, #8]
 80014a6:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ae:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80014b0:	2320      	movs	r3, #32
 80014b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80014bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80014c0:	e7a4      	b.n	800140c <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 80014c2:	2a01      	cmp	r2, #1
 80014c4:	d125      	bne.n	8001512 <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014cc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ce:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	9003      	str	r0, [sp, #12]
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	9203      	str	r2, [sp, #12]
 80014d8:	699a      	ldr	r2, [r3, #24]
 80014da:	9203      	str	r2, [sp, #12]
 80014dc:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014e6:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014e8:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8001624 <HAL_I2C_Mem_Read+0x238>
    while(hi2c->XferSize > 0U)
 80014ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0de      	beq.n	80014b0 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d877      	bhi.n	80015e6 <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d127      	bne.n	800154a <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80014fa:	4632      	mov	r2, r6
 80014fc:	4639      	mov	r1, r7
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff fe0a 	bl	8001118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001504:	2800      	cmp	r0, #0
 8001506:	d03f      	beq.n	8001588 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001508:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800150a:	2b20      	cmp	r3, #32
 800150c:	d1c1      	bne.n	8001492 <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 800150e:	2503      	movs	r5, #3
 8001510:	e77c      	b.n	800140c <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001512:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001514:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001516:	d10e      	bne.n	8001536 <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800151c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800151e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	9004      	str	r0, [sp, #16]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	9204      	str	r2, [sp, #16]
 8001528:	699a      	ldr	r2, [r3, #24]
 800152a:	9204      	str	r2, [sp, #16]
 800152c:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001534:	e7d6      	b.n	80014e4 <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800153a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800153c:	9005      	str	r0, [sp, #20]
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	9205      	str	r2, [sp, #20]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	9305      	str	r3, [sp, #20]
 8001546:	9b05      	ldr	r3, [sp, #20]
 8001548:	e7ce      	b.n	80014e8 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 800154a:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800154c:	9600      	str	r6, [sp, #0]
 800154e:	463b      	mov	r3, r7
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4641      	mov	r1, r8
 8001556:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001558:	d124      	bne.n	80015a4 <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800155a:	f7ff fcbe 	bl	8000eda <I2C_WaitOnFlagUntilTimeout>
 800155e:	2800      	cmp	r0, #0
 8001560:	d1d5      	bne.n	800150e <HAL_I2C_Mem_Read+0x122>
 8001562:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800156c:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001572:	1c59      	adds	r1, r3, #1
 8001574:	6261      	str	r1, [r4, #36]	; 0x24
 8001576:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001578:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800157a:	3b01      	subs	r3, #1
 800157c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800157e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001580:	3b01      	subs	r3, #1
 8001582:	b29b      	uxth	r3, r3
 8001584:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001586:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001588:	6823      	ldr	r3, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800158e:	1c59      	adds	r1, r3, #1
 8001590:	6261      	str	r1, [r4, #36]	; 0x24
 8001592:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001594:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001596:	3b01      	subs	r3, #1
 8001598:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800159a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800159c:	3b01      	subs	r3, #1
 800159e:	b29b      	uxth	r3, r3
 80015a0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80015a2:	e7a3      	b.n	80014ec <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015a4:	f7ff fc99 	bl	8000eda <I2C_WaitOnFlagUntilTimeout>
 80015a8:	4602      	mov	r2, r0
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d1af      	bne.n	800150e <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80015ae:	6821      	ldr	r1, [r4, #0]
 80015b0:	680b      	ldr	r3, [r1, #0]
 80015b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015b6:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	6919      	ldr	r1, [r3, #16]
 80015be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015c0:	1c58      	adds	r0, r3, #1
 80015c2:	6260      	str	r0, [r4, #36]	; 0x24
 80015c4:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 80015c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015c8:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 80015ca:	3b01      	subs	r3, #1
 80015cc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80015ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015d0:	4641      	mov	r1, r8
          hi2c->XferCount--;
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015d8:	4620      	mov	r0, r4
 80015da:	463b      	mov	r3, r7
 80015dc:	f7ff fc7d 	bl	8000eda <I2C_WaitOnFlagUntilTimeout>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d0bf      	beq.n	8001564 <HAL_I2C_Mem_Read+0x178>
 80015e4:	e793      	b.n	800150e <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e6:	4632      	mov	r2, r6
 80015e8:	4639      	mov	r1, r7
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff fd94 	bl	8001118 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d189      	bne.n	8001508 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015fa:	1c59      	adds	r1, r3, #1
 80015fc:	6261      	str	r1, [r4, #36]	; 0x24
 80015fe:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001600:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001602:	3b01      	subs	r3, #1
 8001604:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001606:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001608:	3b01      	subs	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	0752      	lsls	r2, r2, #29
 8001614:	f57f af6a 	bpl.w	80014ec <HAL_I2C_Mem_Read+0x100>
 8001618:	e7b7      	b.n	800158a <HAL_I2C_Mem_Read+0x19e>
 800161a:	bf00      	nop
 800161c:	00100002 	.word	0x00100002
 8001620:	ffff0000 	.word	0xffff0000
 8001624:	00010004 	.word	0x00010004

08001628 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001628:	6803      	ldr	r3, [r0, #0]
{
 800162a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	07db      	lsls	r3, r3, #31
{
 8001630:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	d410      	bmi.n	8001656 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	079f      	lsls	r7, r3, #30
 8001638:	d45e      	bmi.n	80016f8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	0719      	lsls	r1, r3, #28
 800163e:	f100 8095 	bmi.w	800176c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001642:	682b      	ldr	r3, [r5, #0]
 8001644:	075a      	lsls	r2, r3, #29
 8001646:	f100 80bf 	bmi.w	80017c8 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	69ea      	ldr	r2, [r5, #28]
 800164c:	2a00      	cmp	r2, #0
 800164e:	f040 812d 	bne.w	80018ac <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001652:	2000      	movs	r0, #0
 8001654:	e014      	b.n	8001680 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001656:	4c90      	ldr	r4, [pc, #576]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001658:	6863      	ldr	r3, [r4, #4]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b04      	cmp	r3, #4
 8001660:	d007      	beq.n	8001672 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001662:	6863      	ldr	r3, [r4, #4]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d10c      	bne.n	8001686 <HAL_RCC_OscConfig+0x5e>
 800166c:	6863      	ldr	r3, [r4, #4]
 800166e:	03de      	lsls	r6, r3, #15
 8001670:	d509      	bpl.n	8001686 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	039c      	lsls	r4, r3, #14
 8001676:	d5dd      	bpl.n	8001634 <HAL_RCC_OscConfig+0xc>
 8001678:	686b      	ldr	r3, [r5, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1da      	bne.n	8001634 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800167e:	2001      	movs	r0, #1
}
 8001680:	b002      	add	sp, #8
 8001682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001686:	686b      	ldr	r3, [r5, #4]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d110      	bne.n	80016b0 <HAL_RCC_OscConfig+0x88>
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001696:	f7ff fa89 	bl	8000bac <HAL_GetTick>
 800169a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	0398      	lsls	r0, r3, #14
 80016a0:	d4c8      	bmi.n	8001634 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a2:	f7ff fa83 	bl	8000bac <HAL_GetTick>
 80016a6:	1b80      	subs	r0, r0, r6
 80016a8:	2864      	cmp	r0, #100	; 0x64
 80016aa:	d9f7      	bls.n	800169c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80016ac:	2003      	movs	r0, #3
 80016ae:	e7e7      	b.n	8001680 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b0:	b99b      	cbnz	r3, 80016da <HAL_RCC_OscConfig+0xb2>
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b8:	6023      	str	r3, [r4, #0]
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016c2:	f7ff fa73 	bl	8000bac <HAL_GetTick>
 80016c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	0399      	lsls	r1, r3, #14
 80016cc:	d5b2      	bpl.n	8001634 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ce:	f7ff fa6d 	bl	8000bac <HAL_GetTick>
 80016d2:	1b80      	subs	r0, r0, r6
 80016d4:	2864      	cmp	r0, #100	; 0x64
 80016d6:	d9f7      	bls.n	80016c8 <HAL_RCC_OscConfig+0xa0>
 80016d8:	e7e8      	b.n	80016ac <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	d103      	bne.n	80016ea <HAL_RCC_OscConfig+0xc2>
 80016e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e6:	6023      	str	r3, [r4, #0]
 80016e8:	e7d1      	b.n	800168e <HAL_RCC_OscConfig+0x66>
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ee:	6023      	str	r3, [r4, #0]
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f6:	e7cd      	b.n	8001694 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016f8:	4c67      	ldr	r4, [pc, #412]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80016fa:	6863      	ldr	r3, [r4, #4]
 80016fc:	f013 0f0c 	tst.w	r3, #12
 8001700:	d007      	beq.n	8001712 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001702:	6863      	ldr	r3, [r4, #4]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	d110      	bne.n	800172e <HAL_RCC_OscConfig+0x106>
 800170c:	6863      	ldr	r3, [r4, #4]
 800170e:	03da      	lsls	r2, r3, #15
 8001710:	d40d      	bmi.n	800172e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	079b      	lsls	r3, r3, #30
 8001716:	d502      	bpl.n	800171e <HAL_RCC_OscConfig+0xf6>
 8001718:	692b      	ldr	r3, [r5, #16]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d1af      	bne.n	800167e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	696a      	ldr	r2, [r5, #20]
 8001722:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001726:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800172a:	6023      	str	r3, [r4, #0]
 800172c:	e785      	b.n	800163a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172e:	692a      	ldr	r2, [r5, #16]
 8001730:	4b5a      	ldr	r3, [pc, #360]	; (800189c <HAL_RCC_OscConfig+0x274>)
 8001732:	b16a      	cbz	r2, 8001750 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001738:	f7ff fa38 	bl	8000bac <HAL_GetTick>
 800173c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	079f      	lsls	r7, r3, #30
 8001742:	d4ec      	bmi.n	800171e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fa32 	bl	8000bac <HAL_GetTick>
 8001748:	1b80      	subs	r0, r0, r6
 800174a:	2802      	cmp	r0, #2
 800174c:	d9f7      	bls.n	800173e <HAL_RCC_OscConfig+0x116>
 800174e:	e7ad      	b.n	80016ac <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001750:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001752:	f7ff fa2b 	bl	8000bac <HAL_GetTick>
 8001756:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	0798      	lsls	r0, r3, #30
 800175c:	f57f af6d 	bpl.w	800163a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff fa24 	bl	8000bac <HAL_GetTick>
 8001764:	1b80      	subs	r0, r0, r6
 8001766:	2802      	cmp	r0, #2
 8001768:	d9f6      	bls.n	8001758 <HAL_RCC_OscConfig+0x130>
 800176a:	e79f      	b.n	80016ac <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176c:	69aa      	ldr	r2, [r5, #24]
 800176e:	4c4a      	ldr	r4, [pc, #296]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001770:	4b4b      	ldr	r3, [pc, #300]	; (80018a0 <HAL_RCC_OscConfig+0x278>)
 8001772:	b1da      	cbz	r2, 80017ac <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001778:	f7ff fa18 	bl	8000bac <HAL_GetTick>
 800177c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001780:	079b      	lsls	r3, r3, #30
 8001782:	d50d      	bpl.n	80017a0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001784:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001788:	4b46      	ldr	r3, [pc, #280]	; (80018a4 <HAL_RCC_OscConfig+0x27c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001790:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001792:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001794:	9b01      	ldr	r3, [sp, #4]
 8001796:	1e5a      	subs	r2, r3, #1
 8001798:	9201      	str	r2, [sp, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f9      	bne.n	8001792 <HAL_RCC_OscConfig+0x16a>
 800179e:	e750      	b.n	8001642 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fa04 	bl	8000bac <HAL_GetTick>
 80017a4:	1b80      	subs	r0, r0, r6
 80017a6:	2802      	cmp	r0, #2
 80017a8:	d9e9      	bls.n	800177e <HAL_RCC_OscConfig+0x156>
 80017aa:	e77f      	b.n	80016ac <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80017ac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017ae:	f7ff f9fd 	bl	8000bac <HAL_GetTick>
 80017b2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017b6:	079f      	lsls	r7, r3, #30
 80017b8:	f57f af43 	bpl.w	8001642 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff f9f6 	bl	8000bac <HAL_GetTick>
 80017c0:	1b80      	subs	r0, r0, r6
 80017c2:	2802      	cmp	r0, #2
 80017c4:	d9f6      	bls.n	80017b4 <HAL_RCC_OscConfig+0x18c>
 80017c6:	e771      	b.n	80016ac <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c8:	4c33      	ldr	r4, [pc, #204]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017ca:	69e3      	ldr	r3, [r4, #28]
 80017cc:	00d8      	lsls	r0, r3, #3
 80017ce:	d424      	bmi.n	800181a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80017d0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	69e3      	ldr	r3, [r4, #28]
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	61e3      	str	r3, [r4, #28]
 80017da:	69e3      	ldr	r3, [r4, #28]
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4e30      	ldr	r6, [pc, #192]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80017e6:	6833      	ldr	r3, [r6, #0]
 80017e8:	05d9      	lsls	r1, r3, #23
 80017ea:	d518      	bpl.n	800181e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	68eb      	ldr	r3, [r5, #12]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d126      	bne.n	8001840 <HAL_RCC_OscConfig+0x218>
 80017f2:	6a23      	ldr	r3, [r4, #32]
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017fa:	f7ff f9d7 	bl	8000bac <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001802:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	6a23      	ldr	r3, [r4, #32]
 8001806:	079b      	lsls	r3, r3, #30
 8001808:	d53f      	bpl.n	800188a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800180a:	2f00      	cmp	r7, #0
 800180c:	f43f af1d 	beq.w	800164a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001810:	69e3      	ldr	r3, [r4, #28]
 8001812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001816:	61e3      	str	r3, [r4, #28]
 8001818:	e717      	b.n	800164a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800181a:	2700      	movs	r7, #0
 800181c:	e7e2      	b.n	80017e4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181e:	6833      	ldr	r3, [r6, #0]
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001826:	f7ff f9c1 	bl	8000bac <HAL_GetTick>
 800182a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	6833      	ldr	r3, [r6, #0]
 800182e:	05da      	lsls	r2, r3, #23
 8001830:	d4dc      	bmi.n	80017ec <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001832:	f7ff f9bb 	bl	8000bac <HAL_GetTick>
 8001836:	eba0 0008 	sub.w	r0, r0, r8
 800183a:	2864      	cmp	r0, #100	; 0x64
 800183c:	d9f6      	bls.n	800182c <HAL_RCC_OscConfig+0x204>
 800183e:	e735      	b.n	80016ac <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001840:	b9ab      	cbnz	r3, 800186e <HAL_RCC_OscConfig+0x246>
 8001842:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6223      	str	r3, [r4, #32]
 800184e:	6a23      	ldr	r3, [r4, #32]
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001856:	f7ff f9a9 	bl	8000bac <HAL_GetTick>
 800185a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	6a23      	ldr	r3, [r4, #32]
 800185e:	0798      	lsls	r0, r3, #30
 8001860:	d5d3      	bpl.n	800180a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001862:	f7ff f9a3 	bl	8000bac <HAL_GetTick>
 8001866:	1b80      	subs	r0, r0, r6
 8001868:	4540      	cmp	r0, r8
 800186a:	d9f7      	bls.n	800185c <HAL_RCC_OscConfig+0x234>
 800186c:	e71e      	b.n	80016ac <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186e:	2b05      	cmp	r3, #5
 8001870:	6a23      	ldr	r3, [r4, #32]
 8001872:	d103      	bne.n	800187c <HAL_RCC_OscConfig+0x254>
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6223      	str	r3, [r4, #32]
 800187a:	e7ba      	b.n	80017f2 <HAL_RCC_OscConfig+0x1ca>
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6223      	str	r3, [r4, #32]
 8001882:	6a23      	ldr	r3, [r4, #32]
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	e7b6      	b.n	80017f8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff f98f 	bl	8000bac <HAL_GetTick>
 800188e:	eba0 0008 	sub.w	r0, r0, r8
 8001892:	42b0      	cmp	r0, r6
 8001894:	d9b6      	bls.n	8001804 <HAL_RCC_OscConfig+0x1dc>
 8001896:	e709      	b.n	80016ac <HAL_RCC_OscConfig+0x84>
 8001898:	40021000 	.word	0x40021000
 800189c:	42420000 	.word	0x42420000
 80018a0:	42420480 	.word	0x42420480
 80018a4:	20000008 	.word	0x20000008
 80018a8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ac:	4c22      	ldr	r4, [pc, #136]	; (8001938 <HAL_RCC_OscConfig+0x310>)
 80018ae:	6863      	ldr	r3, [r4, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	f43f aee2 	beq.w	800167e <HAL_RCC_OscConfig+0x56>
 80018ba:	2300      	movs	r3, #0
 80018bc:	4e1f      	ldr	r6, [pc, #124]	; (800193c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018be:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80018c0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c2:	d12b      	bne.n	800191c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80018c4:	f7ff f972 	bl	8000bac <HAL_GetTick>
 80018c8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	0199      	lsls	r1, r3, #6
 80018ce:	d41f      	bmi.n	8001910 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d0:	6a2b      	ldr	r3, [r5, #32]
 80018d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d6:	d105      	bne.n	80018e4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d8:	6862      	ldr	r2, [r4, #4]
 80018da:	68a9      	ldr	r1, [r5, #8]
 80018dc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80018e0:	430a      	orrs	r2, r1
 80018e2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80018e6:	6862      	ldr	r2, [r4, #4]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80018ee:	4313      	orrs	r3, r2
 80018f0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80018f2:	2301      	movs	r3, #1
 80018f4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80018f6:	f7ff f959 	bl	8000bac <HAL_GetTick>
 80018fa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	019a      	lsls	r2, r3, #6
 8001900:	f53f aea7 	bmi.w	8001652 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f952 	bl	8000bac <HAL_GetTick>
 8001908:	1b40      	subs	r0, r0, r5
 800190a:	2802      	cmp	r0, #2
 800190c:	d9f6      	bls.n	80018fc <HAL_RCC_OscConfig+0x2d4>
 800190e:	e6cd      	b.n	80016ac <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff f94c 	bl	8000bac <HAL_GetTick>
 8001914:	1bc0      	subs	r0, r0, r7
 8001916:	2802      	cmp	r0, #2
 8001918:	d9d7      	bls.n	80018ca <HAL_RCC_OscConfig+0x2a2>
 800191a:	e6c7      	b.n	80016ac <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800191c:	f7ff f946 	bl	8000bac <HAL_GetTick>
 8001920:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	019b      	lsls	r3, r3, #6
 8001926:	f57f ae94 	bpl.w	8001652 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff f93f 	bl	8000bac <HAL_GetTick>
 800192e:	1b40      	subs	r0, r0, r5
 8001930:	2802      	cmp	r0, #2
 8001932:	d9f6      	bls.n	8001922 <HAL_RCC_OscConfig+0x2fa>
 8001934:	e6ba      	b.n	80016ac <HAL_RCC_OscConfig+0x84>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	42420060 	.word	0x42420060

08001940 <HAL_RCC_GetSysClockFreq>:
{
 8001940:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001944:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001946:	ac02      	add	r4, sp, #8
 8001948:	f103 0510 	add.w	r5, r3, #16
 800194c:	4622      	mov	r2, r4
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	6859      	ldr	r1, [r3, #4]
 8001952:	3308      	adds	r3, #8
 8001954:	c203      	stmia	r2!, {r0, r1}
 8001956:	42ab      	cmp	r3, r5
 8001958:	4614      	mov	r4, r2
 800195a:	d1f7      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800195c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001960:	4911      	ldr	r1, [pc, #68]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001962:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001966:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001968:	f003 020c 	and.w	r2, r3, #12
 800196c:	2a08      	cmp	r2, #8
 800196e:	d117      	bne.n	80019a0 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001970:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001974:	a806      	add	r0, sp, #24
 8001976:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001978:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800197a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800197e:	d50c      	bpl.n	800199a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001980:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001982:	480a      	ldr	r0, [pc, #40]	; (80019ac <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001984:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001988:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800198a:	aa06      	add	r2, sp, #24
 800198c:	4413      	add	r3, r2
 800198e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001992:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001996:	b007      	add	sp, #28
 8001998:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x70>)
 800199c:	4350      	muls	r0, r2
 800199e:	e7fa      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80019a2:	e7f8      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x56>
 80019a4:	08004e58 	.word	0x08004e58
 80019a8:	40021000 	.word	0x40021000
 80019ac:	007a1200 	.word	0x007a1200
 80019b0:	003d0900 	.word	0x003d0900

080019b4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019b4:	4a53      	ldr	r2, [pc, #332]	; (8001b04 <HAL_RCC_ClockConfig+0x150>)
{
 80019b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019ba:	6813      	ldr	r3, [r2, #0]
{
 80019bc:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	428b      	cmp	r3, r1
{
 80019c4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019c6:	d328      	bcc.n	8001a1a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c8:	6829      	ldr	r1, [r5, #0]
 80019ca:	078c      	lsls	r4, r1, #30
 80019cc:	d432      	bmi.n	8001a34 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	07ca      	lsls	r2, r1, #31
 80019d0:	d445      	bmi.n	8001a5e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80019d2:	4a4c      	ldr	r2, [pc, #304]	; (8001b04 <HAL_RCC_ClockConfig+0x150>)
 80019d4:	6813      	ldr	r3, [r2, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	42b3      	cmp	r3, r6
 80019dc:	d87f      	bhi.n	8001ade <HAL_RCC_ClockConfig+0x12a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019de:	682a      	ldr	r2, [r5, #0]
 80019e0:	4c49      	ldr	r4, [pc, #292]	; (8001b08 <HAL_RCC_ClockConfig+0x154>)
 80019e2:	f012 0f04 	tst.w	r2, #4
 80019e6:	f040 8085 	bne.w	8001af4 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ea:	0713      	lsls	r3, r2, #28
 80019ec:	d506      	bpl.n	80019fc <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ee:	6863      	ldr	r3, [r4, #4]
 80019f0:	692a      	ldr	r2, [r5, #16]
 80019f2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019f6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019fa:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019fc:	f7ff ffa0 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 8001a00:	6863      	ldr	r3, [r4, #4]
 8001a02:	4a42      	ldr	r2, [pc, #264]	; (8001b0c <HAL_RCC_ClockConfig+0x158>)
 8001a04:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a08:	5cd3      	ldrb	r3, [r2, r3]
 8001a0a:	40d8      	lsrs	r0, r3
 8001a0c:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <HAL_RCC_ClockConfig+0x15c>)
 8001a0e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff f889 	bl	8000b28 <HAL_InitTick>
  return HAL_OK;
 8001a16:	2000      	movs	r0, #0
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_ClockConfig+0x7c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	6813      	ldr	r3, [r2, #0]
 8001a1c:	f023 0307 	bic.w	r3, r3, #7
 8001a20:	430b      	orrs	r3, r1
 8001a22:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	428b      	cmp	r3, r1
 8001a2c:	d0cc      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001a2e:	2001      	movs	r0, #1
}
 8001a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a34:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <HAL_RCC_ClockConfig+0x154>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a36:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a3a:	bf1e      	ittt	ne
 8001a3c:	685a      	ldrne	r2, [r3, #4]
 8001a3e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001a42:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a44:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a46:	bf42      	ittt	mi
 8001a48:	685a      	ldrmi	r2, [r3, #4]
 8001a4a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001a4e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	68a8      	ldr	r0, [r5, #8]
 8001a54:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a58:	4302      	orrs	r2, r0
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	e7b7      	b.n	80019ce <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	686a      	ldr	r2, [r5, #4]
 8001a60:	4c29      	ldr	r4, [pc, #164]	; (8001b08 <HAL_RCC_ClockConfig+0x154>)
 8001a62:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a64:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	d11b      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	d0df      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a74:	f023 0303 	bic.w	r3, r3, #3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001a7c:	f7ff f896 	bl	8000bac <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a80:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001a82:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d113      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xfc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a88:	6863      	ldr	r3, [r4, #4]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d09f      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a92:	f7ff f88b 	bl	8000bac <HAL_GetTick>
 8001a96:	1bc0      	subs	r0, r0, r7
 8001a98:	4540      	cmp	r0, r8
 8001a9a:	d9f5      	bls.n	8001a88 <HAL_RCC_ClockConfig+0xd4>
          return HAL_TIMEOUT;
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	e7c7      	b.n	8001a30 <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa0:	2a02      	cmp	r2, #2
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001aa8:	e7e0      	b.n	8001a6c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aaa:	f013 0f02 	tst.w	r3, #2
 8001aae:	e7dd      	b.n	8001a6c <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab4:	6863      	ldr	r3, [r4, #4]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d089      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abe:	f7ff f875 	bl	8000bac <HAL_GetTick>
 8001ac2:	1bc0      	subs	r0, r0, r7
 8001ac4:	4540      	cmp	r0, r8
 8001ac6:	d9f5      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x100>
 8001ac8:	e7e8      	b.n	8001a9c <HAL_RCC_ClockConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aca:	f7ff f86f 	bl	8000bac <HAL_GetTick>
 8001ace:	1bc0      	subs	r0, r0, r7
 8001ad0:	4540      	cmp	r0, r8
 8001ad2:	d8e3      	bhi.n	8001a9c <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad4:	6863      	ldr	r3, [r4, #4]
 8001ad6:	f013 0f0c 	tst.w	r3, #12
 8001ada:	d1f6      	bne.n	8001aca <HAL_RCC_ClockConfig+0x116>
 8001adc:	e779      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	6813      	ldr	r3, [r2, #0]
 8001ae0:	f023 0307 	bic.w	r3, r3, #7
 8001ae4:	4333      	orrs	r3, r6
 8001ae6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ae8:	6813      	ldr	r3, [r2, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	42b3      	cmp	r3, r6
 8001af0:	d19d      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x7a>
 8001af2:	e774      	b.n	80019de <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	6863      	ldr	r3, [r4, #4]
 8001af6:	68e9      	ldr	r1, [r5, #12]
 8001af8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001afc:	430b      	orrs	r3, r1
 8001afe:	6063      	str	r3, [r4, #4]
 8001b00:	e773      	b.n	80019ea <HAL_RCC_ClockConfig+0x36>
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	08004e75 	.word	0x08004e75
 8001b10:	20000008 	.word	0x20000008

08001b14 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b22:	6810      	ldr	r0, [r2, #0]
}    
 8001b24:	40d8      	lsrs	r0, r3
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08004e85 	.word	0x08004e85
 8001b30:	20000008 	.word	0x20000008

08001b34 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b3e:	5cd3      	ldrb	r3, [r2, r3]
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b42:	6810      	ldr	r0, [r2, #0]
} 
 8001b44:	40d8      	lsrs	r0, r3
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08004e85 	.word	0x08004e85
 8001b50:	20000008 	.word	0x20000008

08001b54 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b54:	6a03      	ldr	r3, [r0, #32]
{
 8001b56:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b5e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b60:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b62:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b66:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001b6a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b6c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001b6e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001b72:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b74:	4d0a      	ldr	r5, [pc, #40]	; (8001ba0 <TIM_OC1_SetConfig+0x4c>)
 8001b76:	42a8      	cmp	r0, r5
 8001b78:	d10b      	bne.n	8001b92 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001b7a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001b7c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001b80:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b82:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b86:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001b8a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b90:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b92:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b94:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b96:	684a      	ldr	r2, [r1, #4]
 8001b98:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b9a:	6203      	str	r3, [r0, #32]
}
 8001b9c:	bd70      	pop	{r4, r5, r6, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40012c00 	.word	0x40012c00

08001ba4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ba4:	6a03      	ldr	r3, [r0, #32]
{
 8001ba6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bb0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bb2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bb4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001bb6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001bba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bbc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001bbe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bc2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bc6:	4d0b      	ldr	r5, [pc, #44]	; (8001bf4 <TIM_OC3_SetConfig+0x50>)
 8001bc8:	42a8      	cmp	r0, r5
 8001bca:	d10d      	bne.n	8001be8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bcc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001bd6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001bda:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001bde:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001be4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001be8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001bea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001bec:	684a      	ldr	r2, [r1, #4]
 8001bee:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bf0:	6203      	str	r3, [r0, #32]
}
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
 8001bf4:	40012c00 	.word	0x40012c00

08001bf8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001bf8:	6a03      	ldr	r3, [r0, #32]
{
 8001bfa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c00:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c02:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c04:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c06:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c08:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c0a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c12:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c18:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c1c:	4d06      	ldr	r5, [pc, #24]	; (8001c38 <TIM_OC4_SetConfig+0x40>)
 8001c1e:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001c20:	bf02      	ittt	eq
 8001c22:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c24:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001c28:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c2c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c2e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c30:	684a      	ldr	r2, [r1, #4]
 8001c32:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c34:	6203      	str	r3, [r0, #32]
}
 8001c36:	bd30      	pop	{r4, r5, pc}
 8001c38:	40012c00 	.word	0x40012c00

08001c3c <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c3c:	6803      	ldr	r3, [r0, #0]
}
 8001c3e:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
}
 8001c50:	4770      	bx	lr

08001c52 <HAL_TIM_PWM_MspInit>:
 8001c52:	4770      	bx	lr

08001c54 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001c54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001c58:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	f04f 0302 	mov.w	r3, #2
 8001c60:	d01c      	beq.n	8001c9c <HAL_TIM_ConfigClockSource+0x48>
 8001c62:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001c64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001c68:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001c6a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001c6e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c70:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001c74:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001c78:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001c7a:	680a      	ldr	r2, [r1, #0]
 8001c7c:	2a40      	cmp	r2, #64	; 0x40
 8001c7e:	d079      	beq.n	8001d74 <HAL_TIM_ConfigClockSource+0x120>
 8001c80:	d819      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x62>
 8001c82:	2a10      	cmp	r2, #16
 8001c84:	f000 8093 	beq.w	8001dae <HAL_TIM_ConfigClockSource+0x15a>
 8001c88:	d80a      	bhi.n	8001ca0 <HAL_TIM_ConfigClockSource+0x4c>
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	f000 8089 	beq.w	8001da2 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c96:	2300      	movs	r3, #0
 8001c98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001c9c:	4618      	mov	r0, r3
}
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001ca0:	2a20      	cmp	r2, #32
 8001ca2:	f000 808a 	beq.w	8001dba <HAL_TIM_ConfigClockSource+0x166>
 8001ca6:	2a30      	cmp	r2, #48	; 0x30
 8001ca8:	d1f2      	bne.n	8001c90 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001caa:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cb0:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001cb4:	e036      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001cb6:	2a70      	cmp	r2, #112	; 0x70
 8001cb8:	d036      	beq.n	8001d28 <HAL_TIM_ConfigClockSource+0xd4>
 8001cba:	d81b      	bhi.n	8001cf4 <HAL_TIM_ConfigClockSource+0xa0>
 8001cbc:	2a50      	cmp	r2, #80	; 0x50
 8001cbe:	d042      	beq.n	8001d46 <HAL_TIM_ConfigClockSource+0xf2>
 8001cc0:	2a60      	cmp	r2, #96	; 0x60
 8001cc2:	d1e5      	bne.n	8001c90 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cc4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cc6:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cc8:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ccc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cce:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cd0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cd4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cdc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ce0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001ce4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ce6:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001ce8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cee:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001cf2:	e017      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001cf4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001cf8:	d011      	beq.n	8001d1e <HAL_TIM_ConfigClockSource+0xca>
 8001cfa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001cfe:	d1c7      	bne.n	8001c90 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d00:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001d04:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d06:	68c9      	ldr	r1, [r1, #12]
 8001d08:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d0a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d12:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d14:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d1c:	e002      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	e7b3      	b.n	8001c90 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr = TIMx->SMCR;
 8001d28:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d2a:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001d2e:	68c9      	ldr	r1, [r1, #12]
 8001d30:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d32:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d3a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001d3c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001d3e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d40:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001d44:	e7ee      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d46:	684c      	ldr	r4, [r1, #4]
 8001d48:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d4a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d4c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d4e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d52:	f025 0501 	bic.w	r5, r5, #1
 8001d56:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d58:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001d5a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d5c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d60:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001d64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d66:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001d68:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d6e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001d72:	e7d7      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d74:	684c      	ldr	r4, [r1, #4]
 8001d76:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d78:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d7a:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d7c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d80:	f025 0501 	bic.w	r5, r5, #1
 8001d84:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d86:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001d88:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d8e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d94:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001d96:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d9c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001da0:	e7c0      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001da2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001da4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001da8:	f042 0207 	orr.w	r2, r2, #7
 8001dac:	e7ba      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001dae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001db0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001db4:	f042 0217 	orr.w	r2, r2, #23
 8001db8:	e7b4      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001dba:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001dbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001dc0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001dc4:	e7ae      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0xd0>

08001dc6 <HAL_TIM_OC_DelayElapsedCallback>:
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_TIM_IC_CaptureCallback>:
 8001dc8:	4770      	bx	lr

08001dca <HAL_TIM_PWM_PulseFinishedCallback>:
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_TriggerCallback>:
 8001dcc:	4770      	bx	lr

08001dce <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dce:	6803      	ldr	r3, [r0, #0]
{
 8001dd0:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dd2:	691a      	ldr	r2, [r3, #16]
{
 8001dd4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dd6:	0791      	lsls	r1, r2, #30
 8001dd8:	d50e      	bpl.n	8001df8 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	0792      	lsls	r2, r2, #30
 8001dde:	d50b      	bpl.n	8001df8 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001de0:	f06f 0202 	mvn.w	r2, #2
 8001de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dea:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dec:	079b      	lsls	r3, r3, #30
 8001dee:	d077      	beq.n	8001ee0 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001df0:	f7ff ffea 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df4:	2300      	movs	r3, #0
 8001df6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	0750      	lsls	r0, r2, #29
 8001dfe:	d510      	bpl.n	8001e22 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	0751      	lsls	r1, r2, #29
 8001e04:	d50d      	bpl.n	8001e22 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e06:	f06f 0204 	mvn.w	r2, #4
 8001e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e0e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e10:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e12:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e18:	d068      	beq.n	8001eec <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	f7ff ffd5 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	0712      	lsls	r2, r2, #28
 8001e28:	d50f      	bpl.n	8001e4a <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	0710      	lsls	r0, r2, #28
 8001e2e:	d50c      	bpl.n	8001e4a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e30:	f06f 0208 	mvn.w	r2, #8
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e36:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e38:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e3c:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e40:	d05a      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	f7ff ffc1 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	2300      	movs	r3, #0
 8001e48:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	06d2      	lsls	r2, r2, #27
 8001e50:	d510      	bpl.n	8001e74 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	06d0      	lsls	r0, r2, #27
 8001e56:	d50d      	bpl.n	8001e74 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e58:	f06f 0210 	mvn.w	r2, #16
 8001e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e5e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e60:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e62:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e64:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001e68:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e6a:	d04b      	beq.n	8001f04 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6c:	f7ff ffac 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e70:	2300      	movs	r3, #0
 8001e72:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	07d1      	lsls	r1, r2, #31
 8001e7a:	d508      	bpl.n	8001e8e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	07d2      	lsls	r2, r2, #31
 8001e80:	d505      	bpl.n	8001e8e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e82:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e88:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e8a:	f000 fcfd 	bl	8002888 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	0610      	lsls	r0, r2, #24
 8001e94:	d508      	bpl.n	8001ea8 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	0611      	lsls	r1, r2, #24
 8001e9a:	d505      	bpl.n	8001ea8 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001ea0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ea2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001ea4:	f000 f99d 	bl	80021e2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	0652      	lsls	r2, r2, #25
 8001eae:	d508      	bpl.n	8001ec2 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	0650      	lsls	r0, r2, #25
 8001eb4:	d505      	bpl.n	8001ec2 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001eba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ebc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ebe:	f7ff ff85 	bl	8001dcc <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	691a      	ldr	r2, [r3, #16]
 8001ec6:	0691      	lsls	r1, r2, #26
 8001ec8:	d522      	bpl.n	8001f10 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	0692      	lsls	r2, r2, #26
 8001ece:	d51f      	bpl.n	8001f10 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ed0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001ed4:	4620      	mov	r0, r4
}
 8001ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eda:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001edc:	f000 b980 	b.w	80021e0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee0:	f7ff ff71 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff ff70 	bl	8001dca <HAL_TIM_PWM_PulseFinishedCallback>
 8001eea:	e783      	b.n	8001df4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eec:	f7ff ff6b 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f7ff ff6a 	bl	8001dca <HAL_TIM_PWM_PulseFinishedCallback>
 8001ef6:	e792      	b.n	8001e1e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef8:	f7ff ff65 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	4620      	mov	r0, r4
 8001efe:	f7ff ff64 	bl	8001dca <HAL_TIM_PWM_PulseFinishedCallback>
 8001f02:	e7a0      	b.n	8001e46 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f04:	f7ff ff5f 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff ff5e 	bl	8001dca <HAL_TIM_PWM_PulseFinishedCallback>
 8001f0e:	e7af      	b.n	8001e70 <HAL_TIM_IRQHandler+0xa2>
}
 8001f10:	bd10      	pop	{r4, pc}
	...

08001f14 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f14:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001f16:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f18:	4290      	cmp	r0, r2
 8001f1a:	d00a      	beq.n	8001f32 <TIM_Base_SetConfig+0x1e>
 8001f1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f20:	d007      	beq.n	8001f32 <TIM_Base_SetConfig+0x1e>
 8001f22:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f26:	4290      	cmp	r0, r2
 8001f28:	d003      	beq.n	8001f32 <TIM_Base_SetConfig+0x1e>
 8001f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f2e:	4290      	cmp	r0, r2
 8001f30:	d115      	bne.n	8001f5e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001f32:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f38:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f3a:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <TIM_Base_SetConfig+0x6c>)
 8001f3c:	4290      	cmp	r0, r2
 8001f3e:	d00a      	beq.n	8001f56 <TIM_Base_SetConfig+0x42>
 8001f40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f44:	d007      	beq.n	8001f56 <TIM_Base_SetConfig+0x42>
 8001f46:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f4a:	4290      	cmp	r0, r2
 8001f4c:	d003      	beq.n	8001f56 <TIM_Base_SetConfig+0x42>
 8001f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f52:	4290      	cmp	r0, r2
 8001f54:	d103      	bne.n	8001f5e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f56:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001f5e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001f64:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001f66:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f68:	688b      	ldr	r3, [r1, #8]
 8001f6a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f6c:	680b      	ldr	r3, [r1, #0]
 8001f6e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <TIM_Base_SetConfig+0x6c>)
 8001f72:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001f74:	bf04      	itt	eq
 8001f76:	690b      	ldreq	r3, [r1, #16]
 8001f78:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	6143      	str	r3, [r0, #20]
}
 8001f7e:	4770      	bx	lr
 8001f80:	40012c00 	.word	0x40012c00

08001f84 <HAL_TIM_Base_Init>:
{
 8001f84:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001f86:	4604      	mov	r4, r0
 8001f88:	b1a0      	cbz	r0, 8001fb4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001f8a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f92:	b91b      	cbnz	r3, 8001f9c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001f94:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001f98:	f000 fdd2 	bl	8002b40 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001f9c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f9e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001fa0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa4:	1d21      	adds	r1, r4, #4
 8001fa6:	f7ff ffb5 	bl	8001f14 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001faa:	2301      	movs	r3, #1
  return HAL_OK;
 8001fac:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001fae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001fb2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	e7fc      	b.n	8001fb2 <HAL_TIM_Base_Init+0x2e>

08001fb8 <HAL_TIM_PWM_Init>:
{
 8001fb8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001fba:	4604      	mov	r4, r0
 8001fbc:	b1a0      	cbz	r0, 8001fe8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001fbe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fc6:	b91b      	cbnz	r3, 8001fd0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001fc8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001fcc:	f7ff fe41 	bl	8001c52 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001fd0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001fd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd8:	1d21      	adds	r1, r4, #4
 8001fda:	f7ff ff9b 	bl	8001f14 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001fde:	2301      	movs	r3, #1
  return HAL_OK;
 8001fe0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001fe2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001fe6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fe8:	2001      	movs	r0, #1
 8001fea:	e7fc      	b.n	8001fe6 <HAL_TIM_PWM_Init+0x2e>

08001fec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fec:	6a03      	ldr	r3, [r0, #32]
{
 8001fee:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ff0:	f023 0310 	bic.w	r3, r3, #16
 8001ff4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001ff6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001ff8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001ffa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ffc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ffe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002002:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002006:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002008:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800200c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002010:	4d0b      	ldr	r5, [pc, #44]	; (8002040 <TIM_OC2_SetConfig+0x54>)
 8002012:	42a8      	cmp	r0, r5
 8002014:	d10d      	bne.n	8002032 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002016:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800201c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002020:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002024:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002028:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800202a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800202e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002032:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002034:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002036:	684a      	ldr	r2, [r1, #4]
 8002038:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800203a:	6203      	str	r3, [r0, #32]
}
 800203c:	bd70      	pop	{r4, r5, r6, pc}
 800203e:	bf00      	nop
 8002040:	40012c00 	.word	0x40012c00

08002044 <HAL_TIM_PWM_ConfigChannel>:
{
 8002044:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002046:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800204a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800204c:	2b01      	cmp	r3, #1
 800204e:	f04f 0002 	mov.w	r0, #2
 8002052:	d025      	beq.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002054:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002056:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800205a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800205e:	2a0c      	cmp	r2, #12
 8002060:	d818      	bhi.n	8002094 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002062:	e8df f002 	tbb	[pc, r2]
 8002066:	1707      	.short	0x1707
 8002068:	171e1717 	.word	0x171e1717
 800206c:	172f1717 	.word	0x172f1717
 8002070:	1717      	.short	0x1717
 8002072:	40          	.byte	0x40
 8002073:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002074:	6820      	ldr	r0, [r4, #0]
 8002076:	f7ff fd6d 	bl	8001b54 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800207a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800207c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	f042 0208 	orr.w	r2, r2, #8
 8002084:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	f022 0204 	bic.w	r2, r2, #4
 800208c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002092:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002094:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002096:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002098:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800209c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80020a0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020a2:	6820      	ldr	r0, [r4, #0]
 80020a4:	f7ff ffa2 	bl	8001fec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020a8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80020aa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020c2:	e7e6      	b.n	8002092 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020c4:	6820      	ldr	r0, [r4, #0]
 80020c6:	f7ff fd6d 	bl	8001ba4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020ca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020cc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	f042 0208 	orr.w	r2, r2, #8
 80020d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	f022 0204 	bic.w	r2, r2, #4
 80020dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80020e2:	61da      	str	r2, [r3, #28]
    break;
 80020e4:	e7d6      	b.n	8002094 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020e6:	6820      	ldr	r0, [r4, #0]
 80020e8:	f7ff fd86 	bl	8001bf8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020ec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80020ee:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002106:	e7ec      	b.n	80020e2 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002108 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002108:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800210a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800210c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800210e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002110:	ea23 0304 	bic.w	r3, r3, r4
 8002114:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002116:	6a03      	ldr	r3, [r0, #32]
 8002118:	408a      	lsls	r2, r1
 800211a:	431a      	orrs	r2, r3
 800211c:	6202      	str	r2, [r0, #32]
}
 800211e:	bd10      	pop	{r4, pc}

08002120 <HAL_TIM_OC_Start>:
{
 8002120:	b510      	push	{r4, lr}
 8002122:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002124:	2201      	movs	r2, #1
 8002126:	6800      	ldr	r0, [r0, #0]
 8002128:	f7ff ffee 	bl	8002108 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	4a06      	ldr	r2, [pc, #24]	; (8002148 <HAL_TIM_OC_Start+0x28>)
}
 8002130:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002132:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8002134:	bf02      	ittt	eq
 8002136:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002138:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800213c:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
}
 8002146:	bd10      	pop	{r4, pc}
 8002148:	40012c00 	.word	0x40012c00

0800214c <HAL_TIM_PWM_Start>:
 800214c:	f7ff bfe8 	b.w	8002120 <HAL_TIM_OC_Start>

08002150 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002150:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d01f      	beq.n	8002198 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002158:	68cb      	ldr	r3, [r1, #12]
 800215a:	688a      	ldr	r2, [r1, #8]
 800215c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002160:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002162:	684a      	ldr	r2, [r1, #4]
 8002164:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002168:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800216a:	680a      	ldr	r2, [r1, #0]
 800216c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002170:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002172:	690a      	ldr	r2, [r1, #16]
 8002174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002178:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800217a:	694a      	ldr	r2, [r1, #20]
 800217c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002180:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002182:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002184:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002188:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800218a:	6802      	ldr	r2, [r0, #0]
 800218c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800218e:	2300      	movs	r3, #0
 8002190:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002194:	4618      	mov	r0, r3
 8002196:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002198:	2002      	movs	r0, #2
}
 800219a:	4770      	bx	lr

0800219c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800219c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80021a0:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	f04f 0302 	mov.w	r3, #2
 80021a8:	d018      	beq.n	80021dc <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80021aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80021ae:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80021b0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80021b2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80021b4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80021b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021ba:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4322      	orrs	r2, r4
 80021c0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021d6:	2300      	movs	r3, #0
 80021d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80021dc:	4618      	mov	r0, r3

  return HAL_OK;
}
 80021de:	bd10      	pop	{r4, pc}

080021e0 <HAL_TIMEx_CommutationCallback>:
 80021e0:	4770      	bx	lr

080021e2 <HAL_TIMEx_BreakCallback>:
 80021e2:	4770      	bx	lr

080021e4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021e8:	4680      	mov	r8, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ea:	6803      	ldr	r3, [r0, #0]
 80021ec:	68c1      	ldr	r1, [r0, #12]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	2419      	movs	r4, #25
 80021f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80021f6:	430a      	orrs	r2, r1
 80021f8:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021fa:	6882      	ldr	r2, [r0, #8]
 80021fc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 80021fe:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002200:	4302      	orrs	r2, r0
 8002202:	f8d8 0014 	ldr.w	r0, [r8, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002206:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800220a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800220e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, 
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800221a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800221e:	430a      	orrs	r2, r1
 8002220:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002222:	4a3e      	ldr	r2, [pc, #248]	; (800231c <UART_SetConfig+0x138>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d147      	bne.n	80022b8 <UART_SetConfig+0xd4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002228:	f7ff fc84 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 800222c:	fb04 f300 	mul.w	r3, r4, r0
 8002230:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8002234:	2764      	movs	r7, #100	; 0x64
 8002236:	00b6      	lsls	r6, r6, #2
 8002238:	fbb3 f3f6 	udiv	r3, r3, r6
 800223c:	fbb3 f3f7 	udiv	r3, r3, r7
 8002240:	011e      	lsls	r6, r3, #4
 8002242:	f7ff fc77 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 8002246:	4360      	muls	r0, r4
 8002248:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	fbb0 f5f3 	udiv	r5, r0, r3
 8002252:	f7ff fc6f 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 8002256:	4360      	muls	r0, r4
 8002258:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002262:	fbb3 f3f7 	udiv	r3, r3, r7
 8002266:	fb07 5313 	mls	r3, r7, r3, r5
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	3332      	adds	r3, #50	; 0x32
 800226e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002272:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8002276:	f7ff fc5d 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 800227a:	4360      	muls	r0, r4
 800227c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	fbb0 f9f2 	udiv	r9, r0, r2
 8002286:	f7ff fc55 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800228a:	4360      	muls	r0, r4
 800228c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002290:	f8d8 2000 	ldr.w	r2, [r8]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	fbb0 f3f3 	udiv	r3, r0, r3
 800229a:	fbb3 f3f7 	udiv	r3, r3, r7
 800229e:	fb07 9313 	mls	r3, r7, r3, r9
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	3332      	adds	r3, #50	; 0x32
 80022a6:	fbb3 f3f7 	udiv	r3, r3, r7
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	432b      	orrs	r3, r5
 80022b0:	4433      	add	r3, r6
 80022b2:	6093      	str	r3, [r2, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80022b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022b8:	f7ff fc2c 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 80022bc:	fb04 f300 	mul.w	r3, r4, r0
 80022c0:	f8d8 6004 	ldr.w	r6, [r8, #4]
 80022c4:	2764      	movs	r7, #100	; 0x64
 80022c6:	00b6      	lsls	r6, r6, #2
 80022c8:	fbb3 f3f6 	udiv	r3, r3, r6
 80022cc:	fbb3 f3f7 	udiv	r3, r3, r7
 80022d0:	011e      	lsls	r6, r3, #4
 80022d2:	f7ff fc1f 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 80022d6:	4360      	muls	r0, r4
 80022d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	fbb0 f5f3 	udiv	r5, r0, r3
 80022e2:	f7ff fc17 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 80022e6:	4360      	muls	r0, r4
 80022e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f2:	fbb3 f3f7 	udiv	r3, r3, r7
 80022f6:	fb07 5313 	mls	r3, r7, r3, r5
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	3332      	adds	r3, #50	; 0x32
 80022fe:	fbb3 f3f7 	udiv	r3, r3, r7
 8002302:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8002306:	f7ff fc05 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 800230a:	4360      	muls	r0, r4
 800230c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002310:	0092      	lsls	r2, r2, #2
 8002312:	fbb0 f9f2 	udiv	r9, r0, r2
 8002316:	f7ff fbfd 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 800231a:	e7b6      	b.n	800228a <UART_SetConfig+0xa6>
 800231c:	40013800 	.word	0x40013800

08002320 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002322:	4604      	mov	r4, r0
 8002324:	460e      	mov	r6, r1
 8002326:	4617      	mov	r7, r2
 8002328:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800232a:	6821      	ldr	r1, [r4, #0]
 800232c:	680b      	ldr	r3, [r1, #0]
 800232e:	ea36 0303 	bics.w	r3, r6, r3
 8002332:	d101      	bne.n	8002338 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002334:	2000      	movs	r0, #0
 8002336:	e014      	b.n	8002362 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if(Timeout != HAL_MAX_DELAY)
 8002338:	1c6b      	adds	r3, r5, #1
 800233a:	d0f7      	beq.n	800232c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800233c:	b995      	cbnz	r5, 8002364 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800233e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002340:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002348:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002352:	2320      	movs	r3, #32
 8002354:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002358:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800235c:	2300      	movs	r3, #0
 800235e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8002362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002364:	f7fe fc22 	bl	8000bac <HAL_GetTick>
 8002368:	1bc0      	subs	r0, r0, r7
 800236a:	4285      	cmp	r5, r0
 800236c:	d2dd      	bcs.n	800232a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800236e:	e7e6      	b.n	800233e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002370 <HAL_UART_Init>:
{
 8002370:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002372:	4604      	mov	r4, r0
 8002374:	b340      	cbz	r0, 80023c8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002376:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800237a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800237e:	b91b      	cbnz	r3, 8002388 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002380:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002384:	f000 fc34 	bl	8002bf0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002388:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800238a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800238c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002390:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002392:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002398:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800239a:	f7ff ff23 	bl	80021e4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023b0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80023ba:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023bc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80023be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80023c2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80023c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023c8:	2001      	movs	r0, #1
 80023ca:	e7fc      	b.n	80023c6 <HAL_UART_Init+0x56>

080023cc <HAL_UART_Transmit>:
{
 80023cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023d0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80023d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80023d6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80023d8:	2b20      	cmp	r3, #32
{
 80023da:	460d      	mov	r5, r1
 80023dc:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80023de:	d14c      	bne.n	800247a <HAL_UART_Transmit+0xae>
    if((pData == NULL) || (Size == 0U))
 80023e0:	2900      	cmp	r1, #0
 80023e2:	d048      	beq.n	8002476 <HAL_UART_Transmit+0xaa>
 80023e4:	2a00      	cmp	r2, #0
 80023e6:	d046      	beq.n	8002476 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80023e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d044      	beq.n	800247a <HAL_UART_Transmit+0xae>
 80023f0:	2301      	movs	r3, #1
 80023f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023fa:	2321      	movs	r3, #33	; 0x21
 80023fc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002400:	f7fe fbd4 	bl	8000bac <HAL_GetTick>
 8002404:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002406:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800240a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800240e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002410:	b29b      	uxth	r3, r3
 8002412:	b963      	cbnz	r3, 800242e <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002414:	463b      	mov	r3, r7
 8002416:	4632      	mov	r2, r6
 8002418:	2140      	movs	r1, #64	; 0x40
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff ff80 	bl	8002320 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002420:	b9a0      	cbnz	r0, 800244c <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002422:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002424:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002428:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800242c:	e00f      	b.n	800244e <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800242e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002430:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002432:	3b01      	subs	r3, #1
 8002434:	b29b      	uxth	r3, r3
 8002436:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002438:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800243a:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002440:	4620      	mov	r0, r4
 8002442:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002444:	d10e      	bne.n	8002464 <HAL_UART_Transmit+0x98>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	f7ff ff6b 	bl	8002320 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800244a:	b110      	cbz	r0, 8002452 <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 800244c:	2003      	movs	r0, #3
}
 800244e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002452:	882b      	ldrh	r3, [r5, #0]
 8002454:	6822      	ldr	r2, [r4, #0]
 8002456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800245c:	6923      	ldr	r3, [r4, #16]
 800245e:	b943      	cbnz	r3, 8002472 <HAL_UART_Transmit+0xa6>
          pData +=2U;
 8002460:	3502      	adds	r5, #2
 8002462:	e7d4      	b.n	800240e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002464:	f7ff ff5c 	bl	8002320 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002468:	2800      	cmp	r0, #0
 800246a:	d1ef      	bne.n	800244c <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	782a      	ldrb	r2, [r5, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	3501      	adds	r5, #1
 8002474:	e7cb      	b.n	800240e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002476:	2001      	movs	r0, #1
 8002478:	e7e9      	b.n	800244e <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800247a:	2002      	movs	r0, #2
 800247c:	e7e7      	b.n	800244e <HAL_UART_Transmit+0x82>
	...

08002480 <clearBuffer>:

volatile float I, I_1, I_2, I_3, I_4, O, O_1, O_2, O_3, O_4;

void clearBuffer()
{
	for(int f = 0; f < sizeof(buffer); f++){
 8002480:	2300      	movs	r3, #0
		buffer[f] = '\0';
 8002482:	4619      	mov	r1, r3
 8002484:	4a02      	ldr	r2, [pc, #8]	; (8002490 <clearBuffer+0x10>)
 8002486:	54d1      	strb	r1, [r2, r3]
	for(int f = 0; f < sizeof(buffer); f++){
 8002488:	3301      	adds	r3, #1
 800248a:	2b19      	cmp	r3, #25
 800248c:	d1fb      	bne.n	8002486 <clearBuffer+0x6>
	}
}
 800248e:	4770      	bx	lr
 8002490:	200002bc 	.word	0x200002bc

08002494 <MPU6050_Init>:

void MPU6050_Init (void)
{
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002496:	2401      	movs	r4, #1
 8002498:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
{
 800249c:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800249e:	f10d 0316 	add.w	r3, sp, #22
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80024a8:	4623      	mov	r3, r4
 80024aa:	2275      	movs	r2, #117	; 0x75
 80024ac:	21d0      	movs	r1, #208	; 0xd0
 80024ae:	481c      	ldr	r0, [pc, #112]	; (8002520 <MPU6050_Init+0x8c>)
 80024b0:	f7fe ff9c 	bl	80013ec <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80024b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80024b8:	2b68      	cmp	r3, #104	; 0x68
 80024ba:	d12e      	bne.n	800251a <MPU6050_Init+0x86>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80024bc:	2700      	movs	r7, #0
 80024be:	ad06      	add	r5, sp, #24
 80024c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80024c4:	4623      	mov	r3, r4
 80024c6:	226b      	movs	r2, #107	; 0x6b
 80024c8:	21d0      	movs	r1, #208	; 0xd0
 80024ca:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80024ce:	9500      	str	r5, [sp, #0]
 80024d0:	4813      	ldr	r0, [pc, #76]	; (8002520 <MPU6050_Init+0x8c>)
 80024d2:	f7fe fef5 	bl	80012c0 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80024d6:	2307      	movs	r3, #7
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80024d8:	2219      	movs	r2, #25
		Data = 0x07;
 80024da:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80024de:	21d0      	movs	r1, #208	; 0xd0
 80024e0:	4623      	mov	r3, r4
 80024e2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80024e6:	9500      	str	r5, [sp, #0]
 80024e8:	480d      	ldr	r0, [pc, #52]	; (8002520 <MPU6050_Init+0x8c>)
 80024ea:	f7fe fee9 	bl	80012c0 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80024ee:	4623      	mov	r3, r4
 80024f0:	221c      	movs	r2, #28
 80024f2:	21d0      	movs	r1, #208	; 0xd0
 80024f4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80024f8:	9500      	str	r5, [sp, #0]
 80024fa:	4809      	ldr	r0, [pc, #36]	; (8002520 <MPU6050_Init+0x8c>)
		Data = 0x00;
 80024fc:	f88d 7017 	strb.w	r7, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002500:	f7fe fede 	bl	80012c0 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8002504:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002508:	9500      	str	r5, [sp, #0]
 800250a:	4623      	mov	r3, r4
 800250c:	221b      	movs	r2, #27
 800250e:	21d0      	movs	r1, #208	; 0xd0
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <MPU6050_Init+0x8c>)
		Data = 0x00;
 8002512:	f88d 7017 	strb.w	r7, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8002516:	f7fe fed3 	bl	80012c0 <HAL_I2C_Mem_Write>
	}

}
 800251a:	b007      	add	sp, #28
 800251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251e:	bf00      	nop
 8002520:	20000218 	.word	0x20000218

08002524 <MPU6050_Read_Accel>:
{
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002524:	2306      	movs	r3, #6
 8002526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
{
 800252a:	b530      	push	{r4, r5, lr}
 800252c:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800252e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002532:	ab04      	add	r3, sp, #16
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	223b      	movs	r2, #59	; 0x3b
 8002538:	2301      	movs	r3, #1
 800253a:	21d0      	movs	r1, #208	; 0xd0
 800253c:	481f      	ldr	r0, [pc, #124]	; (80025bc <MPU6050_Read_Accel+0x98>)
 800253e:	f7fe ff55 	bl	80013ec <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002542:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002546:	f89d 0011 	ldrb.w	r0, [sp, #17]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800254a:	f89d 5013 	ldrb.w	r5, [sp, #19]
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800254e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <MPU6050_Read_Accel+0x9c>)
 8002554:	b200      	sxth	r0, r0
 8002556:	8018      	strh	r0, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002558:	f89d 3012 	ldrb.w	r3, [sp, #18]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800255c:	f89d 4015 	ldrb.w	r4, [sp, #21]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002560:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <MPU6050_Read_Accel+0xa0>)
 8002566:	b22d      	sxth	r5, r5
 8002568:	801d      	strh	r5, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800256a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800256e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <MPU6050_Read_Accel+0xa4>)
 8002574:	b224      	sxth	r4, r4
 8002576:	801c      	strh	r4, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8002578:	f7fd ff44 	bl	8000404 <__aeabi_i2d>
 800257c:	2200      	movs	r2, #0
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <MPU6050_Read_Accel+0xa8>)
 8002580:	f7fd ffaa 	bl	80004d8 <__aeabi_dmul>
 8002584:	f7fe fa80 	bl	8000a88 <__aeabi_d2f>
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MPU6050_Read_Accel+0xac>)
 800258a:	6018      	str	r0, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 800258c:	4628      	mov	r0, r5
 800258e:	f7fd ff39 	bl	8000404 <__aeabi_i2d>
 8002592:	2200      	movs	r2, #0
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <MPU6050_Read_Accel+0xa8>)
 8002596:	f7fd ff9f 	bl	80004d8 <__aeabi_dmul>
 800259a:	f7fe fa75 	bl	8000a88 <__aeabi_d2f>
 800259e:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <MPU6050_Read_Accel+0xb0>)
 80025a0:	6018      	str	r0, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 80025a2:	4620      	mov	r0, r4
 80025a4:	f7fd ff2e 	bl	8000404 <__aeabi_i2d>
 80025a8:	2200      	movs	r2, #0
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <MPU6050_Read_Accel+0xa8>)
 80025ac:	f7fd ff94 	bl	80004d8 <__aeabi_dmul>
 80025b0:	f7fe fa6a 	bl	8000a88 <__aeabi_d2f>
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <MPU6050_Read_Accel+0xb4>)
 80025b6:	6018      	str	r0, [r3, #0]
}
 80025b8:	b007      	add	sp, #28
 80025ba:	bd30      	pop	{r4, r5, pc}
 80025bc:	20000218 	.word	0x20000218
 80025c0:	200001f8 	.word	0x200001f8
 80025c4:	200001fa 	.word	0x200001fa
 80025c8:	200001fc 	.word	0x200001fc
 80025cc:	3f100000 	.word	0x3f100000
 80025d0:	200002e8 	.word	0x200002e8
 80025d4:	20000274 	.word	0x20000274
 80025d8:	20000330 	.word	0x20000330

080025dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025dc:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025de:	2414      	movs	r4, #20
{
 80025e0:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025e2:	4622      	mov	r2, r4
 80025e4:	2100      	movs	r1, #0
 80025e6:	a808      	add	r0, sp, #32
 80025e8:	f000 fbe4 	bl	8002db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025ec:	4622      	mov	r2, r4
 80025ee:	2100      	movs	r1, #0
 80025f0:	a801      	add	r0, sp, #4
 80025f2:	f000 fbdf 	bl	8002db4 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025f6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025f8:	2201      	movs	r2, #1
 80025fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002602:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002606:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800260a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800260c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800260e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002610:	f7ff f80a 	bl	8001628 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002614:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002616:	2280      	movs	r2, #128	; 0x80
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002618:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800261c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800261e:	4621      	mov	r1, r4
 8002620:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002622:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002626:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002628:	f7ff f9c4 	bl	80019b4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800262c:	b010      	add	sp, #64	; 0x40
 800262e:	bd10      	pop	{r4, pc}

08002630 <main>:
	I = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	4a7e      	ldr	r2, [pc, #504]	; (800282c <main+0x1fc>)
{
 8002634:	b580      	push	{r7, lr}
	I = 0;
 8002636:	6013      	str	r3, [r2, #0]
	I_1 = 0;
 8002638:	4a7d      	ldr	r2, [pc, #500]	; (8002830 <main+0x200>)
	O = 0;
 800263a:	4f7e      	ldr	r7, [pc, #504]	; (8002834 <main+0x204>)
	I_1 = 0;
 800263c:	6013      	str	r3, [r2, #0]
	I_2 = 0;
 800263e:	4a7e      	ldr	r2, [pc, #504]	; (8002838 <main+0x208>)
{
 8002640:	b09a      	sub	sp, #104	; 0x68
	I_2 = 0;
 8002642:	6013      	str	r3, [r2, #0]
	I_3 = 0;
 8002644:	4a7d      	ldr	r2, [pc, #500]	; (800283c <main+0x20c>)
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002646:	2400      	movs	r4, #0
	I_3 = 0;
 8002648:	6013      	str	r3, [r2, #0]
	I_4 = 0;
 800264a:	4a7d      	ldr	r2, [pc, #500]	; (8002840 <main+0x210>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800264c:	4d7d      	ldr	r5, [pc, #500]	; (8002844 <main+0x214>)
	I_4 = 0;
 800264e:	6013      	str	r3, [r2, #0]
	O_1 = 0;
 8002650:	4a7d      	ldr	r2, [pc, #500]	; (8002848 <main+0x218>)
	O = 0;
 8002652:	603b      	str	r3, [r7, #0]
	O_1 = 0;
 8002654:	6013      	str	r3, [r2, #0]
	O_2 = 0;
 8002656:	4a7d      	ldr	r2, [pc, #500]	; (800284c <main+0x21c>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002658:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	O_2 = 0;
 800265c:	6013      	str	r3, [r2, #0]
	O_3 = 0;
 800265e:	4a7c      	ldr	r2, [pc, #496]	; (8002850 <main+0x220>)

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8002660:	4e7c      	ldr	r6, [pc, #496]	; (8002854 <main+0x224>)
	O_3 = 0;
 8002662:	6013      	str	r3, [r2, #0]
	O_4 = 0;
 8002664:	4a7c      	ldr	r2, [pc, #496]	; (8002858 <main+0x228>)
	  sprintf(buffer,"%.4f, %.4f\n\r",Ay,O);
 8002666:	f8df a218 	ldr.w	sl, [pc, #536]	; 8002880 <main+0x250>
	O_4 = 0;
 800266a:	6013      	str	r3, [r2, #0]
  HAL_Init();
 800266c:	f7fe fa80 	bl	8000b70 <HAL_Init>
  SystemClock_Config();
 8002670:	f7ff ffb4 	bl	80025dc <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002674:	4b79      	ldr	r3, [pc, #484]	; (800285c <main+0x22c>)
  hi2c1.Instance = I2C1;
 8002676:	487a      	ldr	r0, [pc, #488]	; (8002860 <main+0x230>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	f042 0220 	orr.w	r2, r2, #32
 800267e:	619a      	str	r2, [r3, #24]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	f002 0220 	and.w	r2, r2, #32
 8002686:	9203      	str	r2, [sp, #12]
 8002688:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	f042 0204 	orr.w	r2, r2, #4
 8002690:	619a      	str	r2, [r3, #24]
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	f002 0204 	and.w	r2, r2, #4
 8002698:	9204      	str	r2, [sp, #16]
 800269a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	f042 0208 	orr.w	r2, r2, #8
 80026a2:	619a      	str	r2, [r3, #24]
 80026a4:	699b      	ldr	r3, [r3, #24]
  hi2c1.Init.ClockSpeed = 400000;
 80026a6:	4a6f      	ldr	r2, [pc, #444]	; (8002864 <main+0x234>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	9305      	str	r3, [sp, #20]
 80026ae:	9b05      	ldr	r3, [sp, #20]
  hi2c1.Init.ClockSpeed = 400000;
 80026b0:	4b6d      	ldr	r3, [pc, #436]	; (8002868 <main+0x238>)
  hi2c1.Init.OwnAddress1 = 0;
 80026b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 80026b6:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026be:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026c2:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026c6:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026c8:	f7fe fd7a 	bl	80011c0 <HAL_I2C_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026cc:	4621      	mov	r1, r4
 80026ce:	2210      	movs	r2, #16
 80026d0:	a808      	add	r0, sp, #32
 80026d2:	f000 fb6f 	bl	8002db4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d6:	4621      	mov	r1, r4
 80026d8:	221c      	movs	r2, #28
 80026da:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026dc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026e0:	f000 fb68 	bl	8002db4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026e4:	221c      	movs	r2, #28
 80026e6:	4621      	mov	r1, r4
 80026e8:	a813      	add	r0, sp, #76	; 0x4c
 80026ea:	f000 fb63 	bl	8002db4 <memset>
  htim1.Init.Prescaler = 32000;
 80026ee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80026f2:	495e      	ldr	r1, [pc, #376]	; (800286c <main+0x23c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026f4:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 32000;
 80026f6:	e9c5 1300 	strd	r1, r3, [r5]
  htim1.Init.Period = 1000;
 80026fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fe:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002700:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002704:	e9c5 4405 	strd	r4, r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002708:	f7ff fc3c 	bl	8001f84 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800270c:	a908      	add	r1, sp, #32
 800270e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002710:	f8cd 8020 	str.w	r8, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002714:	f7ff fa9e 	bl	8001c54 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002718:	4628      	mov	r0, r5
 800271a:	f7ff fc4d 	bl	8001fb8 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800271e:	a906      	add	r1, sp, #24
 8002720:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002722:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002726:	f7ff fd39 	bl	800219c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 500;
 800272a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800272e:	2060      	movs	r0, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002730:	4622      	mov	r2, r4
  sConfigOC.Pulse = 500;
 8002732:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002736:	a90c      	add	r1, sp, #48	; 0x30
 8002738:	4628      	mov	r0, r5
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800273a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800273e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002742:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002744:	f7ff fc7e 	bl	8002044 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002748:	2204      	movs	r2, #4
 800274a:	a90c      	add	r1, sp, #48	; 0x30
 800274c:	4628      	mov	r0, r5
 800274e:	f7ff fc79 	bl	8002044 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002756:	a913      	add	r1, sp, #76	; 0x4c
 8002758:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800275a:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800275e:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002762:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002766:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002768:	f7ff fcf2 	bl	8002150 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 800276c:	4628      	mov	r0, r5
 800276e:	f000 fa17 	bl	8002ba0 <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 115200;
 8002772:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8002776:	483e      	ldr	r0, [pc, #248]	; (8002870 <main+0x240>)
  huart1.Init.BaudRate = 115200;
 8002778:	e9c0 6300 	strd	r6, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800277c:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800277e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002782:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002786:	6104      	str	r4, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800278a:	f7ff fdf1 	bl	8002370 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278e:	2210      	movs	r2, #16
 8002790:	4621      	mov	r1, r4
 8002792:	a813      	add	r0, sp, #76	; 0x4c
 8002794:	f000 fb0e 	bl	8002db4 <memset>
  htim2.Init.Prescaler = 3200;
 8002798:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800279c:	f44f 6348 	mov.w	r3, #3200	; 0xc80
  htim2.Instance = TIM2;
 80027a0:	4e34      	ldr	r6, [pc, #208]	; (8002874 <main+0x244>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  htim2.Init.Prescaler = 3200;
 80027a6:	e9c6 c300 	strd	ip, r3, [r6]
  htim2.Init.Period = 100;
 80027aa:	2364      	movs	r3, #100	; 0x64
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027ac:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ae:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b2:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b4:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027b6:	f7ff fbe5 	bl	8001f84 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027ba:	a913      	add	r1, sp, #76	; 0x4c
 80027bc:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027c2:	f7ff fa47 	bl	8001c54 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027c6:	a90c      	add	r1, sp, #48	; 0x30
 80027c8:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ca:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027ce:	f7ff fce5 	bl	800219c <HAL_TIMEx_MasterConfigSynchronization>
  MPU6050_Init();
 80027d2:	f7ff fe5f 	bl	8002494 <MPU6050_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80027d6:	4630      	mov	r0, r6
 80027d8:	f7ff fa30 	bl	8001c3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80027dc:	4621      	mov	r1, r4
 80027de:	4628      	mov	r0, r5
 80027e0:	f7ff fcb4 	bl	800214c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80027e4:	4628      	mov	r0, r5
 80027e6:	2104      	movs	r1, #4
 80027e8:	f7ff fcb0 	bl	800214c <HAL_TIM_PWM_Start>
	  sprintf(buffer,"%.4f, %.4f\n\r",Ay,O);
 80027ec:	4d22      	ldr	r5, [pc, #136]	; (8002878 <main+0x248>)
 80027ee:	4c23      	ldr	r4, [pc, #140]	; (800287c <main+0x24c>)
	  MPU6050_Read_Accel();
 80027f0:	f7ff fe98 	bl	8002524 <MPU6050_Read_Accel>
	  sprintf(buffer,"%.4f, %.4f\n\r",Ay,O);
 80027f4:	f8da 0000 	ldr.w	r0, [sl]
 80027f8:	f7fd fe16 	bl	8000428 <__aeabi_f2d>
 80027fc:	683e      	ldr	r6, [r7, #0]
 80027fe:	4680      	mov	r8, r0
 8002800:	4630      	mov	r0, r6
 8002802:	4689      	mov	r9, r1
 8002804:	f7fd fe10 	bl	8000428 <__aeabi_f2d>
 8002808:	4642      	mov	r2, r8
 800280a:	e9cd 0100 	strd	r0, r1, [sp]
 800280e:	464b      	mov	r3, r9
 8002810:	4629      	mov	r1, r5
 8002812:	4620      	mov	r0, r4
 8002814:	f000 ff26 	bl	8003664 <siprintf>
	  HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	2219      	movs	r2, #25
 800281e:	4621      	mov	r1, r4
 8002820:	4813      	ldr	r0, [pc, #76]	; (8002870 <main+0x240>)
 8002822:	f7ff fdd3 	bl	80023cc <HAL_UART_Transmit>
	  clearBuffer();
 8002826:	f7ff fe2b 	bl	8002480 <clearBuffer>
 800282a:	e7e1      	b.n	80027f0 <main+0x1c0>
 800282c:	20000334 	.word	0x20000334
 8002830:	200002e4 	.word	0x200002e4
 8002834:	200002e0 	.word	0x200002e0
 8002838:	2000032c 	.word	0x2000032c
 800283c:	200002dc 	.word	0x200002dc
 8002840:	20000378 	.word	0x20000378
 8002844:	200002ec 	.word	0x200002ec
 8002848:	20000214 	.word	0x20000214
 800284c:	20000270 	.word	0x20000270
 8002850:	200002d8 	.word	0x200002d8
 8002854:	40013800 	.word	0x40013800
 8002858:	2000026c 	.word	0x2000026c
 800285c:	40021000 	.word	0x40021000
 8002860:	20000218 	.word	0x20000218
 8002864:	40005400 	.word	0x40005400
 8002868:	00061a80 	.word	0x00061a80
 800286c:	40012c00 	.word	0x40012c00
 8002870:	2000027c 	.word	0x2000027c
 8002874:	20000338 	.word	0x20000338
 8002878:	08004e68 	.word	0x08004e68
 800287c:	200002bc 	.word	0x200002bc
 8002880:	20000274 	.word	0x20000274
 8002884:	00000000 	.word	0x00000000

08002888 <HAL_TIM_PeriodElapsedCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	O_4 = O_3;
 8002888:	4b73      	ldr	r3, [pc, #460]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800288a:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8002a78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 800288e:	681a      	ldr	r2, [r3, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	O_4 = O_3;
 8002894:	f8cc 2000 	str.w	r2, [ip]
	O_3 = O_2;
 8002898:	4a70      	ldr	r2, [pc, #448]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
	O_2 = O_1;
	O_1 = O;
 800289a:	4c71      	ldr	r4, [pc, #452]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
	O_3 = O_2;
 800289c:	6811      	ldr	r1, [r2, #0]
	I_4 = I_3;
 800289e:	4d71      	ldr	r5, [pc, #452]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
	O_3 = O_2;
 80028a0:	6019      	str	r1, [r3, #0]
	O_2 = O_1;
 80028a2:	4971      	ldr	r1, [pc, #452]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
	I_4 = I_3;
 80028a4:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8002a7c <HAL_TIM_PeriodElapsedCallback+0x1f4>
	O_2 = O_1;
 80028a8:	6808      	ldr	r0, [r1, #0]
	I_3 = I_2;
 80028aa:	4e70      	ldr	r6, [pc, #448]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
	O_2 = O_1;
 80028ac:	6010      	str	r0, [r2, #0]
	O_1 = O;
 80028ae:	6820      	ldr	r0, [r4, #0]
	I_2 = I_1;
 80028b0:	4f6f      	ldr	r7, [pc, #444]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
	O_1 = O;
 80028b2:	6008      	str	r0, [r1, #0]
	I_4 = I_3;
 80028b4:	6828      	ldr	r0, [r5, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80028b6:	b085      	sub	sp, #20
	I_4 = I_3;
 80028b8:	f8ce 0000 	str.w	r0, [lr]
	I_3 = I_2;
 80028bc:	6830      	ldr	r0, [r6, #0]
 80028be:	6028      	str	r0, [r5, #0]
	I_2 = I_1;
 80028c0:	6838      	ldr	r0, [r7, #0]
 80028c2:	6030      	str	r0, [r6, #0]
	I_1 = I;
 80028c4:	486b      	ldr	r0, [pc, #428]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80028c6:	f8d0 8000 	ldr.w	r8, [r0]
 80028ca:	f8c7 8000 	str.w	r8, [r7]
	I = Ay;
 80028ce:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002a80 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80028d2:	f8d8 8000 	ldr.w	r8, [r8]
 80028d6:	f8c0 8000 	str.w	r8, [r0]
	O = 0.0048*I+0.0193*I_1+0.0289*I_2+0.019*I_3+0.0048*I_4+2.3695*O_1-2.314*O_2+1.0547*O_3-0.1874*O_4;
 80028da:	6800      	ldr	r0, [r0, #0]
 80028dc:	683f      	ldr	r7, [r7, #0]
 80028de:	6836      	ldr	r6, [r6, #0]
 80028e0:	f8d5 b000 	ldr.w	fp, [r5]
 80028e4:	f8de 9000 	ldr.w	r9, [lr]
 80028e8:	f8d1 8000 	ldr.w	r8, [r1]
 80028ec:	6815      	ldr	r5, [r2, #0]
 80028ee:	f8d3 a000 	ldr.w	sl, [r3]
 80028f2:	f8dc 3000 	ldr.w	r3, [ip]
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	f7fd fd96 	bl	8000428 <__aeabi_f2d>
 80028fc:	a346      	add	r3, pc, #280	; (adr r3, 8002a18 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f7fd fde9 	bl	80004d8 <__aeabi_dmul>
 8002906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800290a:	4638      	mov	r0, r7
 800290c:	f7fd fd8c 	bl	8000428 <__aeabi_f2d>
 8002910:	a343      	add	r3, pc, #268	; (adr r3, 8002a20 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	f7fd fddf 	bl	80004d8 <__aeabi_dmul>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002922:	f7fd fc23 	bl	800016c <__adddf3>
 8002926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800292a:	4630      	mov	r0, r6
 800292c:	f7fd fd7c 	bl	8000428 <__aeabi_f2d>
 8002930:	a33d      	add	r3, pc, #244	; (adr r3, 8002a28 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002936:	f7fd fdcf 	bl	80004d8 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002942:	f7fd fc13 	bl	800016c <__adddf3>
 8002946:	4606      	mov	r6, r0
 8002948:	4658      	mov	r0, fp
 800294a:	460f      	mov	r7, r1
 800294c:	f7fd fd6c 	bl	8000428 <__aeabi_f2d>
 8002950:	a337      	add	r3, pc, #220	; (adr r3, 8002a30 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f7fd fdbf 	bl	80004d8 <__aeabi_dmul>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4630      	mov	r0, r6
 8002960:	4639      	mov	r1, r7
 8002962:	f7fd fc03 	bl	800016c <__adddf3>
 8002966:	4606      	mov	r6, r0
 8002968:	4648      	mov	r0, r9
 800296a:	460f      	mov	r7, r1
 800296c:	f7fd fd5c 	bl	8000428 <__aeabi_f2d>
 8002970:	a329      	add	r3, pc, #164	; (adr r3, 8002a18 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f7fd fdaf 	bl	80004d8 <__aeabi_dmul>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4630      	mov	r0, r6
 8002980:	4639      	mov	r1, r7
 8002982:	f7fd fbf3 	bl	800016c <__adddf3>
 8002986:	4606      	mov	r6, r0
 8002988:	4640      	mov	r0, r8
 800298a:	460f      	mov	r7, r1
 800298c:	f7fd fd4c 	bl	8000428 <__aeabi_f2d>
 8002990:	a329      	add	r3, pc, #164	; (adr r3, 8002a38 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fd9f 	bl	80004d8 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4630      	mov	r0, r6
 80029a0:	4639      	mov	r1, r7
 80029a2:	f7fd fbe3 	bl	800016c <__adddf3>
 80029a6:	4606      	mov	r6, r0
 80029a8:	4628      	mov	r0, r5
 80029aa:	460f      	mov	r7, r1
 80029ac:	f7fd fd3c 	bl	8000428 <__aeabi_f2d>
 80029b0:	a323      	add	r3, pc, #140	; (adr r3, 8002a40 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fd fd8f 	bl	80004d8 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4630      	mov	r0, r6
 80029c0:	4639      	mov	r1, r7
 80029c2:	f7fd fbd1 	bl	8000168 <__aeabi_dsub>
 80029c6:	4606      	mov	r6, r0
 80029c8:	4650      	mov	r0, sl
 80029ca:	460f      	mov	r7, r1
 80029cc:	f7fd fd2c 	bl	8000428 <__aeabi_f2d>
 80029d0:	a31d      	add	r3, pc, #116	; (adr r3, 8002a48 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	f7fd fd7f 	bl	80004d8 <__aeabi_dmul>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4630      	mov	r0, r6
 80029e0:	4639      	mov	r1, r7
 80029e2:	f7fd fbc3 	bl	800016c <__adddf3>
 80029e6:	4606      	mov	r6, r0
 80029e8:	9801      	ldr	r0, [sp, #4]
 80029ea:	460f      	mov	r7, r1
 80029ec:	f7fd fd1c 	bl	8000428 <__aeabi_f2d>
 80029f0:	a317      	add	r3, pc, #92	; (adr r3, 8002a50 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	f7fd fd6f 	bl	80004d8 <__aeabi_dmul>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4630      	mov	r0, r6
 8002a00:	4639      	mov	r1, r7
 8002a02:	f7fd fbb1 	bl	8000168 <__aeabi_dsub>
 8002a06:	f7fe f83f 	bl	8000a88 <__aeabi_d2f>
 8002a0a:	6020      	str	r0, [r4, #0]
}
 8002a0c:	b005      	add	sp, #20
 8002a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a12:	bf00      	nop
 8002a14:	f3af 8000 	nop.w
 8002a18:	30553261 	.word	0x30553261
 8002a1c:	3f73a92a 	.word	0x3f73a92a
 8002a20:	13404ea5 	.word	0x13404ea5
 8002a24:	3f93c361 	.word	0x3f93c361
 8002a28:	2b6ae7d5 	.word	0x2b6ae7d5
 8002a2c:	3f9d97f6 	.word	0x3f9d97f6
 8002a30:	6a7ef9db 	.word	0x6a7ef9db
 8002a34:	3f9374bc 	.word	0x3f9374bc
 8002a38:	6a7ef9db 	.word	0x6a7ef9db
 8002a3c:	4002f4bc 	.word	0x4002f4bc
 8002a40:	6e978d50 	.word	0x6e978d50
 8002a44:	40028312 	.word	0x40028312
 8002a48:	1b71758e 	.word	0x1b71758e
 8002a4c:	3ff0e00d 	.word	0x3ff0e00d
 8002a50:	23a29c78 	.word	0x23a29c78
 8002a54:	3fc7fcb9 	.word	0x3fc7fcb9
 8002a58:	200002d8 	.word	0x200002d8
 8002a5c:	20000270 	.word	0x20000270
 8002a60:	200002e0 	.word	0x200002e0
 8002a64:	200002dc 	.word	0x200002dc
 8002a68:	20000214 	.word	0x20000214
 8002a6c:	2000032c 	.word	0x2000032c
 8002a70:	200002e4 	.word	0x200002e4
 8002a74:	20000334 	.word	0x20000334
 8002a78:	2000026c 	.word	0x2000026c
 8002a7c:	20000378 	.word	0x20000378
 8002a80:	20000274 	.word	0x20000274

08002a84 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a84:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_MspInit+0x3c>)
{
 8002a86:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	619a      	str	r2, [r3, #24]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	f002 0201 	and.w	r2, r2, #1
 8002a96:	9200      	str	r2, [sp, #0]
 8002a98:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002aa0:	61da      	str	r2, [r3, #28]
 8002aa2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002aa4:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002aae:	6853      	ldr	r3, [r2, #4]
 8002ab0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ab4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aba:	b002      	add	sp, #8
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40010000 	.word	0x40010000

08002ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac8:	b510      	push	{r4, lr}
 8002aca:	4604      	mov	r4, r0
 8002acc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ace:	2210      	movs	r2, #16
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	a802      	add	r0, sp, #8
 8002ad4:	f000 f96e 	bl	8002db4 <memset>
  if(hi2c->Instance==I2C1)
 8002ad8:	6822      	ldr	r2, [r4, #0]
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_I2C_MspInit+0x68>)
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d124      	bne.n	8002b2a <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae0:	4c14      	ldr	r4, [pc, #80]	; (8002b34 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ae2:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	f043 0308 	orr.w	r3, r3, #8
 8002aee:	61a3      	str	r3, [r4, #24]
 8002af0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af2:	4811      	ldr	r0, [pc, #68]	; (8002b38 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afc:	2312      	movs	r3, #18
 8002afe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	f7fe f8bf 	bl	8000c88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002b0a:	4a0c      	ldr	r2, [pc, #48]	; (8002b3c <HAL_I2C_MspInit+0x74>)
 8002b0c:	6853      	ldr	r3, [r2, #4]
 8002b0e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b12:	f043 0302 	orr.w	r3, r3, #2
 8002b16:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b18:	69e3      	ldr	r3, [r4, #28]
 8002b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b1e:	61e3      	str	r3, [r4, #28]
 8002b20:	69e3      	ldr	r3, [r4, #28]
 8002b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b2a:	b006      	add	sp, #24
 8002b2c:	bd10      	pop	{r4, pc}
 8002b2e:	bf00      	nop
 8002b30:	40005400 	.word	0x40005400
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010c00 	.word	0x40010c00
 8002b3c:	40010000 	.word	0x40010000

08002b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b40:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 8002b42:	6803      	ldr	r3, [r0, #0]
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <HAL_TIM_Base_MspInit+0x58>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10c      	bne.n	8002b64 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_TIM_Base_MspInit+0x5c>)
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b52:	619a      	str	r2, [r3, #24]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b5e:	b003      	add	sp, #12
 8002b60:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b68:	d1f9      	bne.n	8002b5e <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b6a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002b6e:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b70:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b78:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b7c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b86:	f7fe f829 	bl	8000bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b8a:	201c      	movs	r0, #28
}
 8002b8c:	b003      	add	sp, #12
 8002b8e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b92:	f7fe b857 	b.w	8000c44 <HAL_NVIC_EnableIRQ>
 8002b96:	bf00      	nop
 8002b98:	40012c00 	.word	0x40012c00
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ba0:	b510      	push	{r4, lr}
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba6:	2210      	movs	r2, #16
 8002ba8:	2100      	movs	r1, #0
 8002baa:	a802      	add	r0, sp, #8
 8002bac:	f000 f902 	bl	8002db4 <memset>
  if(htim->Instance==TIM1)
 8002bb0:	6822      	ldr	r2, [r4, #0]
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_TIM_MspPostInit+0x48>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d114      	bne.n	8002be2 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002bbc:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbe:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc0:	f042 0204 	orr.w	r2, r2, #4
 8002bc4:	619a      	str	r2, [r3, #24]
 8002bc6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd6:	4805      	ldr	r0, [pc, #20]	; (8002bec <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bde:	f7fe f853 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002be2:	b006      	add	sp, #24
 8002be4:	bd10      	pop	{r4, pc}
 8002be6:	bf00      	nop
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40010800 	.word	0x40010800

08002bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf0:	b510      	push	{r4, lr}
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	a802      	add	r0, sp, #8
 8002bfc:	f000 f8da 	bl	8002db4 <memset>
  if(huart->Instance==USART1)
 8002c00:	6822      	ldr	r2, [r4, #0]
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_UART_MspInit+0x78>)
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d12d      	bne.n	8002c64 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c08:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002c0c:	699a      	ldr	r2, [r3, #24]
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c14:	619a      	str	r2, [r3, #24]
 8002c16:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c18:	4814      	ldr	r0, [pc, #80]	; (8002c6c <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c1a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002c1e:	9200      	str	r2, [sp, #0]
 8002c20:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	f042 0208 	orr.w	r2, r2, #8
 8002c28:	619a      	str	r2, [r3, #24]
 8002c2a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	9301      	str	r3, [sp, #4]
 8002c34:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c40:	f7fe f822 	bl	8000c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c44:	2300      	movs	r3, #0
 8002c46:	2180      	movs	r1, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c48:	4808      	ldr	r0, [pc, #32]	; (8002c6c <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c4a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c52:	f7fe f819 	bl	8000c88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002c56:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <HAL_UART_MspInit+0x80>)
 8002c58:	6853      	ldr	r3, [r2, #4]
 8002c5a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c64:	b006      	add	sp, #24
 8002c66:	bd10      	pop	{r4, pc}
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40010c00 	.word	0x40010c00
 8002c70:	40010000 	.word	0x40010000

08002c74 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c74:	4770      	bx	lr

08002c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c76:	e7fe      	b.n	8002c76 <HardFault_Handler>

08002c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c78:	e7fe      	b.n	8002c78 <MemManage_Handler>

08002c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7a:	e7fe      	b.n	8002c7a <BusFault_Handler>

08002c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c7c:	e7fe      	b.n	8002c7c <UsageFault_Handler>

08002c7e <SVC_Handler>:
 8002c7e:	4770      	bx	lr

08002c80 <DebugMon_Handler>:
 8002c80:	4770      	bx	lr

08002c82 <PendSV_Handler>:
 8002c82:	4770      	bx	lr

08002c84 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c84:	f7fd bf86 	b.w	8000b94 <HAL_IncTick>

08002c88 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c88:	4801      	ldr	r0, [pc, #4]	; (8002c90 <TIM2_IRQHandler+0x8>)
 8002c8a:	f7ff b8a0 	b.w	8001dce <HAL_TIM_IRQHandler>
 8002c8e:	bf00      	nop
 8002c90:	20000338 	.word	0x20000338

08002c94 <_sbrk>:
 8002c94:	b508      	push	{r3, lr}
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <_sbrk+0x2c>)
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6819      	ldr	r1, [r3, #0]
 8002c9c:	b909      	cbnz	r1, 8002ca2 <_sbrk+0xe>
 8002c9e:	4909      	ldr	r1, [pc, #36]	; (8002cc4 <_sbrk+0x30>)
 8002ca0:	6019      	str	r1, [r3, #0]
 8002ca2:	4669      	mov	r1, sp
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	4402      	add	r2, r0
 8002ca8:	428a      	cmp	r2, r1
 8002caa:	d906      	bls.n	8002cba <_sbrk+0x26>
 8002cac:	f000 f858 	bl	8002d60 <__errno>
 8002cb0:	230c      	movs	r3, #12
 8002cb2:	6003      	str	r3, [r0, #0]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	bd08      	pop	{r3, pc}
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	bd08      	pop	{r3, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000200 	.word	0x20000200
 8002cc4:	20000384 	.word	0x20000384

08002cc8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <SystemInit+0x40>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	f042 0201 	orr.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <SystemInit+0x44>)
 8002cd6:	400a      	ands	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ce0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002cf4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002cf6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002cfa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002cfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <SystemInit+0x48>)
 8002d02:	609a      	str	r2, [r3, #8]
#endif 
}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	f8ff0000 	.word	0xf8ff0000
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <Reset_Handler>:
 8002d14:	2100      	movs	r1, #0
 8002d16:	e003      	b.n	8002d20 <LoopCopyDataInit>

08002d18 <CopyDataInit>:
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <LoopFillZerobss+0x14>)
 8002d1a:	585b      	ldr	r3, [r3, r1]
 8002d1c:	5043      	str	r3, [r0, r1]
 8002d1e:	3104      	adds	r1, #4

08002d20 <LoopCopyDataInit>:
 8002d20:	480a      	ldr	r0, [pc, #40]	; (8002d4c <LoopFillZerobss+0x18>)
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <LoopFillZerobss+0x1c>)
 8002d24:	1842      	adds	r2, r0, r1
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3f6      	bcc.n	8002d18 <CopyDataInit>
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <LoopFillZerobss+0x20>)
 8002d2c:	e002      	b.n	8002d34 <LoopFillZerobss>

08002d2e <FillZerobss>:
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f842 3b04 	str.w	r3, [r2], #4

08002d34 <LoopFillZerobss>:
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <LoopFillZerobss+0x24>)
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d3f9      	bcc.n	8002d2e <FillZerobss>
 8002d3a:	f7ff ffc5 	bl	8002cc8 <SystemInit>
 8002d3e:	f000 f815 	bl	8002d6c <__libc_init_array>
 8002d42:	f7ff fc75 	bl	8002630 <main>
 8002d46:	4770      	bx	lr
 8002d48:	080050f0 	.word	0x080050f0
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	200001dc 	.word	0x200001dc
 8002d54:	200001dc 	.word	0x200001dc
 8002d58:	20000384 	.word	0x20000384

08002d5c <ADC1_2_IRQHandler>:
 8002d5c:	e7fe      	b.n	8002d5c <ADC1_2_IRQHandler>
	...

08002d60 <__errno>:
 8002d60:	4b01      	ldr	r3, [pc, #4]	; (8002d68 <__errno+0x8>)
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000000c 	.word	0x2000000c

08002d6c <__libc_init_array>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	2500      	movs	r5, #0
 8002d70:	4e0c      	ldr	r6, [pc, #48]	; (8002da4 <__libc_init_array+0x38>)
 8002d72:	4c0d      	ldr	r4, [pc, #52]	; (8002da8 <__libc_init_array+0x3c>)
 8002d74:	1ba4      	subs	r4, r4, r6
 8002d76:	10a4      	asrs	r4, r4, #2
 8002d78:	42a5      	cmp	r5, r4
 8002d7a:	d109      	bne.n	8002d90 <__libc_init_array+0x24>
 8002d7c:	f002 f85e 	bl	8004e3c <_init>
 8002d80:	2500      	movs	r5, #0
 8002d82:	4e0a      	ldr	r6, [pc, #40]	; (8002dac <__libc_init_array+0x40>)
 8002d84:	4c0a      	ldr	r4, [pc, #40]	; (8002db0 <__libc_init_array+0x44>)
 8002d86:	1ba4      	subs	r4, r4, r6
 8002d88:	10a4      	asrs	r4, r4, #2
 8002d8a:	42a5      	cmp	r5, r4
 8002d8c:	d105      	bne.n	8002d9a <__libc_init_array+0x2e>
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d94:	4798      	blx	r3
 8002d96:	3501      	adds	r5, #1
 8002d98:	e7ee      	b.n	8002d78 <__libc_init_array+0xc>
 8002d9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d9e:	4798      	blx	r3
 8002da0:	3501      	adds	r5, #1
 8002da2:	e7f2      	b.n	8002d8a <__libc_init_array+0x1e>
 8002da4:	080050e8 	.word	0x080050e8
 8002da8:	080050e8 	.word	0x080050e8
 8002dac:	080050e8 	.word	0x080050e8
 8002db0:	080050ec 	.word	0x080050ec

08002db4 <memset>:
 8002db4:	4603      	mov	r3, r0
 8002db6:	4402      	add	r2, r0
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d100      	bne.n	8002dbe <memset+0xa>
 8002dbc:	4770      	bx	lr
 8002dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc2:	e7f9      	b.n	8002db8 <memset+0x4>

08002dc4 <__cvt>:
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dca:	461e      	mov	r6, r3
 8002dcc:	bfbb      	ittet	lt
 8002dce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002dd2:	461e      	movlt	r6, r3
 8002dd4:	2300      	movge	r3, #0
 8002dd6:	232d      	movlt	r3, #45	; 0x2d
 8002dd8:	b088      	sub	sp, #32
 8002dda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002ddc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002de0:	f027 0720 	bic.w	r7, r7, #32
 8002de4:	2f46      	cmp	r7, #70	; 0x46
 8002de6:	4614      	mov	r4, r2
 8002de8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002dea:	700b      	strb	r3, [r1, #0]
 8002dec:	d004      	beq.n	8002df8 <__cvt+0x34>
 8002dee:	2f45      	cmp	r7, #69	; 0x45
 8002df0:	d100      	bne.n	8002df4 <__cvt+0x30>
 8002df2:	3501      	adds	r5, #1
 8002df4:	2302      	movs	r3, #2
 8002df6:	e000      	b.n	8002dfa <__cvt+0x36>
 8002df8:	2303      	movs	r3, #3
 8002dfa:	aa07      	add	r2, sp, #28
 8002dfc:	9204      	str	r2, [sp, #16]
 8002dfe:	aa06      	add	r2, sp, #24
 8002e00:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002e04:	e9cd 3500 	strd	r3, r5, [sp]
 8002e08:	4622      	mov	r2, r4
 8002e0a:	4633      	mov	r3, r6
 8002e0c:	f000 fcd8 	bl	80037c0 <_dtoa_r>
 8002e10:	2f47      	cmp	r7, #71	; 0x47
 8002e12:	4680      	mov	r8, r0
 8002e14:	d102      	bne.n	8002e1c <__cvt+0x58>
 8002e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e18:	07db      	lsls	r3, r3, #31
 8002e1a:	d526      	bpl.n	8002e6a <__cvt+0xa6>
 8002e1c:	2f46      	cmp	r7, #70	; 0x46
 8002e1e:	eb08 0905 	add.w	r9, r8, r5
 8002e22:	d111      	bne.n	8002e48 <__cvt+0x84>
 8002e24:	f898 3000 	ldrb.w	r3, [r8]
 8002e28:	2b30      	cmp	r3, #48	; 0x30
 8002e2a:	d10a      	bne.n	8002e42 <__cvt+0x7e>
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2300      	movs	r3, #0
 8002e30:	4620      	mov	r0, r4
 8002e32:	4631      	mov	r1, r6
 8002e34:	f7fd fdb8 	bl	80009a8 <__aeabi_dcmpeq>
 8002e38:	b918      	cbnz	r0, 8002e42 <__cvt+0x7e>
 8002e3a:	f1c5 0501 	rsb	r5, r5, #1
 8002e3e:	f8ca 5000 	str.w	r5, [sl]
 8002e42:	f8da 3000 	ldr.w	r3, [sl]
 8002e46:	4499      	add	r9, r3
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	4631      	mov	r1, r6
 8002e50:	f7fd fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8002e54:	b938      	cbnz	r0, 8002e66 <__cvt+0xa2>
 8002e56:	2230      	movs	r2, #48	; 0x30
 8002e58:	9b07      	ldr	r3, [sp, #28]
 8002e5a:	454b      	cmp	r3, r9
 8002e5c:	d205      	bcs.n	8002e6a <__cvt+0xa6>
 8002e5e:	1c59      	adds	r1, r3, #1
 8002e60:	9107      	str	r1, [sp, #28]
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e7f8      	b.n	8002e58 <__cvt+0x94>
 8002e66:	f8cd 901c 	str.w	r9, [sp, #28]
 8002e6a:	4640      	mov	r0, r8
 8002e6c:	9b07      	ldr	r3, [sp, #28]
 8002e6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002e70:	eba3 0308 	sub.w	r3, r3, r8
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	b008      	add	sp, #32
 8002e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002e7c <__exponent>:
 8002e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e7e:	2900      	cmp	r1, #0
 8002e80:	bfb4      	ite	lt
 8002e82:	232d      	movlt	r3, #45	; 0x2d
 8002e84:	232b      	movge	r3, #43	; 0x2b
 8002e86:	4604      	mov	r4, r0
 8002e88:	bfb8      	it	lt
 8002e8a:	4249      	neglt	r1, r1
 8002e8c:	2909      	cmp	r1, #9
 8002e8e:	f804 2b02 	strb.w	r2, [r4], #2
 8002e92:	7043      	strb	r3, [r0, #1]
 8002e94:	dd21      	ble.n	8002eda <__exponent+0x5e>
 8002e96:	f10d 0307 	add.w	r3, sp, #7
 8002e9a:	461f      	mov	r7, r3
 8002e9c:	260a      	movs	r6, #10
 8002e9e:	fb91 f5f6 	sdiv	r5, r1, r6
 8002ea2:	fb06 1115 	mls	r1, r6, r5, r1
 8002ea6:	2d09      	cmp	r5, #9
 8002ea8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002eac:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002eb0:	f103 32ff 	add.w	r2, r3, #4294967295
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	dc09      	bgt.n	8002ecc <__exponent+0x50>
 8002eb8:	3130      	adds	r1, #48	; 0x30
 8002eba:	3b02      	subs	r3, #2
 8002ebc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002ec0:	42bb      	cmp	r3, r7
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	d304      	bcc.n	8002ed0 <__exponent+0x54>
 8002ec6:	1a10      	subs	r0, r2, r0
 8002ec8:	b003      	add	sp, #12
 8002eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ecc:	4613      	mov	r3, r2
 8002ece:	e7e6      	b.n	8002e9e <__exponent+0x22>
 8002ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ed4:	f804 2b01 	strb.w	r2, [r4], #1
 8002ed8:	e7f2      	b.n	8002ec0 <__exponent+0x44>
 8002eda:	2330      	movs	r3, #48	; 0x30
 8002edc:	4419      	add	r1, r3
 8002ede:	7083      	strb	r3, [r0, #2]
 8002ee0:	1d02      	adds	r2, r0, #4
 8002ee2:	70c1      	strb	r1, [r0, #3]
 8002ee4:	e7ef      	b.n	8002ec6 <__exponent+0x4a>
	...

08002ee8 <_printf_float>:
 8002ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eec:	b091      	sub	sp, #68	; 0x44
 8002eee:	460c      	mov	r4, r1
 8002ef0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002ef2:	4693      	mov	fp, r2
 8002ef4:	461e      	mov	r6, r3
 8002ef6:	4605      	mov	r5, r0
 8002ef8:	f001 fa16 	bl	8004328 <_localeconv_r>
 8002efc:	6803      	ldr	r3, [r0, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	9309      	str	r3, [sp, #36]	; 0x24
 8002f02:	f7fd f925 	bl	8000150 <strlen>
 8002f06:	2300      	movs	r3, #0
 8002f08:	930e      	str	r3, [sp, #56]	; 0x38
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	900a      	str	r0, [sp, #40]	; 0x28
 8002f0e:	3307      	adds	r3, #7
 8002f10:	f023 0307 	bic.w	r3, r3, #7
 8002f14:	f103 0208 	add.w	r2, r3, #8
 8002f18:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002f1c:	f8d4 a000 	ldr.w	sl, [r4]
 8002f20:	603a      	str	r2, [r7, #0]
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002f2a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002f2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002f32:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295
 8002f38:	4ba6      	ldr	r3, [pc, #664]	; (80031d4 <_printf_float+0x2ec>)
 8002f3a:	4638      	mov	r0, r7
 8002f3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f3e:	f7fd fd65 	bl	8000a0c <__aeabi_dcmpun>
 8002f42:	bb68      	cbnz	r0, 8002fa0 <_printf_float+0xb8>
 8002f44:	f04f 32ff 	mov.w	r2, #4294967295
 8002f48:	4ba2      	ldr	r3, [pc, #648]	; (80031d4 <_printf_float+0x2ec>)
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f4e:	f7fd fd3f 	bl	80009d0 <__aeabi_dcmple>
 8002f52:	bb28      	cbnz	r0, 8002fa0 <_printf_float+0xb8>
 8002f54:	2200      	movs	r2, #0
 8002f56:	2300      	movs	r3, #0
 8002f58:	4638      	mov	r0, r7
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	f7fd fd2e 	bl	80009bc <__aeabi_dcmplt>
 8002f60:	b110      	cbz	r0, 8002f68 <_printf_float+0x80>
 8002f62:	232d      	movs	r3, #45	; 0x2d
 8002f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f68:	4f9b      	ldr	r7, [pc, #620]	; (80031d8 <_printf_float+0x2f0>)
 8002f6a:	4b9c      	ldr	r3, [pc, #624]	; (80031dc <_printf_float+0x2f4>)
 8002f6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f70:	bf98      	it	ls
 8002f72:	461f      	movls	r7, r3
 8002f74:	2303      	movs	r3, #3
 8002f76:	f04f 0900 	mov.w	r9, #0
 8002f7a:	6123      	str	r3, [r4, #16]
 8002f7c:	f02a 0304 	bic.w	r3, sl, #4
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	9600      	str	r6, [sp, #0]
 8002f84:	465b      	mov	r3, fp
 8002f86:	aa0f      	add	r2, sp, #60	; 0x3c
 8002f88:	4621      	mov	r1, r4
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f000 f9e2 	bl	8003354 <_printf_common>
 8002f90:	3001      	adds	r0, #1
 8002f92:	f040 8090 	bne.w	80030b6 <_printf_float+0x1ce>
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9a:	b011      	add	sp, #68	; 0x44
 8002f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa0:	463a      	mov	r2, r7
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	4638      	mov	r0, r7
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	f7fd fd30 	bl	8000a0c <__aeabi_dcmpun>
 8002fac:	b110      	cbz	r0, 8002fb4 <_printf_float+0xcc>
 8002fae:	4f8c      	ldr	r7, [pc, #560]	; (80031e0 <_printf_float+0x2f8>)
 8002fb0:	4b8c      	ldr	r3, [pc, #560]	; (80031e4 <_printf_float+0x2fc>)
 8002fb2:	e7db      	b.n	8002f6c <_printf_float+0x84>
 8002fb4:	6863      	ldr	r3, [r4, #4]
 8002fb6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002fba:	1c59      	adds	r1, r3, #1
 8002fbc:	a80d      	add	r0, sp, #52	; 0x34
 8002fbe:	a90e      	add	r1, sp, #56	; 0x38
 8002fc0:	d140      	bne.n	8003044 <_printf_float+0x15c>
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	6063      	str	r3, [r4, #4]
 8002fc6:	f04f 0c00 	mov.w	ip, #0
 8002fca:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002fce:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002fd2:	6863      	ldr	r3, [r4, #4]
 8002fd4:	6022      	str	r2, [r4, #0]
 8002fd6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	463a      	mov	r2, r7
 8002fde:	464b      	mov	r3, r9
 8002fe0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	f7ff feed 	bl	8002dc4 <__cvt>
 8002fea:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002fee:	2b47      	cmp	r3, #71	; 0x47
 8002ff0:	4607      	mov	r7, r0
 8002ff2:	d109      	bne.n	8003008 <_printf_float+0x120>
 8002ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ff6:	1cd8      	adds	r0, r3, #3
 8002ff8:	db02      	blt.n	8003000 <_printf_float+0x118>
 8002ffa:	6862      	ldr	r2, [r4, #4]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	dd47      	ble.n	8003090 <_printf_float+0x1a8>
 8003000:	f1a8 0802 	sub.w	r8, r8, #2
 8003004:	fa5f f888 	uxtb.w	r8, r8
 8003008:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800300c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800300e:	d824      	bhi.n	800305a <_printf_float+0x172>
 8003010:	3901      	subs	r1, #1
 8003012:	4642      	mov	r2, r8
 8003014:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003018:	910d      	str	r1, [sp, #52]	; 0x34
 800301a:	f7ff ff2f 	bl	8002e7c <__exponent>
 800301e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003020:	4681      	mov	r9, r0
 8003022:	1813      	adds	r3, r2, r0
 8003024:	2a01      	cmp	r2, #1
 8003026:	6123      	str	r3, [r4, #16]
 8003028:	dc02      	bgt.n	8003030 <_printf_float+0x148>
 800302a:	6822      	ldr	r2, [r4, #0]
 800302c:	07d1      	lsls	r1, r2, #31
 800302e:	d501      	bpl.n	8003034 <_printf_float+0x14c>
 8003030:	3301      	adds	r3, #1
 8003032:	6123      	str	r3, [r4, #16]
 8003034:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0a2      	beq.n	8002f82 <_printf_float+0x9a>
 800303c:	232d      	movs	r3, #45	; 0x2d
 800303e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003042:	e79e      	b.n	8002f82 <_printf_float+0x9a>
 8003044:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003048:	f000 816e 	beq.w	8003328 <_printf_float+0x440>
 800304c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003050:	d1b9      	bne.n	8002fc6 <_printf_float+0xde>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1b7      	bne.n	8002fc6 <_printf_float+0xde>
 8003056:	2301      	movs	r3, #1
 8003058:	e7b4      	b.n	8002fc4 <_printf_float+0xdc>
 800305a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800305e:	d119      	bne.n	8003094 <_printf_float+0x1ac>
 8003060:	2900      	cmp	r1, #0
 8003062:	6863      	ldr	r3, [r4, #4]
 8003064:	dd0c      	ble.n	8003080 <_printf_float+0x198>
 8003066:	6121      	str	r1, [r4, #16]
 8003068:	b913      	cbnz	r3, 8003070 <_printf_float+0x188>
 800306a:	6822      	ldr	r2, [r4, #0]
 800306c:	07d2      	lsls	r2, r2, #31
 800306e:	d502      	bpl.n	8003076 <_printf_float+0x18e>
 8003070:	3301      	adds	r3, #1
 8003072:	440b      	add	r3, r1
 8003074:	6123      	str	r3, [r4, #16]
 8003076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003078:	f04f 0900 	mov.w	r9, #0
 800307c:	65a3      	str	r3, [r4, #88]	; 0x58
 800307e:	e7d9      	b.n	8003034 <_printf_float+0x14c>
 8003080:	b913      	cbnz	r3, 8003088 <_printf_float+0x1a0>
 8003082:	6822      	ldr	r2, [r4, #0]
 8003084:	07d0      	lsls	r0, r2, #31
 8003086:	d501      	bpl.n	800308c <_printf_float+0x1a4>
 8003088:	3302      	adds	r3, #2
 800308a:	e7f3      	b.n	8003074 <_printf_float+0x18c>
 800308c:	2301      	movs	r3, #1
 800308e:	e7f1      	b.n	8003074 <_printf_float+0x18c>
 8003090:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003094:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003098:	4293      	cmp	r3, r2
 800309a:	db05      	blt.n	80030a8 <_printf_float+0x1c0>
 800309c:	6822      	ldr	r2, [r4, #0]
 800309e:	6123      	str	r3, [r4, #16]
 80030a0:	07d1      	lsls	r1, r2, #31
 80030a2:	d5e8      	bpl.n	8003076 <_printf_float+0x18e>
 80030a4:	3301      	adds	r3, #1
 80030a6:	e7e5      	b.n	8003074 <_printf_float+0x18c>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bfcc      	ite	gt
 80030ac:	2301      	movgt	r3, #1
 80030ae:	f1c3 0302 	rsble	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	e7de      	b.n	8003074 <_printf_float+0x18c>
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	055a      	lsls	r2, r3, #21
 80030ba:	d407      	bmi.n	80030cc <_printf_float+0x1e4>
 80030bc:	6923      	ldr	r3, [r4, #16]
 80030be:	463a      	mov	r2, r7
 80030c0:	4659      	mov	r1, fp
 80030c2:	4628      	mov	r0, r5
 80030c4:	47b0      	blx	r6
 80030c6:	3001      	adds	r0, #1
 80030c8:	d129      	bne.n	800311e <_printf_float+0x236>
 80030ca:	e764      	b.n	8002f96 <_printf_float+0xae>
 80030cc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80030d0:	f240 80d7 	bls.w	8003282 <_printf_float+0x39a>
 80030d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80030d8:	2200      	movs	r2, #0
 80030da:	2300      	movs	r3, #0
 80030dc:	f7fd fc64 	bl	80009a8 <__aeabi_dcmpeq>
 80030e0:	b388      	cbz	r0, 8003146 <_printf_float+0x25e>
 80030e2:	2301      	movs	r3, #1
 80030e4:	4a40      	ldr	r2, [pc, #256]	; (80031e8 <_printf_float+0x300>)
 80030e6:	4659      	mov	r1, fp
 80030e8:	4628      	mov	r0, r5
 80030ea:	47b0      	blx	r6
 80030ec:	3001      	adds	r0, #1
 80030ee:	f43f af52 	beq.w	8002f96 <_printf_float+0xae>
 80030f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80030f6:	429a      	cmp	r2, r3
 80030f8:	db02      	blt.n	8003100 <_printf_float+0x218>
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	07d8      	lsls	r0, r3, #31
 80030fe:	d50e      	bpl.n	800311e <_printf_float+0x236>
 8003100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003104:	4659      	mov	r1, fp
 8003106:	4628      	mov	r0, r5
 8003108:	47b0      	blx	r6
 800310a:	3001      	adds	r0, #1
 800310c:	f43f af43 	beq.w	8002f96 <_printf_float+0xae>
 8003110:	2700      	movs	r7, #0
 8003112:	f104 081a 	add.w	r8, r4, #26
 8003116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003118:	3b01      	subs	r3, #1
 800311a:	42bb      	cmp	r3, r7
 800311c:	dc09      	bgt.n	8003132 <_printf_float+0x24a>
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	079f      	lsls	r7, r3, #30
 8003122:	f100 80fd 	bmi.w	8003320 <_printf_float+0x438>
 8003126:	68e0      	ldr	r0, [r4, #12]
 8003128:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800312a:	4298      	cmp	r0, r3
 800312c:	bfb8      	it	lt
 800312e:	4618      	movlt	r0, r3
 8003130:	e733      	b.n	8002f9a <_printf_float+0xb2>
 8003132:	2301      	movs	r3, #1
 8003134:	4642      	mov	r2, r8
 8003136:	4659      	mov	r1, fp
 8003138:	4628      	mov	r0, r5
 800313a:	47b0      	blx	r6
 800313c:	3001      	adds	r0, #1
 800313e:	f43f af2a 	beq.w	8002f96 <_printf_float+0xae>
 8003142:	3701      	adds	r7, #1
 8003144:	e7e7      	b.n	8003116 <_printf_float+0x22e>
 8003146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003148:	2b00      	cmp	r3, #0
 800314a:	dc2b      	bgt.n	80031a4 <_printf_float+0x2bc>
 800314c:	2301      	movs	r3, #1
 800314e:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <_printf_float+0x300>)
 8003150:	4659      	mov	r1, fp
 8003152:	4628      	mov	r0, r5
 8003154:	47b0      	blx	r6
 8003156:	3001      	adds	r0, #1
 8003158:	f43f af1d 	beq.w	8002f96 <_printf_float+0xae>
 800315c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800315e:	b923      	cbnz	r3, 800316a <_printf_float+0x282>
 8003160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003162:	b913      	cbnz	r3, 800316a <_printf_float+0x282>
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	07d9      	lsls	r1, r3, #31
 8003168:	d5d9      	bpl.n	800311e <_printf_float+0x236>
 800316a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800316e:	4659      	mov	r1, fp
 8003170:	4628      	mov	r0, r5
 8003172:	47b0      	blx	r6
 8003174:	3001      	adds	r0, #1
 8003176:	f43f af0e 	beq.w	8002f96 <_printf_float+0xae>
 800317a:	f04f 0800 	mov.w	r8, #0
 800317e:	f104 091a 	add.w	r9, r4, #26
 8003182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003184:	425b      	negs	r3, r3
 8003186:	4543      	cmp	r3, r8
 8003188:	dc01      	bgt.n	800318e <_printf_float+0x2a6>
 800318a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800318c:	e797      	b.n	80030be <_printf_float+0x1d6>
 800318e:	2301      	movs	r3, #1
 8003190:	464a      	mov	r2, r9
 8003192:	4659      	mov	r1, fp
 8003194:	4628      	mov	r0, r5
 8003196:	47b0      	blx	r6
 8003198:	3001      	adds	r0, #1
 800319a:	f43f aefc 	beq.w	8002f96 <_printf_float+0xae>
 800319e:	f108 0801 	add.w	r8, r8, #1
 80031a2:	e7ee      	b.n	8003182 <_printf_float+0x29a>
 80031a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031a8:	429a      	cmp	r2, r3
 80031aa:	bfa8      	it	ge
 80031ac:	461a      	movge	r2, r3
 80031ae:	2a00      	cmp	r2, #0
 80031b0:	4690      	mov	r8, r2
 80031b2:	dd07      	ble.n	80031c4 <_printf_float+0x2dc>
 80031b4:	4613      	mov	r3, r2
 80031b6:	4659      	mov	r1, fp
 80031b8:	463a      	mov	r2, r7
 80031ba:	4628      	mov	r0, r5
 80031bc:	47b0      	blx	r6
 80031be:	3001      	adds	r0, #1
 80031c0:	f43f aee9 	beq.w	8002f96 <_printf_float+0xae>
 80031c4:	f104 031a 	add.w	r3, r4, #26
 80031c8:	f04f 0a00 	mov.w	sl, #0
 80031cc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80031d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80031d2:	e015      	b.n	8003200 <_printf_float+0x318>
 80031d4:	7fefffff 	.word	0x7fefffff
 80031d8:	08004e91 	.word	0x08004e91
 80031dc:	08004e8d 	.word	0x08004e8d
 80031e0:	08004e99 	.word	0x08004e99
 80031e4:	08004e95 	.word	0x08004e95
 80031e8:	08004e9d 	.word	0x08004e9d
 80031ec:	2301      	movs	r3, #1
 80031ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80031f0:	4659      	mov	r1, fp
 80031f2:	4628      	mov	r0, r5
 80031f4:	47b0      	blx	r6
 80031f6:	3001      	adds	r0, #1
 80031f8:	f43f aecd 	beq.w	8002f96 <_printf_float+0xae>
 80031fc:	f10a 0a01 	add.w	sl, sl, #1
 8003200:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003204:	eba9 0308 	sub.w	r3, r9, r8
 8003208:	4553      	cmp	r3, sl
 800320a:	dcef      	bgt.n	80031ec <_printf_float+0x304>
 800320c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003210:	429a      	cmp	r2, r3
 8003212:	444f      	add	r7, r9
 8003214:	db14      	blt.n	8003240 <_printf_float+0x358>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	07da      	lsls	r2, r3, #31
 800321a:	d411      	bmi.n	8003240 <_printf_float+0x358>
 800321c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800321e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003220:	eba3 0209 	sub.w	r2, r3, r9
 8003224:	eba3 0901 	sub.w	r9, r3, r1
 8003228:	4591      	cmp	r9, r2
 800322a:	bfa8      	it	ge
 800322c:	4691      	movge	r9, r2
 800322e:	f1b9 0f00 	cmp.w	r9, #0
 8003232:	dc0d      	bgt.n	8003250 <_printf_float+0x368>
 8003234:	2700      	movs	r7, #0
 8003236:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800323a:	f104 081a 	add.w	r8, r4, #26
 800323e:	e018      	b.n	8003272 <_printf_float+0x38a>
 8003240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003244:	4659      	mov	r1, fp
 8003246:	4628      	mov	r0, r5
 8003248:	47b0      	blx	r6
 800324a:	3001      	adds	r0, #1
 800324c:	d1e6      	bne.n	800321c <_printf_float+0x334>
 800324e:	e6a2      	b.n	8002f96 <_printf_float+0xae>
 8003250:	464b      	mov	r3, r9
 8003252:	463a      	mov	r2, r7
 8003254:	4659      	mov	r1, fp
 8003256:	4628      	mov	r0, r5
 8003258:	47b0      	blx	r6
 800325a:	3001      	adds	r0, #1
 800325c:	d1ea      	bne.n	8003234 <_printf_float+0x34c>
 800325e:	e69a      	b.n	8002f96 <_printf_float+0xae>
 8003260:	2301      	movs	r3, #1
 8003262:	4642      	mov	r2, r8
 8003264:	4659      	mov	r1, fp
 8003266:	4628      	mov	r0, r5
 8003268:	47b0      	blx	r6
 800326a:	3001      	adds	r0, #1
 800326c:	f43f ae93 	beq.w	8002f96 <_printf_float+0xae>
 8003270:	3701      	adds	r7, #1
 8003272:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	eba3 0309 	sub.w	r3, r3, r9
 800327c:	42bb      	cmp	r3, r7
 800327e:	dcef      	bgt.n	8003260 <_printf_float+0x378>
 8003280:	e74d      	b.n	800311e <_printf_float+0x236>
 8003282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003284:	2a01      	cmp	r2, #1
 8003286:	dc01      	bgt.n	800328c <_printf_float+0x3a4>
 8003288:	07db      	lsls	r3, r3, #31
 800328a:	d538      	bpl.n	80032fe <_printf_float+0x416>
 800328c:	2301      	movs	r3, #1
 800328e:	463a      	mov	r2, r7
 8003290:	4659      	mov	r1, fp
 8003292:	4628      	mov	r0, r5
 8003294:	47b0      	blx	r6
 8003296:	3001      	adds	r0, #1
 8003298:	f43f ae7d 	beq.w	8002f96 <_printf_float+0xae>
 800329c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032a0:	4659      	mov	r1, fp
 80032a2:	4628      	mov	r0, r5
 80032a4:	47b0      	blx	r6
 80032a6:	3001      	adds	r0, #1
 80032a8:	f107 0701 	add.w	r7, r7, #1
 80032ac:	f43f ae73 	beq.w	8002f96 <_printf_float+0xae>
 80032b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80032b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032b6:	2200      	movs	r2, #0
 80032b8:	f103 38ff 	add.w	r8, r3, #4294967295
 80032bc:	2300      	movs	r3, #0
 80032be:	f7fd fb73 	bl	80009a8 <__aeabi_dcmpeq>
 80032c2:	b9c0      	cbnz	r0, 80032f6 <_printf_float+0x40e>
 80032c4:	4643      	mov	r3, r8
 80032c6:	463a      	mov	r2, r7
 80032c8:	4659      	mov	r1, fp
 80032ca:	4628      	mov	r0, r5
 80032cc:	47b0      	blx	r6
 80032ce:	3001      	adds	r0, #1
 80032d0:	d10d      	bne.n	80032ee <_printf_float+0x406>
 80032d2:	e660      	b.n	8002f96 <_printf_float+0xae>
 80032d4:	2301      	movs	r3, #1
 80032d6:	4642      	mov	r2, r8
 80032d8:	4659      	mov	r1, fp
 80032da:	4628      	mov	r0, r5
 80032dc:	47b0      	blx	r6
 80032de:	3001      	adds	r0, #1
 80032e0:	f43f ae59 	beq.w	8002f96 <_printf_float+0xae>
 80032e4:	3701      	adds	r7, #1
 80032e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032e8:	3b01      	subs	r3, #1
 80032ea:	42bb      	cmp	r3, r7
 80032ec:	dcf2      	bgt.n	80032d4 <_printf_float+0x3ec>
 80032ee:	464b      	mov	r3, r9
 80032f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80032f4:	e6e4      	b.n	80030c0 <_printf_float+0x1d8>
 80032f6:	2700      	movs	r7, #0
 80032f8:	f104 081a 	add.w	r8, r4, #26
 80032fc:	e7f3      	b.n	80032e6 <_printf_float+0x3fe>
 80032fe:	2301      	movs	r3, #1
 8003300:	e7e1      	b.n	80032c6 <_printf_float+0x3de>
 8003302:	2301      	movs	r3, #1
 8003304:	4642      	mov	r2, r8
 8003306:	4659      	mov	r1, fp
 8003308:	4628      	mov	r0, r5
 800330a:	47b0      	blx	r6
 800330c:	3001      	adds	r0, #1
 800330e:	f43f ae42 	beq.w	8002f96 <_printf_float+0xae>
 8003312:	3701      	adds	r7, #1
 8003314:	68e3      	ldr	r3, [r4, #12]
 8003316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	42bb      	cmp	r3, r7
 800331c:	dcf1      	bgt.n	8003302 <_printf_float+0x41a>
 800331e:	e702      	b.n	8003126 <_printf_float+0x23e>
 8003320:	2700      	movs	r7, #0
 8003322:	f104 0819 	add.w	r8, r4, #25
 8003326:	e7f5      	b.n	8003314 <_printf_float+0x42c>
 8003328:	2b00      	cmp	r3, #0
 800332a:	f43f ae94 	beq.w	8003056 <_printf_float+0x16e>
 800332e:	f04f 0c00 	mov.w	ip, #0
 8003332:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003336:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800333a:	6022      	str	r2, [r4, #0]
 800333c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003340:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	463a      	mov	r2, r7
 8003348:	464b      	mov	r3, r9
 800334a:	4628      	mov	r0, r5
 800334c:	f7ff fd3a 	bl	8002dc4 <__cvt>
 8003350:	4607      	mov	r7, r0
 8003352:	e64f      	b.n	8002ff4 <_printf_float+0x10c>

08003354 <_printf_common>:
 8003354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003358:	4691      	mov	r9, r2
 800335a:	461f      	mov	r7, r3
 800335c:	688a      	ldr	r2, [r1, #8]
 800335e:	690b      	ldr	r3, [r1, #16]
 8003360:	4606      	mov	r6, r0
 8003362:	4293      	cmp	r3, r2
 8003364:	bfb8      	it	lt
 8003366:	4613      	movlt	r3, r2
 8003368:	f8c9 3000 	str.w	r3, [r9]
 800336c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003370:	460c      	mov	r4, r1
 8003372:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003376:	b112      	cbz	r2, 800337e <_printf_common+0x2a>
 8003378:	3301      	adds	r3, #1
 800337a:	f8c9 3000 	str.w	r3, [r9]
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	0699      	lsls	r1, r3, #26
 8003382:	bf42      	ittt	mi
 8003384:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003388:	3302      	addmi	r3, #2
 800338a:	f8c9 3000 	strmi.w	r3, [r9]
 800338e:	6825      	ldr	r5, [r4, #0]
 8003390:	f015 0506 	ands.w	r5, r5, #6
 8003394:	d107      	bne.n	80033a6 <_printf_common+0x52>
 8003396:	f104 0a19 	add.w	sl, r4, #25
 800339a:	68e3      	ldr	r3, [r4, #12]
 800339c:	f8d9 2000 	ldr.w	r2, [r9]
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	42ab      	cmp	r3, r5
 80033a4:	dc29      	bgt.n	80033fa <_printf_common+0xa6>
 80033a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	3300      	adds	r3, #0
 80033ae:	bf18      	it	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	0692      	lsls	r2, r2, #26
 80033b4:	d42e      	bmi.n	8003414 <_printf_common+0xc0>
 80033b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033ba:	4639      	mov	r1, r7
 80033bc:	4630      	mov	r0, r6
 80033be:	47c0      	blx	r8
 80033c0:	3001      	adds	r0, #1
 80033c2:	d021      	beq.n	8003408 <_printf_common+0xb4>
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	68e5      	ldr	r5, [r4, #12]
 80033c8:	f003 0306 	and.w	r3, r3, #6
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	bf18      	it	ne
 80033d0:	2500      	movne	r5, #0
 80033d2:	f8d9 2000 	ldr.w	r2, [r9]
 80033d6:	f04f 0900 	mov.w	r9, #0
 80033da:	bf08      	it	eq
 80033dc:	1aad      	subeq	r5, r5, r2
 80033de:	68a3      	ldr	r3, [r4, #8]
 80033e0:	6922      	ldr	r2, [r4, #16]
 80033e2:	bf08      	it	eq
 80033e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033e8:	4293      	cmp	r3, r2
 80033ea:	bfc4      	itt	gt
 80033ec:	1a9b      	subgt	r3, r3, r2
 80033ee:	18ed      	addgt	r5, r5, r3
 80033f0:	341a      	adds	r4, #26
 80033f2:	454d      	cmp	r5, r9
 80033f4:	d11a      	bne.n	800342c <_printf_common+0xd8>
 80033f6:	2000      	movs	r0, #0
 80033f8:	e008      	b.n	800340c <_printf_common+0xb8>
 80033fa:	2301      	movs	r3, #1
 80033fc:	4652      	mov	r2, sl
 80033fe:	4639      	mov	r1, r7
 8003400:	4630      	mov	r0, r6
 8003402:	47c0      	blx	r8
 8003404:	3001      	adds	r0, #1
 8003406:	d103      	bne.n	8003410 <_printf_common+0xbc>
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003410:	3501      	adds	r5, #1
 8003412:	e7c2      	b.n	800339a <_printf_common+0x46>
 8003414:	2030      	movs	r0, #48	; 0x30
 8003416:	18e1      	adds	r1, r4, r3
 8003418:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003422:	4422      	add	r2, r4
 8003424:	3302      	adds	r3, #2
 8003426:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800342a:	e7c4      	b.n	80033b6 <_printf_common+0x62>
 800342c:	2301      	movs	r3, #1
 800342e:	4622      	mov	r2, r4
 8003430:	4639      	mov	r1, r7
 8003432:	4630      	mov	r0, r6
 8003434:	47c0      	blx	r8
 8003436:	3001      	adds	r0, #1
 8003438:	d0e6      	beq.n	8003408 <_printf_common+0xb4>
 800343a:	f109 0901 	add.w	r9, r9, #1
 800343e:	e7d8      	b.n	80033f2 <_printf_common+0x9e>

08003440 <_printf_i>:
 8003440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003444:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003448:	460c      	mov	r4, r1
 800344a:	7e09      	ldrb	r1, [r1, #24]
 800344c:	b085      	sub	sp, #20
 800344e:	296e      	cmp	r1, #110	; 0x6e
 8003450:	4617      	mov	r7, r2
 8003452:	4606      	mov	r6, r0
 8003454:	4698      	mov	r8, r3
 8003456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003458:	f000 80b3 	beq.w	80035c2 <_printf_i+0x182>
 800345c:	d822      	bhi.n	80034a4 <_printf_i+0x64>
 800345e:	2963      	cmp	r1, #99	; 0x63
 8003460:	d036      	beq.n	80034d0 <_printf_i+0x90>
 8003462:	d80a      	bhi.n	800347a <_printf_i+0x3a>
 8003464:	2900      	cmp	r1, #0
 8003466:	f000 80b9 	beq.w	80035dc <_printf_i+0x19c>
 800346a:	2958      	cmp	r1, #88	; 0x58
 800346c:	f000 8083 	beq.w	8003576 <_printf_i+0x136>
 8003470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003474:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003478:	e032      	b.n	80034e0 <_printf_i+0xa0>
 800347a:	2964      	cmp	r1, #100	; 0x64
 800347c:	d001      	beq.n	8003482 <_printf_i+0x42>
 800347e:	2969      	cmp	r1, #105	; 0x69
 8003480:	d1f6      	bne.n	8003470 <_printf_i+0x30>
 8003482:	6820      	ldr	r0, [r4, #0]
 8003484:	6813      	ldr	r3, [r2, #0]
 8003486:	0605      	lsls	r5, r0, #24
 8003488:	f103 0104 	add.w	r1, r3, #4
 800348c:	d52a      	bpl.n	80034e4 <_printf_i+0xa4>
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6011      	str	r1, [r2, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	da03      	bge.n	800349e <_printf_i+0x5e>
 8003496:	222d      	movs	r2, #45	; 0x2d
 8003498:	425b      	negs	r3, r3
 800349a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800349e:	486f      	ldr	r0, [pc, #444]	; (800365c <_printf_i+0x21c>)
 80034a0:	220a      	movs	r2, #10
 80034a2:	e039      	b.n	8003518 <_printf_i+0xd8>
 80034a4:	2973      	cmp	r1, #115	; 0x73
 80034a6:	f000 809d 	beq.w	80035e4 <_printf_i+0x1a4>
 80034aa:	d808      	bhi.n	80034be <_printf_i+0x7e>
 80034ac:	296f      	cmp	r1, #111	; 0x6f
 80034ae:	d020      	beq.n	80034f2 <_printf_i+0xb2>
 80034b0:	2970      	cmp	r1, #112	; 0x70
 80034b2:	d1dd      	bne.n	8003470 <_printf_i+0x30>
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	f043 0320 	orr.w	r3, r3, #32
 80034ba:	6023      	str	r3, [r4, #0]
 80034bc:	e003      	b.n	80034c6 <_printf_i+0x86>
 80034be:	2975      	cmp	r1, #117	; 0x75
 80034c0:	d017      	beq.n	80034f2 <_printf_i+0xb2>
 80034c2:	2978      	cmp	r1, #120	; 0x78
 80034c4:	d1d4      	bne.n	8003470 <_printf_i+0x30>
 80034c6:	2378      	movs	r3, #120	; 0x78
 80034c8:	4865      	ldr	r0, [pc, #404]	; (8003660 <_printf_i+0x220>)
 80034ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034ce:	e055      	b.n	800357c <_printf_i+0x13c>
 80034d0:	6813      	ldr	r3, [r2, #0]
 80034d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034d6:	1d19      	adds	r1, r3, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6011      	str	r1, [r2, #0]
 80034dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034e0:	2301      	movs	r3, #1
 80034e2:	e08c      	b.n	80035fe <_printf_i+0x1be>
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034ea:	6011      	str	r1, [r2, #0]
 80034ec:	bf18      	it	ne
 80034ee:	b21b      	sxthne	r3, r3
 80034f0:	e7cf      	b.n	8003492 <_printf_i+0x52>
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	6825      	ldr	r5, [r4, #0]
 80034f6:	1d18      	adds	r0, r3, #4
 80034f8:	6010      	str	r0, [r2, #0]
 80034fa:	0628      	lsls	r0, r5, #24
 80034fc:	d501      	bpl.n	8003502 <_printf_i+0xc2>
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	e002      	b.n	8003508 <_printf_i+0xc8>
 8003502:	0668      	lsls	r0, r5, #25
 8003504:	d5fb      	bpl.n	80034fe <_printf_i+0xbe>
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	296f      	cmp	r1, #111	; 0x6f
 800350a:	bf14      	ite	ne
 800350c:	220a      	movne	r2, #10
 800350e:	2208      	moveq	r2, #8
 8003510:	4852      	ldr	r0, [pc, #328]	; (800365c <_printf_i+0x21c>)
 8003512:	2100      	movs	r1, #0
 8003514:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003518:	6865      	ldr	r5, [r4, #4]
 800351a:	2d00      	cmp	r5, #0
 800351c:	60a5      	str	r5, [r4, #8]
 800351e:	f2c0 8095 	blt.w	800364c <_printf_i+0x20c>
 8003522:	6821      	ldr	r1, [r4, #0]
 8003524:	f021 0104 	bic.w	r1, r1, #4
 8003528:	6021      	str	r1, [r4, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d13d      	bne.n	80035aa <_printf_i+0x16a>
 800352e:	2d00      	cmp	r5, #0
 8003530:	f040 808e 	bne.w	8003650 <_printf_i+0x210>
 8003534:	4665      	mov	r5, ip
 8003536:	2a08      	cmp	r2, #8
 8003538:	d10b      	bne.n	8003552 <_printf_i+0x112>
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	07db      	lsls	r3, r3, #31
 800353e:	d508      	bpl.n	8003552 <_printf_i+0x112>
 8003540:	6923      	ldr	r3, [r4, #16]
 8003542:	6862      	ldr	r2, [r4, #4]
 8003544:	429a      	cmp	r2, r3
 8003546:	bfde      	ittt	le
 8003548:	2330      	movle	r3, #48	; 0x30
 800354a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800354e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003552:	ebac 0305 	sub.w	r3, ip, r5
 8003556:	6123      	str	r3, [r4, #16]
 8003558:	f8cd 8000 	str.w	r8, [sp]
 800355c:	463b      	mov	r3, r7
 800355e:	aa03      	add	r2, sp, #12
 8003560:	4621      	mov	r1, r4
 8003562:	4630      	mov	r0, r6
 8003564:	f7ff fef6 	bl	8003354 <_printf_common>
 8003568:	3001      	adds	r0, #1
 800356a:	d14d      	bne.n	8003608 <_printf_i+0x1c8>
 800356c:	f04f 30ff 	mov.w	r0, #4294967295
 8003570:	b005      	add	sp, #20
 8003572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003576:	4839      	ldr	r0, [pc, #228]	; (800365c <_printf_i+0x21c>)
 8003578:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800357c:	6813      	ldr	r3, [r2, #0]
 800357e:	6821      	ldr	r1, [r4, #0]
 8003580:	1d1d      	adds	r5, r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6015      	str	r5, [r2, #0]
 8003586:	060a      	lsls	r2, r1, #24
 8003588:	d50b      	bpl.n	80035a2 <_printf_i+0x162>
 800358a:	07ca      	lsls	r2, r1, #31
 800358c:	bf44      	itt	mi
 800358e:	f041 0120 	orrmi.w	r1, r1, #32
 8003592:	6021      	strmi	r1, [r4, #0]
 8003594:	b91b      	cbnz	r3, 800359e <_printf_i+0x15e>
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	f022 0220 	bic.w	r2, r2, #32
 800359c:	6022      	str	r2, [r4, #0]
 800359e:	2210      	movs	r2, #16
 80035a0:	e7b7      	b.n	8003512 <_printf_i+0xd2>
 80035a2:	064d      	lsls	r5, r1, #25
 80035a4:	bf48      	it	mi
 80035a6:	b29b      	uxthmi	r3, r3
 80035a8:	e7ef      	b.n	800358a <_printf_i+0x14a>
 80035aa:	4665      	mov	r5, ip
 80035ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80035b0:	fb02 3311 	mls	r3, r2, r1, r3
 80035b4:	5cc3      	ldrb	r3, [r0, r3]
 80035b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035ba:	460b      	mov	r3, r1
 80035bc:	2900      	cmp	r1, #0
 80035be:	d1f5      	bne.n	80035ac <_printf_i+0x16c>
 80035c0:	e7b9      	b.n	8003536 <_printf_i+0xf6>
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	6825      	ldr	r5, [r4, #0]
 80035c6:	1d18      	adds	r0, r3, #4
 80035c8:	6961      	ldr	r1, [r4, #20]
 80035ca:	6010      	str	r0, [r2, #0]
 80035cc:	0628      	lsls	r0, r5, #24
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	d501      	bpl.n	80035d6 <_printf_i+0x196>
 80035d2:	6019      	str	r1, [r3, #0]
 80035d4:	e002      	b.n	80035dc <_printf_i+0x19c>
 80035d6:	066a      	lsls	r2, r5, #25
 80035d8:	d5fb      	bpl.n	80035d2 <_printf_i+0x192>
 80035da:	8019      	strh	r1, [r3, #0]
 80035dc:	2300      	movs	r3, #0
 80035de:	4665      	mov	r5, ip
 80035e0:	6123      	str	r3, [r4, #16]
 80035e2:	e7b9      	b.n	8003558 <_printf_i+0x118>
 80035e4:	6813      	ldr	r3, [r2, #0]
 80035e6:	1d19      	adds	r1, r3, #4
 80035e8:	6011      	str	r1, [r2, #0]
 80035ea:	681d      	ldr	r5, [r3, #0]
 80035ec:	6862      	ldr	r2, [r4, #4]
 80035ee:	2100      	movs	r1, #0
 80035f0:	4628      	mov	r0, r5
 80035f2:	f000 feaf 	bl	8004354 <memchr>
 80035f6:	b108      	cbz	r0, 80035fc <_printf_i+0x1bc>
 80035f8:	1b40      	subs	r0, r0, r5
 80035fa:	6060      	str	r0, [r4, #4]
 80035fc:	6863      	ldr	r3, [r4, #4]
 80035fe:	6123      	str	r3, [r4, #16]
 8003600:	2300      	movs	r3, #0
 8003602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003606:	e7a7      	b.n	8003558 <_printf_i+0x118>
 8003608:	6923      	ldr	r3, [r4, #16]
 800360a:	462a      	mov	r2, r5
 800360c:	4639      	mov	r1, r7
 800360e:	4630      	mov	r0, r6
 8003610:	47c0      	blx	r8
 8003612:	3001      	adds	r0, #1
 8003614:	d0aa      	beq.n	800356c <_printf_i+0x12c>
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	079b      	lsls	r3, r3, #30
 800361a:	d413      	bmi.n	8003644 <_printf_i+0x204>
 800361c:	68e0      	ldr	r0, [r4, #12]
 800361e:	9b03      	ldr	r3, [sp, #12]
 8003620:	4298      	cmp	r0, r3
 8003622:	bfb8      	it	lt
 8003624:	4618      	movlt	r0, r3
 8003626:	e7a3      	b.n	8003570 <_printf_i+0x130>
 8003628:	2301      	movs	r3, #1
 800362a:	464a      	mov	r2, r9
 800362c:	4639      	mov	r1, r7
 800362e:	4630      	mov	r0, r6
 8003630:	47c0      	blx	r8
 8003632:	3001      	adds	r0, #1
 8003634:	d09a      	beq.n	800356c <_printf_i+0x12c>
 8003636:	3501      	adds	r5, #1
 8003638:	68e3      	ldr	r3, [r4, #12]
 800363a:	9a03      	ldr	r2, [sp, #12]
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	42ab      	cmp	r3, r5
 8003640:	dcf2      	bgt.n	8003628 <_printf_i+0x1e8>
 8003642:	e7eb      	b.n	800361c <_printf_i+0x1dc>
 8003644:	2500      	movs	r5, #0
 8003646:	f104 0919 	add.w	r9, r4, #25
 800364a:	e7f5      	b.n	8003638 <_printf_i+0x1f8>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ac      	bne.n	80035aa <_printf_i+0x16a>
 8003650:	7803      	ldrb	r3, [r0, #0]
 8003652:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800365a:	e76c      	b.n	8003536 <_printf_i+0xf6>
 800365c:	08004e9f 	.word	0x08004e9f
 8003660:	08004eb0 	.word	0x08004eb0

08003664 <siprintf>:
 8003664:	b40e      	push	{r1, r2, r3}
 8003666:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800366a:	b500      	push	{lr}
 800366c:	b09c      	sub	sp, #112	; 0x70
 800366e:	ab1d      	add	r3, sp, #116	; 0x74
 8003670:	9002      	str	r0, [sp, #8]
 8003672:	9006      	str	r0, [sp, #24]
 8003674:	9107      	str	r1, [sp, #28]
 8003676:	9104      	str	r1, [sp, #16]
 8003678:	4808      	ldr	r0, [pc, #32]	; (800369c <siprintf+0x38>)
 800367a:	4909      	ldr	r1, [pc, #36]	; (80036a0 <siprintf+0x3c>)
 800367c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003680:	9105      	str	r1, [sp, #20]
 8003682:	6800      	ldr	r0, [r0, #0]
 8003684:	a902      	add	r1, sp, #8
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	f001 fa68 	bl	8004b5c <_svfiprintf_r>
 800368c:	2200      	movs	r2, #0
 800368e:	9b02      	ldr	r3, [sp, #8]
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	b01c      	add	sp, #112	; 0x70
 8003694:	f85d eb04 	ldr.w	lr, [sp], #4
 8003698:	b003      	add	sp, #12
 800369a:	4770      	bx	lr
 800369c:	2000000c 	.word	0x2000000c
 80036a0:	ffff0208 	.word	0xffff0208

080036a4 <quorem>:
 80036a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a8:	6903      	ldr	r3, [r0, #16]
 80036aa:	690c      	ldr	r4, [r1, #16]
 80036ac:	4680      	mov	r8, r0
 80036ae:	42a3      	cmp	r3, r4
 80036b0:	f2c0 8084 	blt.w	80037bc <quorem+0x118>
 80036b4:	3c01      	subs	r4, #1
 80036b6:	f101 0714 	add.w	r7, r1, #20
 80036ba:	f100 0614 	add.w	r6, r0, #20
 80036be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80036c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80036c6:	3501      	adds	r5, #1
 80036c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80036cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80036d0:	eb06 030c 	add.w	r3, r6, ip
 80036d4:	eb07 090c 	add.w	r9, r7, ip
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	b39d      	cbz	r5, 8003744 <quorem+0xa0>
 80036dc:	f04f 0a00 	mov.w	sl, #0
 80036e0:	4638      	mov	r0, r7
 80036e2:	46b6      	mov	lr, r6
 80036e4:	46d3      	mov	fp, sl
 80036e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80036ea:	b293      	uxth	r3, r2
 80036ec:	fb05 a303 	mla	r3, r5, r3, sl
 80036f0:	0c12      	lsrs	r2, r2, #16
 80036f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80036f6:	fb05 a202 	mla	r2, r5, r2, sl
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	ebab 0303 	sub.w	r3, fp, r3
 8003700:	f8de b000 	ldr.w	fp, [lr]
 8003704:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003708:	fa1f fb8b 	uxth.w	fp, fp
 800370c:	445b      	add	r3, fp
 800370e:	fa1f fb82 	uxth.w	fp, r2
 8003712:	f8de 2000 	ldr.w	r2, [lr]
 8003716:	4581      	cmp	r9, r0
 8003718:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800371c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003720:	b29b      	uxth	r3, r3
 8003722:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003726:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800372a:	f84e 3b04 	str.w	r3, [lr], #4
 800372e:	d2da      	bcs.n	80036e6 <quorem+0x42>
 8003730:	f856 300c 	ldr.w	r3, [r6, ip]
 8003734:	b933      	cbnz	r3, 8003744 <quorem+0xa0>
 8003736:	9b01      	ldr	r3, [sp, #4]
 8003738:	3b04      	subs	r3, #4
 800373a:	429e      	cmp	r6, r3
 800373c:	461a      	mov	r2, r3
 800373e:	d331      	bcc.n	80037a4 <quorem+0x100>
 8003740:	f8c8 4010 	str.w	r4, [r8, #16]
 8003744:	4640      	mov	r0, r8
 8003746:	f001 f833 	bl	80047b0 <__mcmp>
 800374a:	2800      	cmp	r0, #0
 800374c:	db26      	blt.n	800379c <quorem+0xf8>
 800374e:	4630      	mov	r0, r6
 8003750:	f04f 0c00 	mov.w	ip, #0
 8003754:	3501      	adds	r5, #1
 8003756:	f857 1b04 	ldr.w	r1, [r7], #4
 800375a:	f8d0 e000 	ldr.w	lr, [r0]
 800375e:	b28b      	uxth	r3, r1
 8003760:	ebac 0303 	sub.w	r3, ip, r3
 8003764:	fa1f f28e 	uxth.w	r2, lr
 8003768:	4413      	add	r3, r2
 800376a:	0c0a      	lsrs	r2, r1, #16
 800376c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003770:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003774:	b29b      	uxth	r3, r3
 8003776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800377a:	45b9      	cmp	r9, r7
 800377c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003780:	f840 3b04 	str.w	r3, [r0], #4
 8003784:	d2e7      	bcs.n	8003756 <quorem+0xb2>
 8003786:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800378a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800378e:	b92a      	cbnz	r2, 800379c <quorem+0xf8>
 8003790:	3b04      	subs	r3, #4
 8003792:	429e      	cmp	r6, r3
 8003794:	461a      	mov	r2, r3
 8003796:	d30b      	bcc.n	80037b0 <quorem+0x10c>
 8003798:	f8c8 4010 	str.w	r4, [r8, #16]
 800379c:	4628      	mov	r0, r5
 800379e:	b003      	add	sp, #12
 80037a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	3b04      	subs	r3, #4
 80037a8:	2a00      	cmp	r2, #0
 80037aa:	d1c9      	bne.n	8003740 <quorem+0x9c>
 80037ac:	3c01      	subs	r4, #1
 80037ae:	e7c4      	b.n	800373a <quorem+0x96>
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	3b04      	subs	r3, #4
 80037b4:	2a00      	cmp	r2, #0
 80037b6:	d1ef      	bne.n	8003798 <quorem+0xf4>
 80037b8:	3c01      	subs	r4, #1
 80037ba:	e7ea      	b.n	8003792 <quorem+0xee>
 80037bc:	2000      	movs	r0, #0
 80037be:	e7ee      	b.n	800379e <quorem+0xfa>

080037c0 <_dtoa_r>:
 80037c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c4:	4616      	mov	r6, r2
 80037c6:	461f      	mov	r7, r3
 80037c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80037ca:	b095      	sub	sp, #84	; 0x54
 80037cc:	4604      	mov	r4, r0
 80037ce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80037d2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80037d6:	b93d      	cbnz	r5, 80037e8 <_dtoa_r+0x28>
 80037d8:	2010      	movs	r0, #16
 80037da:	f000 fdb3 	bl	8004344 <malloc>
 80037de:	6260      	str	r0, [r4, #36]	; 0x24
 80037e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80037e4:	6005      	str	r5, [r0, #0]
 80037e6:	60c5      	str	r5, [r0, #12]
 80037e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037ea:	6819      	ldr	r1, [r3, #0]
 80037ec:	b151      	cbz	r1, 8003804 <_dtoa_r+0x44>
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	2301      	movs	r3, #1
 80037f2:	4093      	lsls	r3, r2
 80037f4:	604a      	str	r2, [r1, #4]
 80037f6:	608b      	str	r3, [r1, #8]
 80037f8:	4620      	mov	r0, r4
 80037fa:	f000 fdf8 	bl	80043ee <_Bfree>
 80037fe:	2200      	movs	r2, #0
 8003800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	1e3b      	subs	r3, r7, #0
 8003806:	bfaf      	iteee	ge
 8003808:	2300      	movge	r3, #0
 800380a:	2201      	movlt	r2, #1
 800380c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003810:	9303      	strlt	r3, [sp, #12]
 8003812:	bfac      	ite	ge
 8003814:	f8c8 3000 	strge.w	r3, [r8]
 8003818:	f8c8 2000 	strlt.w	r2, [r8]
 800381c:	4bae      	ldr	r3, [pc, #696]	; (8003ad8 <_dtoa_r+0x318>)
 800381e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003822:	ea33 0308 	bics.w	r3, r3, r8
 8003826:	d11b      	bne.n	8003860 <_dtoa_r+0xa0>
 8003828:	f242 730f 	movw	r3, #9999	; 0x270f
 800382c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	9b02      	ldr	r3, [sp, #8]
 8003832:	b923      	cbnz	r3, 800383e <_dtoa_r+0x7e>
 8003834:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003838:	2800      	cmp	r0, #0
 800383a:	f000 8545 	beq.w	80042c8 <_dtoa_r+0xb08>
 800383e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003840:	b953      	cbnz	r3, 8003858 <_dtoa_r+0x98>
 8003842:	4ba6      	ldr	r3, [pc, #664]	; (8003adc <_dtoa_r+0x31c>)
 8003844:	e021      	b.n	800388a <_dtoa_r+0xca>
 8003846:	4ba6      	ldr	r3, [pc, #664]	; (8003ae0 <_dtoa_r+0x320>)
 8003848:	9306      	str	r3, [sp, #24]
 800384a:	3308      	adds	r3, #8
 800384c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	9806      	ldr	r0, [sp, #24]
 8003852:	b015      	add	sp, #84	; 0x54
 8003854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003858:	4ba0      	ldr	r3, [pc, #640]	; (8003adc <_dtoa_r+0x31c>)
 800385a:	9306      	str	r3, [sp, #24]
 800385c:	3303      	adds	r3, #3
 800385e:	e7f5      	b.n	800384c <_dtoa_r+0x8c>
 8003860:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003864:	2200      	movs	r2, #0
 8003866:	2300      	movs	r3, #0
 8003868:	4630      	mov	r0, r6
 800386a:	4639      	mov	r1, r7
 800386c:	f7fd f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8003870:	4682      	mov	sl, r0
 8003872:	b160      	cbz	r0, 800388e <_dtoa_r+0xce>
 8003874:	2301      	movs	r3, #1
 8003876:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8520 	beq.w	80042c2 <_dtoa_r+0xb02>
 8003882:	4b98      	ldr	r3, [pc, #608]	; (8003ae4 <_dtoa_r+0x324>)
 8003884:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	3b01      	subs	r3, #1
 800388a:	9306      	str	r3, [sp, #24]
 800388c:	e7e0      	b.n	8003850 <_dtoa_r+0x90>
 800388e:	ab12      	add	r3, sp, #72	; 0x48
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	ab13      	add	r3, sp, #76	; 0x4c
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	4632      	mov	r2, r6
 8003898:	463b      	mov	r3, r7
 800389a:	4620      	mov	r0, r4
 800389c:	f001 f800 	bl	80048a0 <__d2b>
 80038a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80038a4:	4683      	mov	fp, r0
 80038a6:	2d00      	cmp	r5, #0
 80038a8:	d07d      	beq.n	80039a6 <_dtoa_r+0x1e6>
 80038aa:	46b0      	mov	r8, r6
 80038ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80038b0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80038b4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80038b8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80038bc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80038c0:	2200      	movs	r2, #0
 80038c2:	4b89      	ldr	r3, [pc, #548]	; (8003ae8 <_dtoa_r+0x328>)
 80038c4:	4640      	mov	r0, r8
 80038c6:	4649      	mov	r1, r9
 80038c8:	f7fc fc4e 	bl	8000168 <__aeabi_dsub>
 80038cc:	a37c      	add	r3, pc, #496	; (adr r3, 8003ac0 <_dtoa_r+0x300>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f7fc fe01 	bl	80004d8 <__aeabi_dmul>
 80038d6:	a37c      	add	r3, pc, #496	; (adr r3, 8003ac8 <_dtoa_r+0x308>)
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f7fc fc46 	bl	800016c <__adddf3>
 80038e0:	4606      	mov	r6, r0
 80038e2:	4628      	mov	r0, r5
 80038e4:	460f      	mov	r7, r1
 80038e6:	f7fc fd8d 	bl	8000404 <__aeabi_i2d>
 80038ea:	a379      	add	r3, pc, #484	; (adr r3, 8003ad0 <_dtoa_r+0x310>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f7fc fdf2 	bl	80004d8 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4630      	mov	r0, r6
 80038fa:	4639      	mov	r1, r7
 80038fc:	f7fc fc36 	bl	800016c <__adddf3>
 8003900:	4606      	mov	r6, r0
 8003902:	460f      	mov	r7, r1
 8003904:	f7fd f898 	bl	8000a38 <__aeabi_d2iz>
 8003908:	2200      	movs	r2, #0
 800390a:	4682      	mov	sl, r0
 800390c:	2300      	movs	r3, #0
 800390e:	4630      	mov	r0, r6
 8003910:	4639      	mov	r1, r7
 8003912:	f7fd f853 	bl	80009bc <__aeabi_dcmplt>
 8003916:	b148      	cbz	r0, 800392c <_dtoa_r+0x16c>
 8003918:	4650      	mov	r0, sl
 800391a:	f7fc fd73 	bl	8000404 <__aeabi_i2d>
 800391e:	4632      	mov	r2, r6
 8003920:	463b      	mov	r3, r7
 8003922:	f7fd f841 	bl	80009a8 <__aeabi_dcmpeq>
 8003926:	b908      	cbnz	r0, 800392c <_dtoa_r+0x16c>
 8003928:	f10a 3aff 	add.w	sl, sl, #4294967295
 800392c:	f1ba 0f16 	cmp.w	sl, #22
 8003930:	d85a      	bhi.n	80039e8 <_dtoa_r+0x228>
 8003932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003936:	496d      	ldr	r1, [pc, #436]	; (8003aec <_dtoa_r+0x32c>)
 8003938:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800393c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003940:	f7fd f85a 	bl	80009f8 <__aeabi_dcmpgt>
 8003944:	2800      	cmp	r0, #0
 8003946:	d051      	beq.n	80039ec <_dtoa_r+0x22c>
 8003948:	2300      	movs	r3, #0
 800394a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800394e:	930d      	str	r3, [sp, #52]	; 0x34
 8003950:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003952:	1b5d      	subs	r5, r3, r5
 8003954:	1e6b      	subs	r3, r5, #1
 8003956:	9307      	str	r3, [sp, #28]
 8003958:	bf43      	ittte	mi
 800395a:	2300      	movmi	r3, #0
 800395c:	f1c5 0901 	rsbmi	r9, r5, #1
 8003960:	9307      	strmi	r3, [sp, #28]
 8003962:	f04f 0900 	movpl.w	r9, #0
 8003966:	f1ba 0f00 	cmp.w	sl, #0
 800396a:	db41      	blt.n	80039f0 <_dtoa_r+0x230>
 800396c:	9b07      	ldr	r3, [sp, #28]
 800396e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003972:	4453      	add	r3, sl
 8003974:	9307      	str	r3, [sp, #28]
 8003976:	2300      	movs	r3, #0
 8003978:	9308      	str	r3, [sp, #32]
 800397a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800397c:	2b09      	cmp	r3, #9
 800397e:	f200 808f 	bhi.w	8003aa0 <_dtoa_r+0x2e0>
 8003982:	2b05      	cmp	r3, #5
 8003984:	bfc4      	itt	gt
 8003986:	3b04      	subgt	r3, #4
 8003988:	931e      	strgt	r3, [sp, #120]	; 0x78
 800398a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800398c:	bfc8      	it	gt
 800398e:	2500      	movgt	r5, #0
 8003990:	f1a3 0302 	sub.w	r3, r3, #2
 8003994:	bfd8      	it	le
 8003996:	2501      	movle	r5, #1
 8003998:	2b03      	cmp	r3, #3
 800399a:	f200 808d 	bhi.w	8003ab8 <_dtoa_r+0x2f8>
 800399e:	e8df f003 	tbb	[pc, r3]
 80039a2:	7d7b      	.short	0x7d7b
 80039a4:	6f2f      	.short	0x6f2f
 80039a6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80039aa:	441d      	add	r5, r3
 80039ac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80039b0:	2820      	cmp	r0, #32
 80039b2:	dd13      	ble.n	80039dc <_dtoa_r+0x21c>
 80039b4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80039b8:	9b02      	ldr	r3, [sp, #8]
 80039ba:	fa08 f800 	lsl.w	r8, r8, r0
 80039be:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80039c2:	fa23 f000 	lsr.w	r0, r3, r0
 80039c6:	ea48 0000 	orr.w	r0, r8, r0
 80039ca:	f7fc fd0b 	bl	80003e4 <__aeabi_ui2d>
 80039ce:	2301      	movs	r3, #1
 80039d0:	4680      	mov	r8, r0
 80039d2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80039d6:	3d01      	subs	r5, #1
 80039d8:	9310      	str	r3, [sp, #64]	; 0x40
 80039da:	e771      	b.n	80038c0 <_dtoa_r+0x100>
 80039dc:	9b02      	ldr	r3, [sp, #8]
 80039de:	f1c0 0020 	rsb	r0, r0, #32
 80039e2:	fa03 f000 	lsl.w	r0, r3, r0
 80039e6:	e7f0      	b.n	80039ca <_dtoa_r+0x20a>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e7b0      	b.n	800394e <_dtoa_r+0x18e>
 80039ec:	900d      	str	r0, [sp, #52]	; 0x34
 80039ee:	e7af      	b.n	8003950 <_dtoa_r+0x190>
 80039f0:	f1ca 0300 	rsb	r3, sl, #0
 80039f4:	9308      	str	r3, [sp, #32]
 80039f6:	2300      	movs	r3, #0
 80039f8:	eba9 090a 	sub.w	r9, r9, sl
 80039fc:	930c      	str	r3, [sp, #48]	; 0x30
 80039fe:	e7bc      	b.n	800397a <_dtoa_r+0x1ba>
 8003a00:	2301      	movs	r3, #1
 8003a02:	9309      	str	r3, [sp, #36]	; 0x24
 8003a04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	dd74      	ble.n	8003af4 <_dtoa_r+0x334>
 8003a0a:	4698      	mov	r8, r3
 8003a0c:	9304      	str	r3, [sp, #16]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003a12:	6072      	str	r2, [r6, #4]
 8003a14:	2204      	movs	r2, #4
 8003a16:	f102 0014 	add.w	r0, r2, #20
 8003a1a:	4298      	cmp	r0, r3
 8003a1c:	6871      	ldr	r1, [r6, #4]
 8003a1e:	d96e      	bls.n	8003afe <_dtoa_r+0x33e>
 8003a20:	4620      	mov	r0, r4
 8003a22:	f000 fcb0 	bl	8004386 <_Balloc>
 8003a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a28:	6030      	str	r0, [r6, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f1b8 0f0e 	cmp.w	r8, #14
 8003a30:	9306      	str	r3, [sp, #24]
 8003a32:	f200 80ed 	bhi.w	8003c10 <_dtoa_r+0x450>
 8003a36:	2d00      	cmp	r5, #0
 8003a38:	f000 80ea 	beq.w	8003c10 <_dtoa_r+0x450>
 8003a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a40:	f1ba 0f00 	cmp.w	sl, #0
 8003a44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003a48:	dd77      	ble.n	8003b3a <_dtoa_r+0x37a>
 8003a4a:	4a28      	ldr	r2, [pc, #160]	; (8003aec <_dtoa_r+0x32c>)
 8003a4c:	f00a 030f 	and.w	r3, sl, #15
 8003a50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003a54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003a58:	06f0      	lsls	r0, r6, #27
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003a62:	d568      	bpl.n	8003b36 <_dtoa_r+0x376>
 8003a64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <_dtoa_r+0x330>)
 8003a6a:	2503      	movs	r5, #3
 8003a6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a70:	f7fc fe5c 	bl	800072c <__aeabi_ddiv>
 8003a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a78:	f006 060f 	and.w	r6, r6, #15
 8003a7c:	4f1c      	ldr	r7, [pc, #112]	; (8003af0 <_dtoa_r+0x330>)
 8003a7e:	e04f      	b.n	8003b20 <_dtoa_r+0x360>
 8003a80:	2301      	movs	r3, #1
 8003a82:	9309      	str	r3, [sp, #36]	; 0x24
 8003a84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a86:	4453      	add	r3, sl
 8003a88:	f103 0801 	add.w	r8, r3, #1
 8003a8c:	9304      	str	r3, [sp, #16]
 8003a8e:	4643      	mov	r3, r8
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bfb8      	it	lt
 8003a94:	2301      	movlt	r3, #1
 8003a96:	e7ba      	b.n	8003a0e <_dtoa_r+0x24e>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e7b2      	b.n	8003a02 <_dtoa_r+0x242>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e7f0      	b.n	8003a82 <_dtoa_r+0x2c2>
 8003aa0:	2501      	movs	r5, #1
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	9509      	str	r5, [sp, #36]	; 0x24
 8003aa6:	931e      	str	r3, [sp, #120]	; 0x78
 8003aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aac:	2200      	movs	r2, #0
 8003aae:	9304      	str	r3, [sp, #16]
 8003ab0:	4698      	mov	r8, r3
 8003ab2:	2312      	movs	r3, #18
 8003ab4:	921f      	str	r2, [sp, #124]	; 0x7c
 8003ab6:	e7aa      	b.n	8003a0e <_dtoa_r+0x24e>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	9309      	str	r3, [sp, #36]	; 0x24
 8003abc:	e7f4      	b.n	8003aa8 <_dtoa_r+0x2e8>
 8003abe:	bf00      	nop
 8003ac0:	636f4361 	.word	0x636f4361
 8003ac4:	3fd287a7 	.word	0x3fd287a7
 8003ac8:	8b60c8b3 	.word	0x8b60c8b3
 8003acc:	3fc68a28 	.word	0x3fc68a28
 8003ad0:	509f79fb 	.word	0x509f79fb
 8003ad4:	3fd34413 	.word	0x3fd34413
 8003ad8:	7ff00000 	.word	0x7ff00000
 8003adc:	08004eca 	.word	0x08004eca
 8003ae0:	08004ec1 	.word	0x08004ec1
 8003ae4:	08004e9e 	.word	0x08004e9e
 8003ae8:	3ff80000 	.word	0x3ff80000
 8003aec:	08004ef8 	.word	0x08004ef8
 8003af0:	08004ed0 	.word	0x08004ed0
 8003af4:	2301      	movs	r3, #1
 8003af6:	9304      	str	r3, [sp, #16]
 8003af8:	4698      	mov	r8, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	e7da      	b.n	8003ab4 <_dtoa_r+0x2f4>
 8003afe:	3101      	adds	r1, #1
 8003b00:	6071      	str	r1, [r6, #4]
 8003b02:	0052      	lsls	r2, r2, #1
 8003b04:	e787      	b.n	8003a16 <_dtoa_r+0x256>
 8003b06:	07f1      	lsls	r1, r6, #31
 8003b08:	d508      	bpl.n	8003b1c <_dtoa_r+0x35c>
 8003b0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b12:	f7fc fce1 	bl	80004d8 <__aeabi_dmul>
 8003b16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003b1a:	3501      	adds	r5, #1
 8003b1c:	1076      	asrs	r6, r6, #1
 8003b1e:	3708      	adds	r7, #8
 8003b20:	2e00      	cmp	r6, #0
 8003b22:	d1f0      	bne.n	8003b06 <_dtoa_r+0x346>
 8003b24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b2c:	f7fc fdfe 	bl	800072c <__aeabi_ddiv>
 8003b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b34:	e01b      	b.n	8003b6e <_dtoa_r+0x3ae>
 8003b36:	2502      	movs	r5, #2
 8003b38:	e7a0      	b.n	8003a7c <_dtoa_r+0x2bc>
 8003b3a:	f000 80a4 	beq.w	8003c86 <_dtoa_r+0x4c6>
 8003b3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003b42:	f1ca 0600 	rsb	r6, sl, #0
 8003b46:	4ba0      	ldr	r3, [pc, #640]	; (8003dc8 <_dtoa_r+0x608>)
 8003b48:	f006 020f 	and.w	r2, r6, #15
 8003b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f7fc fcc0 	bl	80004d8 <__aeabi_dmul>
 8003b58:	2502      	movs	r5, #2
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b60:	4f9a      	ldr	r7, [pc, #616]	; (8003dcc <_dtoa_r+0x60c>)
 8003b62:	1136      	asrs	r6, r6, #4
 8003b64:	2e00      	cmp	r6, #0
 8003b66:	f040 8083 	bne.w	8003c70 <_dtoa_r+0x4b0>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e0      	bne.n	8003b30 <_dtoa_r+0x370>
 8003b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 808a 	beq.w	8003c8a <_dtoa_r+0x4ca>
 8003b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003b7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b82:	2200      	movs	r2, #0
 8003b84:	4b92      	ldr	r3, [pc, #584]	; (8003dd0 <_dtoa_r+0x610>)
 8003b86:	f7fc ff19 	bl	80009bc <__aeabi_dcmplt>
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	d07d      	beq.n	8003c8a <_dtoa_r+0x4ca>
 8003b8e:	f1b8 0f00 	cmp.w	r8, #0
 8003b92:	d07a      	beq.n	8003c8a <_dtoa_r+0x4ca>
 8003b94:	9b04      	ldr	r3, [sp, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	dd36      	ble.n	8003c08 <_dtoa_r+0x448>
 8003b9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	4b8c      	ldr	r3, [pc, #560]	; (8003dd4 <_dtoa_r+0x614>)
 8003ba2:	f7fc fc99 	bl	80004d8 <__aeabi_dmul>
 8003ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003baa:	9e04      	ldr	r6, [sp, #16]
 8003bac:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003bb0:	3501      	adds	r5, #1
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f7fc fc26 	bl	8000404 <__aeabi_i2d>
 8003bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bbc:	f7fc fc8c 	bl	80004d8 <__aeabi_dmul>
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	4b85      	ldr	r3, [pc, #532]	; (8003dd8 <_dtoa_r+0x618>)
 8003bc4:	f7fc fad2 	bl	800016c <__adddf3>
 8003bc8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003bcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003bd0:	950b      	str	r5, [sp, #44]	; 0x2c
 8003bd2:	2e00      	cmp	r6, #0
 8003bd4:	d15c      	bne.n	8003c90 <_dtoa_r+0x4d0>
 8003bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	4b7f      	ldr	r3, [pc, #508]	; (8003ddc <_dtoa_r+0x61c>)
 8003bde:	f7fc fac3 	bl	8000168 <__aeabi_dsub>
 8003be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003be4:	462b      	mov	r3, r5
 8003be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bea:	f7fc ff05 	bl	80009f8 <__aeabi_dcmpgt>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	f040 8281 	bne.w	80040f6 <_dtoa_r+0x936>
 8003bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bfa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003bfe:	f7fc fedd 	bl	80009bc <__aeabi_dcmplt>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	f040 8275 	bne.w	80040f2 <_dtoa_r+0x932>
 8003c08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003c0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f2c0 814b 	blt.w	8003eae <_dtoa_r+0x6ee>
 8003c18:	f1ba 0f0e 	cmp.w	sl, #14
 8003c1c:	f300 8147 	bgt.w	8003eae <_dtoa_r+0x6ee>
 8003c20:	4b69      	ldr	r3, [pc, #420]	; (8003dc8 <_dtoa_r+0x608>)
 8003c22:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f280 80d7 	bge.w	8003de4 <_dtoa_r+0x624>
 8003c36:	f1b8 0f00 	cmp.w	r8, #0
 8003c3a:	f300 80d3 	bgt.w	8003de4 <_dtoa_r+0x624>
 8003c3e:	f040 8257 	bne.w	80040f0 <_dtoa_r+0x930>
 8003c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c46:	2200      	movs	r2, #0
 8003c48:	4b64      	ldr	r3, [pc, #400]	; (8003ddc <_dtoa_r+0x61c>)
 8003c4a:	f7fc fc45 	bl	80004d8 <__aeabi_dmul>
 8003c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c52:	f7fc fec7 	bl	80009e4 <__aeabi_dcmpge>
 8003c56:	4646      	mov	r6, r8
 8003c58:	4647      	mov	r7, r8
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	f040 822d 	bne.w	80040ba <_dtoa_r+0x8fa>
 8003c60:	9b06      	ldr	r3, [sp, #24]
 8003c62:	9a06      	ldr	r2, [sp, #24]
 8003c64:	1c5d      	adds	r5, r3, #1
 8003c66:	2331      	movs	r3, #49	; 0x31
 8003c68:	f10a 0a01 	add.w	sl, sl, #1
 8003c6c:	7013      	strb	r3, [r2, #0]
 8003c6e:	e228      	b.n	80040c2 <_dtoa_r+0x902>
 8003c70:	07f2      	lsls	r2, r6, #31
 8003c72:	d505      	bpl.n	8003c80 <_dtoa_r+0x4c0>
 8003c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c78:	f7fc fc2e 	bl	80004d8 <__aeabi_dmul>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	3501      	adds	r5, #1
 8003c80:	1076      	asrs	r6, r6, #1
 8003c82:	3708      	adds	r7, #8
 8003c84:	e76e      	b.n	8003b64 <_dtoa_r+0x3a4>
 8003c86:	2502      	movs	r5, #2
 8003c88:	e771      	b.n	8003b6e <_dtoa_r+0x3ae>
 8003c8a:	4657      	mov	r7, sl
 8003c8c:	4646      	mov	r6, r8
 8003c8e:	e790      	b.n	8003bb2 <_dtoa_r+0x3f2>
 8003c90:	4b4d      	ldr	r3, [pc, #308]	; (8003dc8 <_dtoa_r+0x608>)
 8003c92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003c96:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d048      	beq.n	8003d32 <_dtoa_r+0x572>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	494e      	ldr	r1, [pc, #312]	; (8003de0 <_dtoa_r+0x620>)
 8003ca8:	f7fc fd40 	bl	800072c <__aeabi_ddiv>
 8003cac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003cb0:	f7fc fa5a 	bl	8000168 <__aeabi_dsub>
 8003cb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003cb8:	9d06      	ldr	r5, [sp, #24]
 8003cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cbe:	f7fc febb 	bl	8000a38 <__aeabi_d2iz>
 8003cc2:	9011      	str	r0, [sp, #68]	; 0x44
 8003cc4:	f7fc fb9e 	bl	8000404 <__aeabi_i2d>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cd0:	f7fc fa4a 	bl	8000168 <__aeabi_dsub>
 8003cd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cda:	3330      	adds	r3, #48	; 0x30
 8003cdc:	f805 3b01 	strb.w	r3, [r5], #1
 8003ce0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ce4:	f7fc fe6a 	bl	80009bc <__aeabi_dcmplt>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d163      	bne.n	8003db4 <_dtoa_r+0x5f4>
 8003cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	4937      	ldr	r1, [pc, #220]	; (8003dd0 <_dtoa_r+0x610>)
 8003cf4:	f7fc fa38 	bl	8000168 <__aeabi_dsub>
 8003cf8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003cfc:	f7fc fe5e 	bl	80009bc <__aeabi_dcmplt>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	f040 80b5 	bne.w	8003e70 <_dtoa_r+0x6b0>
 8003d06:	9b06      	ldr	r3, [sp, #24]
 8003d08:	1aeb      	subs	r3, r5, r3
 8003d0a:	429e      	cmp	r6, r3
 8003d0c:	f77f af7c 	ble.w	8003c08 <_dtoa_r+0x448>
 8003d10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d14:	2200      	movs	r2, #0
 8003d16:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <_dtoa_r+0x614>)
 8003d18:	f7fc fbde 	bl	80004d8 <__aeabi_dmul>
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d26:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <_dtoa_r+0x614>)
 8003d28:	f7fc fbd6 	bl	80004d8 <__aeabi_dmul>
 8003d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d30:	e7c3      	b.n	8003cba <_dtoa_r+0x4fa>
 8003d32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d36:	f7fc fbcf 	bl	80004d8 <__aeabi_dmul>
 8003d3a:	9b06      	ldr	r3, [sp, #24]
 8003d3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003d40:	199d      	adds	r5, r3, r6
 8003d42:	461e      	mov	r6, r3
 8003d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d48:	f7fc fe76 	bl	8000a38 <__aeabi_d2iz>
 8003d4c:	9011      	str	r0, [sp, #68]	; 0x44
 8003d4e:	f7fc fb59 	bl	8000404 <__aeabi_i2d>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d5a:	f7fc fa05 	bl	8000168 <__aeabi_dsub>
 8003d5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d64:	3330      	adds	r3, #48	; 0x30
 8003d66:	f806 3b01 	strb.w	r3, [r6], #1
 8003d6a:	42ae      	cmp	r6, r5
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	d124      	bne.n	8003dbc <_dtoa_r+0x5fc>
 8003d72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d76:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <_dtoa_r+0x620>)
 8003d78:	f7fc f9f8 	bl	800016c <__adddf3>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d84:	f7fc fe38 	bl	80009f8 <__aeabi_dcmpgt>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d171      	bne.n	8003e70 <_dtoa_r+0x6b0>
 8003d8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d90:	2000      	movs	r0, #0
 8003d92:	4913      	ldr	r1, [pc, #76]	; (8003de0 <_dtoa_r+0x620>)
 8003d94:	f7fc f9e8 	bl	8000168 <__aeabi_dsub>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003da0:	f7fc fe0c 	bl	80009bc <__aeabi_dcmplt>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	f43f af2f 	beq.w	8003c08 <_dtoa_r+0x448>
 8003daa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003dae:	1e6a      	subs	r2, r5, #1
 8003db0:	2b30      	cmp	r3, #48	; 0x30
 8003db2:	d001      	beq.n	8003db8 <_dtoa_r+0x5f8>
 8003db4:	46ba      	mov	sl, r7
 8003db6:	e04a      	b.n	8003e4e <_dtoa_r+0x68e>
 8003db8:	4615      	mov	r5, r2
 8003dba:	e7f6      	b.n	8003daa <_dtoa_r+0x5ea>
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <_dtoa_r+0x614>)
 8003dbe:	f7fc fb8b 	bl	80004d8 <__aeabi_dmul>
 8003dc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dc6:	e7bd      	b.n	8003d44 <_dtoa_r+0x584>
 8003dc8:	08004ef8 	.word	0x08004ef8
 8003dcc:	08004ed0 	.word	0x08004ed0
 8003dd0:	3ff00000 	.word	0x3ff00000
 8003dd4:	40240000 	.word	0x40240000
 8003dd8:	401c0000 	.word	0x401c0000
 8003ddc:	40140000 	.word	0x40140000
 8003de0:	3fe00000 	.word	0x3fe00000
 8003de4:	9d06      	ldr	r5, [sp, #24]
 8003de6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dee:	4630      	mov	r0, r6
 8003df0:	4639      	mov	r1, r7
 8003df2:	f7fc fc9b 	bl	800072c <__aeabi_ddiv>
 8003df6:	f7fc fe1f 	bl	8000a38 <__aeabi_d2iz>
 8003dfa:	4681      	mov	r9, r0
 8003dfc:	f7fc fb02 	bl	8000404 <__aeabi_i2d>
 8003e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e04:	f7fc fb68 	bl	80004d8 <__aeabi_dmul>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	4639      	mov	r1, r7
 8003e10:	f7fc f9aa 	bl	8000168 <__aeabi_dsub>
 8003e14:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003e18:	f805 6b01 	strb.w	r6, [r5], #1
 8003e1c:	9e06      	ldr	r6, [sp, #24]
 8003e1e:	4602      	mov	r2, r0
 8003e20:	1bae      	subs	r6, r5, r6
 8003e22:	45b0      	cmp	r8, r6
 8003e24:	460b      	mov	r3, r1
 8003e26:	d135      	bne.n	8003e94 <_dtoa_r+0x6d4>
 8003e28:	f7fc f9a0 	bl	800016c <__adddf3>
 8003e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e30:	4606      	mov	r6, r0
 8003e32:	460f      	mov	r7, r1
 8003e34:	f7fc fde0 	bl	80009f8 <__aeabi_dcmpgt>
 8003e38:	b9c8      	cbnz	r0, 8003e6e <_dtoa_r+0x6ae>
 8003e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e3e:	4630      	mov	r0, r6
 8003e40:	4639      	mov	r1, r7
 8003e42:	f7fc fdb1 	bl	80009a8 <__aeabi_dcmpeq>
 8003e46:	b110      	cbz	r0, 8003e4e <_dtoa_r+0x68e>
 8003e48:	f019 0f01 	tst.w	r9, #1
 8003e4c:	d10f      	bne.n	8003e6e <_dtoa_r+0x6ae>
 8003e4e:	4659      	mov	r1, fp
 8003e50:	4620      	mov	r0, r4
 8003e52:	f000 facc 	bl	80043ee <_Bfree>
 8003e56:	2300      	movs	r3, #0
 8003e58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e5a:	702b      	strb	r3, [r5, #0]
 8003e5c:	f10a 0301 	add.w	r3, sl, #1
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f43f acf3 	beq.w	8003850 <_dtoa_r+0x90>
 8003e6a:	601d      	str	r5, [r3, #0]
 8003e6c:	e4f0      	b.n	8003850 <_dtoa_r+0x90>
 8003e6e:	4657      	mov	r7, sl
 8003e70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003e74:	1e6b      	subs	r3, r5, #1
 8003e76:	2a39      	cmp	r2, #57	; 0x39
 8003e78:	d106      	bne.n	8003e88 <_dtoa_r+0x6c8>
 8003e7a:	9a06      	ldr	r2, [sp, #24]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d107      	bne.n	8003e90 <_dtoa_r+0x6d0>
 8003e80:	2330      	movs	r3, #48	; 0x30
 8003e82:	7013      	strb	r3, [r2, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	3701      	adds	r7, #1
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	3201      	adds	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e791      	b.n	8003db4 <_dtoa_r+0x5f4>
 8003e90:	461d      	mov	r5, r3
 8003e92:	e7ed      	b.n	8003e70 <_dtoa_r+0x6b0>
 8003e94:	2200      	movs	r2, #0
 8003e96:	4b99      	ldr	r3, [pc, #612]	; (80040fc <_dtoa_r+0x93c>)
 8003e98:	f7fc fb1e 	bl	80004d8 <__aeabi_dmul>
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	4606      	mov	r6, r0
 8003ea2:	460f      	mov	r7, r1
 8003ea4:	f7fc fd80 	bl	80009a8 <__aeabi_dcmpeq>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d09e      	beq.n	8003dea <_dtoa_r+0x62a>
 8003eac:	e7cf      	b.n	8003e4e <_dtoa_r+0x68e>
 8003eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eb0:	2a00      	cmp	r2, #0
 8003eb2:	f000 8088 	beq.w	8003fc6 <_dtoa_r+0x806>
 8003eb6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003eb8:	2a01      	cmp	r2, #1
 8003eba:	dc6d      	bgt.n	8003f98 <_dtoa_r+0x7d8>
 8003ebc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d066      	beq.n	8003f90 <_dtoa_r+0x7d0>
 8003ec2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003ec6:	464d      	mov	r5, r9
 8003ec8:	9e08      	ldr	r6, [sp, #32]
 8003eca:	9a07      	ldr	r2, [sp, #28]
 8003ecc:	2101      	movs	r1, #1
 8003ece:	441a      	add	r2, r3
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	4499      	add	r9, r3
 8003ed4:	9207      	str	r2, [sp, #28]
 8003ed6:	f000 fb2a 	bl	800452e <__i2b>
 8003eda:	4607      	mov	r7, r0
 8003edc:	2d00      	cmp	r5, #0
 8003ede:	dd0b      	ble.n	8003ef8 <_dtoa_r+0x738>
 8003ee0:	9b07      	ldr	r3, [sp, #28]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	dd08      	ble.n	8003ef8 <_dtoa_r+0x738>
 8003ee6:	42ab      	cmp	r3, r5
 8003ee8:	bfa8      	it	ge
 8003eea:	462b      	movge	r3, r5
 8003eec:	9a07      	ldr	r2, [sp, #28]
 8003eee:	eba9 0903 	sub.w	r9, r9, r3
 8003ef2:	1aed      	subs	r5, r5, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	9307      	str	r3, [sp, #28]
 8003ef8:	9b08      	ldr	r3, [sp, #32]
 8003efa:	b1eb      	cbz	r3, 8003f38 <_dtoa_r+0x778>
 8003efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d065      	beq.n	8003fce <_dtoa_r+0x80e>
 8003f02:	b18e      	cbz	r6, 8003f28 <_dtoa_r+0x768>
 8003f04:	4639      	mov	r1, r7
 8003f06:	4632      	mov	r2, r6
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f000 fbaf 	bl	800466c <__pow5mult>
 8003f0e:	465a      	mov	r2, fp
 8003f10:	4601      	mov	r1, r0
 8003f12:	4607      	mov	r7, r0
 8003f14:	4620      	mov	r0, r4
 8003f16:	f000 fb13 	bl	8004540 <__multiply>
 8003f1a:	4659      	mov	r1, fp
 8003f1c:	900a      	str	r0, [sp, #40]	; 0x28
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f000 fa65 	bl	80043ee <_Bfree>
 8003f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f26:	469b      	mov	fp, r3
 8003f28:	9b08      	ldr	r3, [sp, #32]
 8003f2a:	1b9a      	subs	r2, r3, r6
 8003f2c:	d004      	beq.n	8003f38 <_dtoa_r+0x778>
 8003f2e:	4659      	mov	r1, fp
 8003f30:	4620      	mov	r0, r4
 8003f32:	f000 fb9b 	bl	800466c <__pow5mult>
 8003f36:	4683      	mov	fp, r0
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f000 faf7 	bl	800452e <__i2b>
 8003f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f42:	4606      	mov	r6, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 81c6 	beq.w	80042d6 <_dtoa_r+0xb16>
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4601      	mov	r1, r0
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f000 fb8c 	bl	800466c <__pow5mult>
 8003f54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f56:	4606      	mov	r6, r0
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	dc3e      	bgt.n	8003fda <_dtoa_r+0x81a>
 8003f5c:	9b02      	ldr	r3, [sp, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d137      	bne.n	8003fd2 <_dtoa_r+0x812>
 8003f62:	9b03      	ldr	r3, [sp, #12]
 8003f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d134      	bne.n	8003fd6 <_dtoa_r+0x816>
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f72:	0d1b      	lsrs	r3, r3, #20
 8003f74:	051b      	lsls	r3, r3, #20
 8003f76:	b12b      	cbz	r3, 8003f84 <_dtoa_r+0x7c4>
 8003f78:	9b07      	ldr	r3, [sp, #28]
 8003f7a:	f109 0901 	add.w	r9, r9, #1
 8003f7e:	3301      	adds	r3, #1
 8003f80:	9307      	str	r3, [sp, #28]
 8003f82:	2301      	movs	r3, #1
 8003f84:	9308      	str	r3, [sp, #32]
 8003f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d128      	bne.n	8003fde <_dtoa_r+0x81e>
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	e02e      	b.n	8003fee <_dtoa_r+0x82e>
 8003f90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003f96:	e796      	b.n	8003ec6 <_dtoa_r+0x706>
 8003f98:	9b08      	ldr	r3, [sp, #32]
 8003f9a:	f108 36ff 	add.w	r6, r8, #4294967295
 8003f9e:	42b3      	cmp	r3, r6
 8003fa0:	bfb7      	itett	lt
 8003fa2:	9b08      	ldrlt	r3, [sp, #32]
 8003fa4:	1b9e      	subge	r6, r3, r6
 8003fa6:	1af2      	sublt	r2, r6, r3
 8003fa8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003faa:	bfbf      	itttt	lt
 8003fac:	9608      	strlt	r6, [sp, #32]
 8003fae:	189b      	addlt	r3, r3, r2
 8003fb0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003fb2:	2600      	movlt	r6, #0
 8003fb4:	f1b8 0f00 	cmp.w	r8, #0
 8003fb8:	bfb9      	ittee	lt
 8003fba:	eba9 0508 	sublt.w	r5, r9, r8
 8003fbe:	2300      	movlt	r3, #0
 8003fc0:	464d      	movge	r5, r9
 8003fc2:	4643      	movge	r3, r8
 8003fc4:	e781      	b.n	8003eca <_dtoa_r+0x70a>
 8003fc6:	9e08      	ldr	r6, [sp, #32]
 8003fc8:	464d      	mov	r5, r9
 8003fca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003fcc:	e786      	b.n	8003edc <_dtoa_r+0x71c>
 8003fce:	9a08      	ldr	r2, [sp, #32]
 8003fd0:	e7ad      	b.n	8003f2e <_dtoa_r+0x76e>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e7d6      	b.n	8003f84 <_dtoa_r+0x7c4>
 8003fd6:	9b02      	ldr	r3, [sp, #8]
 8003fd8:	e7d4      	b.n	8003f84 <_dtoa_r+0x7c4>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9308      	str	r3, [sp, #32]
 8003fde:	6933      	ldr	r3, [r6, #16]
 8003fe0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003fe4:	6918      	ldr	r0, [r3, #16]
 8003fe6:	f000 fa54 	bl	8004492 <__hi0bits>
 8003fea:	f1c0 0020 	rsb	r0, r0, #32
 8003fee:	9b07      	ldr	r3, [sp, #28]
 8003ff0:	4418      	add	r0, r3
 8003ff2:	f010 001f 	ands.w	r0, r0, #31
 8003ff6:	d047      	beq.n	8004088 <_dtoa_r+0x8c8>
 8003ff8:	f1c0 0320 	rsb	r3, r0, #32
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	dd3b      	ble.n	8004078 <_dtoa_r+0x8b8>
 8004000:	9b07      	ldr	r3, [sp, #28]
 8004002:	f1c0 001c 	rsb	r0, r0, #28
 8004006:	4481      	add	r9, r0
 8004008:	4405      	add	r5, r0
 800400a:	4403      	add	r3, r0
 800400c:	9307      	str	r3, [sp, #28]
 800400e:	f1b9 0f00 	cmp.w	r9, #0
 8004012:	dd05      	ble.n	8004020 <_dtoa_r+0x860>
 8004014:	4659      	mov	r1, fp
 8004016:	464a      	mov	r2, r9
 8004018:	4620      	mov	r0, r4
 800401a:	f000 fb75 	bl	8004708 <__lshift>
 800401e:	4683      	mov	fp, r0
 8004020:	9b07      	ldr	r3, [sp, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	dd05      	ble.n	8004032 <_dtoa_r+0x872>
 8004026:	4631      	mov	r1, r6
 8004028:	461a      	mov	r2, r3
 800402a:	4620      	mov	r0, r4
 800402c:	f000 fb6c 	bl	8004708 <__lshift>
 8004030:	4606      	mov	r6, r0
 8004032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004034:	b353      	cbz	r3, 800408c <_dtoa_r+0x8cc>
 8004036:	4631      	mov	r1, r6
 8004038:	4658      	mov	r0, fp
 800403a:	f000 fbb9 	bl	80047b0 <__mcmp>
 800403e:	2800      	cmp	r0, #0
 8004040:	da24      	bge.n	800408c <_dtoa_r+0x8cc>
 8004042:	2300      	movs	r3, #0
 8004044:	4659      	mov	r1, fp
 8004046:	220a      	movs	r2, #10
 8004048:	4620      	mov	r0, r4
 800404a:	f000 f9e7 	bl	800441c <__multadd>
 800404e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004050:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004054:	4683      	mov	fp, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8144 	beq.w	80042e4 <_dtoa_r+0xb24>
 800405c:	2300      	movs	r3, #0
 800405e:	4639      	mov	r1, r7
 8004060:	220a      	movs	r2, #10
 8004062:	4620      	mov	r0, r4
 8004064:	f000 f9da 	bl	800441c <__multadd>
 8004068:	9b04      	ldr	r3, [sp, #16]
 800406a:	4607      	mov	r7, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	dc4d      	bgt.n	800410c <_dtoa_r+0x94c>
 8004070:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004072:	2b02      	cmp	r3, #2
 8004074:	dd4a      	ble.n	800410c <_dtoa_r+0x94c>
 8004076:	e011      	b.n	800409c <_dtoa_r+0x8dc>
 8004078:	d0c9      	beq.n	800400e <_dtoa_r+0x84e>
 800407a:	9a07      	ldr	r2, [sp, #28]
 800407c:	331c      	adds	r3, #28
 800407e:	441a      	add	r2, r3
 8004080:	4499      	add	r9, r3
 8004082:	441d      	add	r5, r3
 8004084:	4613      	mov	r3, r2
 8004086:	e7c1      	b.n	800400c <_dtoa_r+0x84c>
 8004088:	4603      	mov	r3, r0
 800408a:	e7f6      	b.n	800407a <_dtoa_r+0x8ba>
 800408c:	f1b8 0f00 	cmp.w	r8, #0
 8004090:	dc36      	bgt.n	8004100 <_dtoa_r+0x940>
 8004092:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004094:	2b02      	cmp	r3, #2
 8004096:	dd33      	ble.n	8004100 <_dtoa_r+0x940>
 8004098:	f8cd 8010 	str.w	r8, [sp, #16]
 800409c:	9b04      	ldr	r3, [sp, #16]
 800409e:	b963      	cbnz	r3, 80040ba <_dtoa_r+0x8fa>
 80040a0:	4631      	mov	r1, r6
 80040a2:	2205      	movs	r2, #5
 80040a4:	4620      	mov	r0, r4
 80040a6:	f000 f9b9 	bl	800441c <__multadd>
 80040aa:	4601      	mov	r1, r0
 80040ac:	4606      	mov	r6, r0
 80040ae:	4658      	mov	r0, fp
 80040b0:	f000 fb7e 	bl	80047b0 <__mcmp>
 80040b4:	2800      	cmp	r0, #0
 80040b6:	f73f add3 	bgt.w	8003c60 <_dtoa_r+0x4a0>
 80040ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80040bc:	9d06      	ldr	r5, [sp, #24]
 80040be:	ea6f 0a03 	mvn.w	sl, r3
 80040c2:	f04f 0900 	mov.w	r9, #0
 80040c6:	4631      	mov	r1, r6
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 f990 	bl	80043ee <_Bfree>
 80040ce:	2f00      	cmp	r7, #0
 80040d0:	f43f aebd 	beq.w	8003e4e <_dtoa_r+0x68e>
 80040d4:	f1b9 0f00 	cmp.w	r9, #0
 80040d8:	d005      	beq.n	80040e6 <_dtoa_r+0x926>
 80040da:	45b9      	cmp	r9, r7
 80040dc:	d003      	beq.n	80040e6 <_dtoa_r+0x926>
 80040de:	4649      	mov	r1, r9
 80040e0:	4620      	mov	r0, r4
 80040e2:	f000 f984 	bl	80043ee <_Bfree>
 80040e6:	4639      	mov	r1, r7
 80040e8:	4620      	mov	r0, r4
 80040ea:	f000 f980 	bl	80043ee <_Bfree>
 80040ee:	e6ae      	b.n	8003e4e <_dtoa_r+0x68e>
 80040f0:	2600      	movs	r6, #0
 80040f2:	4637      	mov	r7, r6
 80040f4:	e7e1      	b.n	80040ba <_dtoa_r+0x8fa>
 80040f6:	46ba      	mov	sl, r7
 80040f8:	4637      	mov	r7, r6
 80040fa:	e5b1      	b.n	8003c60 <_dtoa_r+0x4a0>
 80040fc:	40240000 	.word	0x40240000
 8004100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004102:	f8cd 8010 	str.w	r8, [sp, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 80f3 	beq.w	80042f2 <_dtoa_r+0xb32>
 800410c:	2d00      	cmp	r5, #0
 800410e:	dd05      	ble.n	800411c <_dtoa_r+0x95c>
 8004110:	4639      	mov	r1, r7
 8004112:	462a      	mov	r2, r5
 8004114:	4620      	mov	r0, r4
 8004116:	f000 faf7 	bl	8004708 <__lshift>
 800411a:	4607      	mov	r7, r0
 800411c:	9b08      	ldr	r3, [sp, #32]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d04c      	beq.n	80041bc <_dtoa_r+0x9fc>
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4620      	mov	r0, r4
 8004126:	f000 f92e 	bl	8004386 <_Balloc>
 800412a:	4605      	mov	r5, r0
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	f107 010c 	add.w	r1, r7, #12
 8004132:	3202      	adds	r2, #2
 8004134:	0092      	lsls	r2, r2, #2
 8004136:	300c      	adds	r0, #12
 8004138:	f000 f91a 	bl	8004370 <memcpy>
 800413c:	2201      	movs	r2, #1
 800413e:	4629      	mov	r1, r5
 8004140:	4620      	mov	r0, r4
 8004142:	f000 fae1 	bl	8004708 <__lshift>
 8004146:	46b9      	mov	r9, r7
 8004148:	4607      	mov	r7, r0
 800414a:	9b06      	ldr	r3, [sp, #24]
 800414c:	9307      	str	r3, [sp, #28]
 800414e:	9b02      	ldr	r3, [sp, #8]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	9308      	str	r3, [sp, #32]
 8004156:	4631      	mov	r1, r6
 8004158:	4658      	mov	r0, fp
 800415a:	f7ff faa3 	bl	80036a4 <quorem>
 800415e:	4649      	mov	r1, r9
 8004160:	4605      	mov	r5, r0
 8004162:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004166:	4658      	mov	r0, fp
 8004168:	f000 fb22 	bl	80047b0 <__mcmp>
 800416c:	463a      	mov	r2, r7
 800416e:	9002      	str	r0, [sp, #8]
 8004170:	4631      	mov	r1, r6
 8004172:	4620      	mov	r0, r4
 8004174:	f000 fb36 	bl	80047e4 <__mdiff>
 8004178:	68c3      	ldr	r3, [r0, #12]
 800417a:	4602      	mov	r2, r0
 800417c:	bb03      	cbnz	r3, 80041c0 <_dtoa_r+0xa00>
 800417e:	4601      	mov	r1, r0
 8004180:	9009      	str	r0, [sp, #36]	; 0x24
 8004182:	4658      	mov	r0, fp
 8004184:	f000 fb14 	bl	80047b0 <__mcmp>
 8004188:	4603      	mov	r3, r0
 800418a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800418c:	4611      	mov	r1, r2
 800418e:	4620      	mov	r0, r4
 8004190:	9309      	str	r3, [sp, #36]	; 0x24
 8004192:	f000 f92c 	bl	80043ee <_Bfree>
 8004196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004198:	b9a3      	cbnz	r3, 80041c4 <_dtoa_r+0xa04>
 800419a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800419c:	b992      	cbnz	r2, 80041c4 <_dtoa_r+0xa04>
 800419e:	9a08      	ldr	r2, [sp, #32]
 80041a0:	b982      	cbnz	r2, 80041c4 <_dtoa_r+0xa04>
 80041a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80041a6:	d029      	beq.n	80041fc <_dtoa_r+0xa3c>
 80041a8:	9b02      	ldr	r3, [sp, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	dd01      	ble.n	80041b2 <_dtoa_r+0x9f2>
 80041ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80041b2:	9b07      	ldr	r3, [sp, #28]
 80041b4:	1c5d      	adds	r5, r3, #1
 80041b6:	f883 8000 	strb.w	r8, [r3]
 80041ba:	e784      	b.n	80040c6 <_dtoa_r+0x906>
 80041bc:	4638      	mov	r0, r7
 80041be:	e7c2      	b.n	8004146 <_dtoa_r+0x986>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e7e3      	b.n	800418c <_dtoa_r+0x9cc>
 80041c4:	9a02      	ldr	r2, [sp, #8]
 80041c6:	2a00      	cmp	r2, #0
 80041c8:	db04      	blt.n	80041d4 <_dtoa_r+0xa14>
 80041ca:	d123      	bne.n	8004214 <_dtoa_r+0xa54>
 80041cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80041ce:	bb0a      	cbnz	r2, 8004214 <_dtoa_r+0xa54>
 80041d0:	9a08      	ldr	r2, [sp, #32]
 80041d2:	b9fa      	cbnz	r2, 8004214 <_dtoa_r+0xa54>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	ddec      	ble.n	80041b2 <_dtoa_r+0x9f2>
 80041d8:	4659      	mov	r1, fp
 80041da:	2201      	movs	r2, #1
 80041dc:	4620      	mov	r0, r4
 80041de:	f000 fa93 	bl	8004708 <__lshift>
 80041e2:	4631      	mov	r1, r6
 80041e4:	4683      	mov	fp, r0
 80041e6:	f000 fae3 	bl	80047b0 <__mcmp>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	dc03      	bgt.n	80041f6 <_dtoa_r+0xa36>
 80041ee:	d1e0      	bne.n	80041b2 <_dtoa_r+0x9f2>
 80041f0:	f018 0f01 	tst.w	r8, #1
 80041f4:	d0dd      	beq.n	80041b2 <_dtoa_r+0x9f2>
 80041f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80041fa:	d1d8      	bne.n	80041ae <_dtoa_r+0x9ee>
 80041fc:	9b07      	ldr	r3, [sp, #28]
 80041fe:	9a07      	ldr	r2, [sp, #28]
 8004200:	1c5d      	adds	r5, r3, #1
 8004202:	2339      	movs	r3, #57	; 0x39
 8004204:	7013      	strb	r3, [r2, #0]
 8004206:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800420a:	1e6a      	subs	r2, r5, #1
 800420c:	2b39      	cmp	r3, #57	; 0x39
 800420e:	d04d      	beq.n	80042ac <_dtoa_r+0xaec>
 8004210:	3301      	adds	r3, #1
 8004212:	e052      	b.n	80042ba <_dtoa_r+0xafa>
 8004214:	9a07      	ldr	r2, [sp, #28]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f102 0501 	add.w	r5, r2, #1
 800421c:	dd06      	ble.n	800422c <_dtoa_r+0xa6c>
 800421e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004222:	d0eb      	beq.n	80041fc <_dtoa_r+0xa3c>
 8004224:	f108 0801 	add.w	r8, r8, #1
 8004228:	9b07      	ldr	r3, [sp, #28]
 800422a:	e7c4      	b.n	80041b6 <_dtoa_r+0x9f6>
 800422c:	9b06      	ldr	r3, [sp, #24]
 800422e:	9a04      	ldr	r2, [sp, #16]
 8004230:	1aeb      	subs	r3, r5, r3
 8004232:	4293      	cmp	r3, r2
 8004234:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004238:	d021      	beq.n	800427e <_dtoa_r+0xabe>
 800423a:	4659      	mov	r1, fp
 800423c:	2300      	movs	r3, #0
 800423e:	220a      	movs	r2, #10
 8004240:	4620      	mov	r0, r4
 8004242:	f000 f8eb 	bl	800441c <__multadd>
 8004246:	45b9      	cmp	r9, r7
 8004248:	4683      	mov	fp, r0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	f04f 020a 	mov.w	r2, #10
 8004252:	4649      	mov	r1, r9
 8004254:	4620      	mov	r0, r4
 8004256:	d105      	bne.n	8004264 <_dtoa_r+0xaa4>
 8004258:	f000 f8e0 	bl	800441c <__multadd>
 800425c:	4681      	mov	r9, r0
 800425e:	4607      	mov	r7, r0
 8004260:	9507      	str	r5, [sp, #28]
 8004262:	e778      	b.n	8004156 <_dtoa_r+0x996>
 8004264:	f000 f8da 	bl	800441c <__multadd>
 8004268:	4639      	mov	r1, r7
 800426a:	4681      	mov	r9, r0
 800426c:	2300      	movs	r3, #0
 800426e:	220a      	movs	r2, #10
 8004270:	4620      	mov	r0, r4
 8004272:	f000 f8d3 	bl	800441c <__multadd>
 8004276:	4607      	mov	r7, r0
 8004278:	e7f2      	b.n	8004260 <_dtoa_r+0xaa0>
 800427a:	f04f 0900 	mov.w	r9, #0
 800427e:	4659      	mov	r1, fp
 8004280:	2201      	movs	r2, #1
 8004282:	4620      	mov	r0, r4
 8004284:	f000 fa40 	bl	8004708 <__lshift>
 8004288:	4631      	mov	r1, r6
 800428a:	4683      	mov	fp, r0
 800428c:	f000 fa90 	bl	80047b0 <__mcmp>
 8004290:	2800      	cmp	r0, #0
 8004292:	dcb8      	bgt.n	8004206 <_dtoa_r+0xa46>
 8004294:	d102      	bne.n	800429c <_dtoa_r+0xadc>
 8004296:	f018 0f01 	tst.w	r8, #1
 800429a:	d1b4      	bne.n	8004206 <_dtoa_r+0xa46>
 800429c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042a0:	1e6a      	subs	r2, r5, #1
 80042a2:	2b30      	cmp	r3, #48	; 0x30
 80042a4:	f47f af0f 	bne.w	80040c6 <_dtoa_r+0x906>
 80042a8:	4615      	mov	r5, r2
 80042aa:	e7f7      	b.n	800429c <_dtoa_r+0xadc>
 80042ac:	9b06      	ldr	r3, [sp, #24]
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d105      	bne.n	80042be <_dtoa_r+0xafe>
 80042b2:	2331      	movs	r3, #49	; 0x31
 80042b4:	9a06      	ldr	r2, [sp, #24]
 80042b6:	f10a 0a01 	add.w	sl, sl, #1
 80042ba:	7013      	strb	r3, [r2, #0]
 80042bc:	e703      	b.n	80040c6 <_dtoa_r+0x906>
 80042be:	4615      	mov	r5, r2
 80042c0:	e7a1      	b.n	8004206 <_dtoa_r+0xa46>
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <_dtoa_r+0xb60>)
 80042c4:	f7ff bae1 	b.w	800388a <_dtoa_r+0xca>
 80042c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f47f aabb 	bne.w	8003846 <_dtoa_r+0x86>
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <_dtoa_r+0xb64>)
 80042d2:	f7ff bada 	b.w	800388a <_dtoa_r+0xca>
 80042d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042d8:	2b01      	cmp	r3, #1
 80042da:	f77f ae3f 	ble.w	8003f5c <_dtoa_r+0x79c>
 80042de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042e0:	9308      	str	r3, [sp, #32]
 80042e2:	e653      	b.n	8003f8c <_dtoa_r+0x7cc>
 80042e4:	9b04      	ldr	r3, [sp, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	dc03      	bgt.n	80042f2 <_dtoa_r+0xb32>
 80042ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	f73f aed5 	bgt.w	800409c <_dtoa_r+0x8dc>
 80042f2:	9d06      	ldr	r5, [sp, #24]
 80042f4:	4631      	mov	r1, r6
 80042f6:	4658      	mov	r0, fp
 80042f8:	f7ff f9d4 	bl	80036a4 <quorem>
 80042fc:	9b06      	ldr	r3, [sp, #24]
 80042fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004302:	f805 8b01 	strb.w	r8, [r5], #1
 8004306:	9a04      	ldr	r2, [sp, #16]
 8004308:	1aeb      	subs	r3, r5, r3
 800430a:	429a      	cmp	r2, r3
 800430c:	ddb5      	ble.n	800427a <_dtoa_r+0xaba>
 800430e:	4659      	mov	r1, fp
 8004310:	2300      	movs	r3, #0
 8004312:	220a      	movs	r2, #10
 8004314:	4620      	mov	r0, r4
 8004316:	f000 f881 	bl	800441c <__multadd>
 800431a:	4683      	mov	fp, r0
 800431c:	e7ea      	b.n	80042f4 <_dtoa_r+0xb34>
 800431e:	bf00      	nop
 8004320:	08004e9d 	.word	0x08004e9d
 8004324:	08004ec1 	.word	0x08004ec1

08004328 <_localeconv_r>:
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <_localeconv_r+0x14>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a18      	ldr	r0, [r3, #32]
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <_localeconv_r+0x18>)
 8004330:	2800      	cmp	r0, #0
 8004332:	bf08      	it	eq
 8004334:	4618      	moveq	r0, r3
 8004336:	30f0      	adds	r0, #240	; 0xf0
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	2000000c 	.word	0x2000000c
 8004340:	20000070 	.word	0x20000070

08004344 <malloc>:
 8004344:	4b02      	ldr	r3, [pc, #8]	; (8004350 <malloc+0xc>)
 8004346:	4601      	mov	r1, r0
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	f000 bb53 	b.w	80049f4 <_malloc_r>
 800434e:	bf00      	nop
 8004350:	2000000c 	.word	0x2000000c

08004354 <memchr>:
 8004354:	b510      	push	{r4, lr}
 8004356:	b2c9      	uxtb	r1, r1
 8004358:	4402      	add	r2, r0
 800435a:	4290      	cmp	r0, r2
 800435c:	4603      	mov	r3, r0
 800435e:	d101      	bne.n	8004364 <memchr+0x10>
 8004360:	2300      	movs	r3, #0
 8004362:	e003      	b.n	800436c <memchr+0x18>
 8004364:	781c      	ldrb	r4, [r3, #0]
 8004366:	3001      	adds	r0, #1
 8004368:	428c      	cmp	r4, r1
 800436a:	d1f6      	bne.n	800435a <memchr+0x6>
 800436c:	4618      	mov	r0, r3
 800436e:	bd10      	pop	{r4, pc}

08004370 <memcpy>:
 8004370:	b510      	push	{r4, lr}
 8004372:	1e43      	subs	r3, r0, #1
 8004374:	440a      	add	r2, r1
 8004376:	4291      	cmp	r1, r2
 8004378:	d100      	bne.n	800437c <memcpy+0xc>
 800437a:	bd10      	pop	{r4, pc}
 800437c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004380:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004384:	e7f7      	b.n	8004376 <memcpy+0x6>

08004386 <_Balloc>:
 8004386:	b570      	push	{r4, r5, r6, lr}
 8004388:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800438a:	4604      	mov	r4, r0
 800438c:	460e      	mov	r6, r1
 800438e:	b93d      	cbnz	r5, 80043a0 <_Balloc+0x1a>
 8004390:	2010      	movs	r0, #16
 8004392:	f7ff ffd7 	bl	8004344 <malloc>
 8004396:	6260      	str	r0, [r4, #36]	; 0x24
 8004398:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800439c:	6005      	str	r5, [r0, #0]
 800439e:	60c5      	str	r5, [r0, #12]
 80043a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80043a2:	68eb      	ldr	r3, [r5, #12]
 80043a4:	b183      	cbz	r3, 80043c8 <_Balloc+0x42>
 80043a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80043ae:	b9b8      	cbnz	r0, 80043e0 <_Balloc+0x5a>
 80043b0:	2101      	movs	r1, #1
 80043b2:	fa01 f506 	lsl.w	r5, r1, r6
 80043b6:	1d6a      	adds	r2, r5, #5
 80043b8:	0092      	lsls	r2, r2, #2
 80043ba:	4620      	mov	r0, r4
 80043bc:	f000 fabf 	bl	800493e <_calloc_r>
 80043c0:	b160      	cbz	r0, 80043dc <_Balloc+0x56>
 80043c2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80043c6:	e00e      	b.n	80043e6 <_Balloc+0x60>
 80043c8:	2221      	movs	r2, #33	; 0x21
 80043ca:	2104      	movs	r1, #4
 80043cc:	4620      	mov	r0, r4
 80043ce:	f000 fab6 	bl	800493e <_calloc_r>
 80043d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d4:	60e8      	str	r0, [r5, #12]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e4      	bne.n	80043a6 <_Balloc+0x20>
 80043dc:	2000      	movs	r0, #0
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	6802      	ldr	r2, [r0, #0]
 80043e2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80043e6:	2300      	movs	r3, #0
 80043e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80043ec:	e7f7      	b.n	80043de <_Balloc+0x58>

080043ee <_Bfree>:
 80043ee:	b570      	push	{r4, r5, r6, lr}
 80043f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80043f2:	4606      	mov	r6, r0
 80043f4:	460d      	mov	r5, r1
 80043f6:	b93c      	cbnz	r4, 8004408 <_Bfree+0x1a>
 80043f8:	2010      	movs	r0, #16
 80043fa:	f7ff ffa3 	bl	8004344 <malloc>
 80043fe:	6270      	str	r0, [r6, #36]	; 0x24
 8004400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004404:	6004      	str	r4, [r0, #0]
 8004406:	60c4      	str	r4, [r0, #12]
 8004408:	b13d      	cbz	r5, 800441a <_Bfree+0x2c>
 800440a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800440c:	686a      	ldr	r2, [r5, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004414:	6029      	str	r1, [r5, #0]
 8004416:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800441a:	bd70      	pop	{r4, r5, r6, pc}

0800441c <__multadd>:
 800441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004420:	461f      	mov	r7, r3
 8004422:	4606      	mov	r6, r0
 8004424:	460c      	mov	r4, r1
 8004426:	2300      	movs	r3, #0
 8004428:	690d      	ldr	r5, [r1, #16]
 800442a:	f101 0c14 	add.w	ip, r1, #20
 800442e:	f8dc 0000 	ldr.w	r0, [ip]
 8004432:	3301      	adds	r3, #1
 8004434:	b281      	uxth	r1, r0
 8004436:	fb02 7101 	mla	r1, r2, r1, r7
 800443a:	0c00      	lsrs	r0, r0, #16
 800443c:	0c0f      	lsrs	r7, r1, #16
 800443e:	fb02 7000 	mla	r0, r2, r0, r7
 8004442:	b289      	uxth	r1, r1
 8004444:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004448:	429d      	cmp	r5, r3
 800444a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800444e:	f84c 1b04 	str.w	r1, [ip], #4
 8004452:	dcec      	bgt.n	800442e <__multadd+0x12>
 8004454:	b1d7      	cbz	r7, 800448c <__multadd+0x70>
 8004456:	68a3      	ldr	r3, [r4, #8]
 8004458:	42ab      	cmp	r3, r5
 800445a:	dc12      	bgt.n	8004482 <__multadd+0x66>
 800445c:	6861      	ldr	r1, [r4, #4]
 800445e:	4630      	mov	r0, r6
 8004460:	3101      	adds	r1, #1
 8004462:	f7ff ff90 	bl	8004386 <_Balloc>
 8004466:	4680      	mov	r8, r0
 8004468:	6922      	ldr	r2, [r4, #16]
 800446a:	f104 010c 	add.w	r1, r4, #12
 800446e:	3202      	adds	r2, #2
 8004470:	0092      	lsls	r2, r2, #2
 8004472:	300c      	adds	r0, #12
 8004474:	f7ff ff7c 	bl	8004370 <memcpy>
 8004478:	4621      	mov	r1, r4
 800447a:	4630      	mov	r0, r6
 800447c:	f7ff ffb7 	bl	80043ee <_Bfree>
 8004480:	4644      	mov	r4, r8
 8004482:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004486:	3501      	adds	r5, #1
 8004488:	615f      	str	r7, [r3, #20]
 800448a:	6125      	str	r5, [r4, #16]
 800448c:	4620      	mov	r0, r4
 800448e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004492 <__hi0bits>:
 8004492:	0c02      	lsrs	r2, r0, #16
 8004494:	0412      	lsls	r2, r2, #16
 8004496:	4603      	mov	r3, r0
 8004498:	b9b2      	cbnz	r2, 80044c8 <__hi0bits+0x36>
 800449a:	0403      	lsls	r3, r0, #16
 800449c:	2010      	movs	r0, #16
 800449e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80044a2:	bf04      	itt	eq
 80044a4:	021b      	lsleq	r3, r3, #8
 80044a6:	3008      	addeq	r0, #8
 80044a8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80044ac:	bf04      	itt	eq
 80044ae:	011b      	lsleq	r3, r3, #4
 80044b0:	3004      	addeq	r0, #4
 80044b2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80044b6:	bf04      	itt	eq
 80044b8:	009b      	lsleq	r3, r3, #2
 80044ba:	3002      	addeq	r0, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	db06      	blt.n	80044ce <__hi0bits+0x3c>
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	d503      	bpl.n	80044cc <__hi0bits+0x3a>
 80044c4:	3001      	adds	r0, #1
 80044c6:	4770      	bx	lr
 80044c8:	2000      	movs	r0, #0
 80044ca:	e7e8      	b.n	800449e <__hi0bits+0xc>
 80044cc:	2020      	movs	r0, #32
 80044ce:	4770      	bx	lr

080044d0 <__lo0bits>:
 80044d0:	6803      	ldr	r3, [r0, #0]
 80044d2:	4601      	mov	r1, r0
 80044d4:	f013 0207 	ands.w	r2, r3, #7
 80044d8:	d00b      	beq.n	80044f2 <__lo0bits+0x22>
 80044da:	07da      	lsls	r2, r3, #31
 80044dc:	d423      	bmi.n	8004526 <__lo0bits+0x56>
 80044de:	0798      	lsls	r0, r3, #30
 80044e0:	bf49      	itett	mi
 80044e2:	085b      	lsrmi	r3, r3, #1
 80044e4:	089b      	lsrpl	r3, r3, #2
 80044e6:	2001      	movmi	r0, #1
 80044e8:	600b      	strmi	r3, [r1, #0]
 80044ea:	bf5c      	itt	pl
 80044ec:	600b      	strpl	r3, [r1, #0]
 80044ee:	2002      	movpl	r0, #2
 80044f0:	4770      	bx	lr
 80044f2:	b298      	uxth	r0, r3
 80044f4:	b9a8      	cbnz	r0, 8004522 <__lo0bits+0x52>
 80044f6:	2010      	movs	r0, #16
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80044fe:	bf04      	itt	eq
 8004500:	0a1b      	lsreq	r3, r3, #8
 8004502:	3008      	addeq	r0, #8
 8004504:	071a      	lsls	r2, r3, #28
 8004506:	bf04      	itt	eq
 8004508:	091b      	lsreq	r3, r3, #4
 800450a:	3004      	addeq	r0, #4
 800450c:	079a      	lsls	r2, r3, #30
 800450e:	bf04      	itt	eq
 8004510:	089b      	lsreq	r3, r3, #2
 8004512:	3002      	addeq	r0, #2
 8004514:	07da      	lsls	r2, r3, #31
 8004516:	d402      	bmi.n	800451e <__lo0bits+0x4e>
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	d006      	beq.n	800452a <__lo0bits+0x5a>
 800451c:	3001      	adds	r0, #1
 800451e:	600b      	str	r3, [r1, #0]
 8004520:	4770      	bx	lr
 8004522:	4610      	mov	r0, r2
 8004524:	e7e9      	b.n	80044fa <__lo0bits+0x2a>
 8004526:	2000      	movs	r0, #0
 8004528:	4770      	bx	lr
 800452a:	2020      	movs	r0, #32
 800452c:	4770      	bx	lr

0800452e <__i2b>:
 800452e:	b510      	push	{r4, lr}
 8004530:	460c      	mov	r4, r1
 8004532:	2101      	movs	r1, #1
 8004534:	f7ff ff27 	bl	8004386 <_Balloc>
 8004538:	2201      	movs	r2, #1
 800453a:	6144      	str	r4, [r0, #20]
 800453c:	6102      	str	r2, [r0, #16]
 800453e:	bd10      	pop	{r4, pc}

08004540 <__multiply>:
 8004540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004544:	4614      	mov	r4, r2
 8004546:	690a      	ldr	r2, [r1, #16]
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	4688      	mov	r8, r1
 800454c:	429a      	cmp	r2, r3
 800454e:	bfbe      	ittt	lt
 8004550:	460b      	movlt	r3, r1
 8004552:	46a0      	movlt	r8, r4
 8004554:	461c      	movlt	r4, r3
 8004556:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800455a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800455e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004562:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004566:	eb07 0609 	add.w	r6, r7, r9
 800456a:	42b3      	cmp	r3, r6
 800456c:	bfb8      	it	lt
 800456e:	3101      	addlt	r1, #1
 8004570:	f7ff ff09 	bl	8004386 <_Balloc>
 8004574:	f100 0514 	add.w	r5, r0, #20
 8004578:	462b      	mov	r3, r5
 800457a:	2200      	movs	r2, #0
 800457c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004580:	4573      	cmp	r3, lr
 8004582:	d316      	bcc.n	80045b2 <__multiply+0x72>
 8004584:	f104 0214 	add.w	r2, r4, #20
 8004588:	f108 0114 	add.w	r1, r8, #20
 800458c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004590:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	9b00      	ldr	r3, [sp, #0]
 8004598:	9201      	str	r2, [sp, #4]
 800459a:	4293      	cmp	r3, r2
 800459c:	d80c      	bhi.n	80045b8 <__multiply+0x78>
 800459e:	2e00      	cmp	r6, #0
 80045a0:	dd03      	ble.n	80045aa <__multiply+0x6a>
 80045a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d05d      	beq.n	8004666 <__multiply+0x126>
 80045aa:	6106      	str	r6, [r0, #16]
 80045ac:	b003      	add	sp, #12
 80045ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b2:	f843 2b04 	str.w	r2, [r3], #4
 80045b6:	e7e3      	b.n	8004580 <__multiply+0x40>
 80045b8:	f8b2 b000 	ldrh.w	fp, [r2]
 80045bc:	f1bb 0f00 	cmp.w	fp, #0
 80045c0:	d023      	beq.n	800460a <__multiply+0xca>
 80045c2:	4689      	mov	r9, r1
 80045c4:	46ac      	mov	ip, r5
 80045c6:	f04f 0800 	mov.w	r8, #0
 80045ca:	f859 4b04 	ldr.w	r4, [r9], #4
 80045ce:	f8dc a000 	ldr.w	sl, [ip]
 80045d2:	b2a3      	uxth	r3, r4
 80045d4:	fa1f fa8a 	uxth.w	sl, sl
 80045d8:	fb0b a303 	mla	r3, fp, r3, sl
 80045dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80045e0:	f8dc 4000 	ldr.w	r4, [ip]
 80045e4:	4443      	add	r3, r8
 80045e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80045ea:	fb0b 840a 	mla	r4, fp, sl, r8
 80045ee:	46e2      	mov	sl, ip
 80045f0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80045fa:	454f      	cmp	r7, r9
 80045fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004600:	f84a 3b04 	str.w	r3, [sl], #4
 8004604:	d82b      	bhi.n	800465e <__multiply+0x11e>
 8004606:	f8cc 8004 	str.w	r8, [ip, #4]
 800460a:	9b01      	ldr	r3, [sp, #4]
 800460c:	3204      	adds	r2, #4
 800460e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004612:	f1ba 0f00 	cmp.w	sl, #0
 8004616:	d020      	beq.n	800465a <__multiply+0x11a>
 8004618:	4689      	mov	r9, r1
 800461a:	46a8      	mov	r8, r5
 800461c:	f04f 0b00 	mov.w	fp, #0
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	f8b9 c000 	ldrh.w	ip, [r9]
 8004626:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800462a:	b29b      	uxth	r3, r3
 800462c:	fb0a 440c 	mla	r4, sl, ip, r4
 8004630:	46c4      	mov	ip, r8
 8004632:	445c      	add	r4, fp
 8004634:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004638:	f84c 3b04 	str.w	r3, [ip], #4
 800463c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004640:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	fb0a b303 	mla	r3, sl, r3, fp
 800464a:	454f      	cmp	r7, r9
 800464c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004650:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004654:	d805      	bhi.n	8004662 <__multiply+0x122>
 8004656:	f8c8 3004 	str.w	r3, [r8, #4]
 800465a:	3504      	adds	r5, #4
 800465c:	e79b      	b.n	8004596 <__multiply+0x56>
 800465e:	46d4      	mov	ip, sl
 8004660:	e7b3      	b.n	80045ca <__multiply+0x8a>
 8004662:	46e0      	mov	r8, ip
 8004664:	e7dd      	b.n	8004622 <__multiply+0xe2>
 8004666:	3e01      	subs	r6, #1
 8004668:	e799      	b.n	800459e <__multiply+0x5e>
	...

0800466c <__pow5mult>:
 800466c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004670:	4615      	mov	r5, r2
 8004672:	f012 0203 	ands.w	r2, r2, #3
 8004676:	4606      	mov	r6, r0
 8004678:	460f      	mov	r7, r1
 800467a:	d007      	beq.n	800468c <__pow5mult+0x20>
 800467c:	4c21      	ldr	r4, [pc, #132]	; (8004704 <__pow5mult+0x98>)
 800467e:	3a01      	subs	r2, #1
 8004680:	2300      	movs	r3, #0
 8004682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004686:	f7ff fec9 	bl	800441c <__multadd>
 800468a:	4607      	mov	r7, r0
 800468c:	10ad      	asrs	r5, r5, #2
 800468e:	d035      	beq.n	80046fc <__pow5mult+0x90>
 8004690:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004692:	b93c      	cbnz	r4, 80046a4 <__pow5mult+0x38>
 8004694:	2010      	movs	r0, #16
 8004696:	f7ff fe55 	bl	8004344 <malloc>
 800469a:	6270      	str	r0, [r6, #36]	; 0x24
 800469c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80046a0:	6004      	str	r4, [r0, #0]
 80046a2:	60c4      	str	r4, [r0, #12]
 80046a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80046a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80046ac:	b94c      	cbnz	r4, 80046c2 <__pow5mult+0x56>
 80046ae:	f240 2171 	movw	r1, #625	; 0x271
 80046b2:	4630      	mov	r0, r6
 80046b4:	f7ff ff3b 	bl	800452e <__i2b>
 80046b8:	2300      	movs	r3, #0
 80046ba:	4604      	mov	r4, r0
 80046bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80046c0:	6003      	str	r3, [r0, #0]
 80046c2:	f04f 0800 	mov.w	r8, #0
 80046c6:	07eb      	lsls	r3, r5, #31
 80046c8:	d50a      	bpl.n	80046e0 <__pow5mult+0x74>
 80046ca:	4639      	mov	r1, r7
 80046cc:	4622      	mov	r2, r4
 80046ce:	4630      	mov	r0, r6
 80046d0:	f7ff ff36 	bl	8004540 <__multiply>
 80046d4:	4681      	mov	r9, r0
 80046d6:	4639      	mov	r1, r7
 80046d8:	4630      	mov	r0, r6
 80046da:	f7ff fe88 	bl	80043ee <_Bfree>
 80046de:	464f      	mov	r7, r9
 80046e0:	106d      	asrs	r5, r5, #1
 80046e2:	d00b      	beq.n	80046fc <__pow5mult+0x90>
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	b938      	cbnz	r0, 80046f8 <__pow5mult+0x8c>
 80046e8:	4622      	mov	r2, r4
 80046ea:	4621      	mov	r1, r4
 80046ec:	4630      	mov	r0, r6
 80046ee:	f7ff ff27 	bl	8004540 <__multiply>
 80046f2:	6020      	str	r0, [r4, #0]
 80046f4:	f8c0 8000 	str.w	r8, [r0]
 80046f8:	4604      	mov	r4, r0
 80046fa:	e7e4      	b.n	80046c6 <__pow5mult+0x5a>
 80046fc:	4638      	mov	r0, r7
 80046fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004702:	bf00      	nop
 8004704:	08004fc0 	.word	0x08004fc0

08004708 <__lshift>:
 8004708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800470c:	460c      	mov	r4, r1
 800470e:	4607      	mov	r7, r0
 8004710:	4616      	mov	r6, r2
 8004712:	6923      	ldr	r3, [r4, #16]
 8004714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004718:	eb0a 0903 	add.w	r9, sl, r3
 800471c:	6849      	ldr	r1, [r1, #4]
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	f109 0501 	add.w	r5, r9, #1
 8004724:	42ab      	cmp	r3, r5
 8004726:	db32      	blt.n	800478e <__lshift+0x86>
 8004728:	4638      	mov	r0, r7
 800472a:	f7ff fe2c 	bl	8004386 <_Balloc>
 800472e:	2300      	movs	r3, #0
 8004730:	4680      	mov	r8, r0
 8004732:	461a      	mov	r2, r3
 8004734:	f100 0114 	add.w	r1, r0, #20
 8004738:	4553      	cmp	r3, sl
 800473a:	db2b      	blt.n	8004794 <__lshift+0x8c>
 800473c:	6920      	ldr	r0, [r4, #16]
 800473e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004742:	f104 0314 	add.w	r3, r4, #20
 8004746:	f016 021f 	ands.w	r2, r6, #31
 800474a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800474e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004752:	d025      	beq.n	80047a0 <__lshift+0x98>
 8004754:	2000      	movs	r0, #0
 8004756:	f1c2 0e20 	rsb	lr, r2, #32
 800475a:	468a      	mov	sl, r1
 800475c:	681e      	ldr	r6, [r3, #0]
 800475e:	4096      	lsls	r6, r2
 8004760:	4330      	orrs	r0, r6
 8004762:	f84a 0b04 	str.w	r0, [sl], #4
 8004766:	f853 0b04 	ldr.w	r0, [r3], #4
 800476a:	459c      	cmp	ip, r3
 800476c:	fa20 f00e 	lsr.w	r0, r0, lr
 8004770:	d814      	bhi.n	800479c <__lshift+0x94>
 8004772:	6048      	str	r0, [r1, #4]
 8004774:	b108      	cbz	r0, 800477a <__lshift+0x72>
 8004776:	f109 0502 	add.w	r5, r9, #2
 800477a:	3d01      	subs	r5, #1
 800477c:	4638      	mov	r0, r7
 800477e:	f8c8 5010 	str.w	r5, [r8, #16]
 8004782:	4621      	mov	r1, r4
 8004784:	f7ff fe33 	bl	80043ee <_Bfree>
 8004788:	4640      	mov	r0, r8
 800478a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478e:	3101      	adds	r1, #1
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	e7c7      	b.n	8004724 <__lshift+0x1c>
 8004794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004798:	3301      	adds	r3, #1
 800479a:	e7cd      	b.n	8004738 <__lshift+0x30>
 800479c:	4651      	mov	r1, sl
 800479e:	e7dc      	b.n	800475a <__lshift+0x52>
 80047a0:	3904      	subs	r1, #4
 80047a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80047a6:	459c      	cmp	ip, r3
 80047a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80047ac:	d8f9      	bhi.n	80047a2 <__lshift+0x9a>
 80047ae:	e7e4      	b.n	800477a <__lshift+0x72>

080047b0 <__mcmp>:
 80047b0:	6903      	ldr	r3, [r0, #16]
 80047b2:	690a      	ldr	r2, [r1, #16]
 80047b4:	b530      	push	{r4, r5, lr}
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	d10c      	bne.n	80047d4 <__mcmp+0x24>
 80047ba:	0092      	lsls	r2, r2, #2
 80047bc:	3014      	adds	r0, #20
 80047be:	3114      	adds	r1, #20
 80047c0:	1884      	adds	r4, r0, r2
 80047c2:	4411      	add	r1, r2
 80047c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80047c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80047cc:	4295      	cmp	r5, r2
 80047ce:	d003      	beq.n	80047d8 <__mcmp+0x28>
 80047d0:	d305      	bcc.n	80047de <__mcmp+0x2e>
 80047d2:	2301      	movs	r3, #1
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd30      	pop	{r4, r5, pc}
 80047d8:	42a0      	cmp	r0, r4
 80047da:	d3f3      	bcc.n	80047c4 <__mcmp+0x14>
 80047dc:	e7fa      	b.n	80047d4 <__mcmp+0x24>
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	e7f7      	b.n	80047d4 <__mcmp+0x24>

080047e4 <__mdiff>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	460d      	mov	r5, r1
 80047ea:	4607      	mov	r7, r0
 80047ec:	4611      	mov	r1, r2
 80047ee:	4628      	mov	r0, r5
 80047f0:	4614      	mov	r4, r2
 80047f2:	f7ff ffdd 	bl	80047b0 <__mcmp>
 80047f6:	1e06      	subs	r6, r0, #0
 80047f8:	d108      	bne.n	800480c <__mdiff+0x28>
 80047fa:	4631      	mov	r1, r6
 80047fc:	4638      	mov	r0, r7
 80047fe:	f7ff fdc2 	bl	8004386 <_Balloc>
 8004802:	2301      	movs	r3, #1
 8004804:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480c:	bfa4      	itt	ge
 800480e:	4623      	movge	r3, r4
 8004810:	462c      	movge	r4, r5
 8004812:	4638      	mov	r0, r7
 8004814:	6861      	ldr	r1, [r4, #4]
 8004816:	bfa6      	itte	ge
 8004818:	461d      	movge	r5, r3
 800481a:	2600      	movge	r6, #0
 800481c:	2601      	movlt	r6, #1
 800481e:	f7ff fdb2 	bl	8004386 <_Balloc>
 8004822:	f04f 0e00 	mov.w	lr, #0
 8004826:	60c6      	str	r6, [r0, #12]
 8004828:	692b      	ldr	r3, [r5, #16]
 800482a:	6926      	ldr	r6, [r4, #16]
 800482c:	f104 0214 	add.w	r2, r4, #20
 8004830:	f105 0914 	add.w	r9, r5, #20
 8004834:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004838:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800483c:	f100 0114 	add.w	r1, r0, #20
 8004840:	f852 ab04 	ldr.w	sl, [r2], #4
 8004844:	f859 5b04 	ldr.w	r5, [r9], #4
 8004848:	fa1f f38a 	uxth.w	r3, sl
 800484c:	4473      	add	r3, lr
 800484e:	b2ac      	uxth	r4, r5
 8004850:	1b1b      	subs	r3, r3, r4
 8004852:	0c2c      	lsrs	r4, r5, #16
 8004854:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004858:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800485c:	b29b      	uxth	r3, r3
 800485e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004862:	45c8      	cmp	r8, r9
 8004864:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004868:	4694      	mov	ip, r2
 800486a:	f841 4b04 	str.w	r4, [r1], #4
 800486e:	d8e7      	bhi.n	8004840 <__mdiff+0x5c>
 8004870:	45bc      	cmp	ip, r7
 8004872:	d304      	bcc.n	800487e <__mdiff+0x9a>
 8004874:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004878:	b183      	cbz	r3, 800489c <__mdiff+0xb8>
 800487a:	6106      	str	r6, [r0, #16]
 800487c:	e7c4      	b.n	8004808 <__mdiff+0x24>
 800487e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004882:	b2a2      	uxth	r2, r4
 8004884:	4472      	add	r2, lr
 8004886:	1413      	asrs	r3, r2, #16
 8004888:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800488c:	b292      	uxth	r2, r2
 800488e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004892:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004896:	f841 2b04 	str.w	r2, [r1], #4
 800489a:	e7e9      	b.n	8004870 <__mdiff+0x8c>
 800489c:	3e01      	subs	r6, #1
 800489e:	e7e9      	b.n	8004874 <__mdiff+0x90>

080048a0 <__d2b>:
 80048a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80048a4:	461c      	mov	r4, r3
 80048a6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80048aa:	2101      	movs	r1, #1
 80048ac:	4690      	mov	r8, r2
 80048ae:	f7ff fd6a 	bl	8004386 <_Balloc>
 80048b2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80048b6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80048ba:	4607      	mov	r7, r0
 80048bc:	bb34      	cbnz	r4, 800490c <__d2b+0x6c>
 80048be:	9201      	str	r2, [sp, #4]
 80048c0:	f1b8 0200 	subs.w	r2, r8, #0
 80048c4:	d027      	beq.n	8004916 <__d2b+0x76>
 80048c6:	a802      	add	r0, sp, #8
 80048c8:	f840 2d08 	str.w	r2, [r0, #-8]!
 80048cc:	f7ff fe00 	bl	80044d0 <__lo0bits>
 80048d0:	9900      	ldr	r1, [sp, #0]
 80048d2:	b1f0      	cbz	r0, 8004912 <__d2b+0x72>
 80048d4:	9a01      	ldr	r2, [sp, #4]
 80048d6:	f1c0 0320 	rsb	r3, r0, #32
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	430b      	orrs	r3, r1
 80048e0:	40c2      	lsrs	r2, r0
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	9201      	str	r2, [sp, #4]
 80048e6:	9b01      	ldr	r3, [sp, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bf14      	ite	ne
 80048ec:	2102      	movne	r1, #2
 80048ee:	2101      	moveq	r1, #1
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	6139      	str	r1, [r7, #16]
 80048f4:	b1c4      	cbz	r4, 8004928 <__d2b+0x88>
 80048f6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80048fa:	4404      	add	r4, r0
 80048fc:	6034      	str	r4, [r6, #0]
 80048fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004902:	6028      	str	r0, [r5, #0]
 8004904:	4638      	mov	r0, r7
 8004906:	b002      	add	sp, #8
 8004908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800490c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004910:	e7d5      	b.n	80048be <__d2b+0x1e>
 8004912:	6179      	str	r1, [r7, #20]
 8004914:	e7e7      	b.n	80048e6 <__d2b+0x46>
 8004916:	a801      	add	r0, sp, #4
 8004918:	f7ff fdda 	bl	80044d0 <__lo0bits>
 800491c:	2101      	movs	r1, #1
 800491e:	9b01      	ldr	r3, [sp, #4]
 8004920:	6139      	str	r1, [r7, #16]
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	3020      	adds	r0, #32
 8004926:	e7e5      	b.n	80048f4 <__d2b+0x54>
 8004928:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800492c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004930:	6030      	str	r0, [r6, #0]
 8004932:	6918      	ldr	r0, [r3, #16]
 8004934:	f7ff fdad 	bl	8004492 <__hi0bits>
 8004938:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800493c:	e7e1      	b.n	8004902 <__d2b+0x62>

0800493e <_calloc_r>:
 800493e:	b538      	push	{r3, r4, r5, lr}
 8004940:	fb02 f401 	mul.w	r4, r2, r1
 8004944:	4621      	mov	r1, r4
 8004946:	f000 f855 	bl	80049f4 <_malloc_r>
 800494a:	4605      	mov	r5, r0
 800494c:	b118      	cbz	r0, 8004956 <_calloc_r+0x18>
 800494e:	4622      	mov	r2, r4
 8004950:	2100      	movs	r1, #0
 8004952:	f7fe fa2f 	bl	8002db4 <memset>
 8004956:	4628      	mov	r0, r5
 8004958:	bd38      	pop	{r3, r4, r5, pc}
	...

0800495c <_free_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4605      	mov	r5, r0
 8004960:	2900      	cmp	r1, #0
 8004962:	d043      	beq.n	80049ec <_free_r+0x90>
 8004964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004968:	1f0c      	subs	r4, r1, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	bfb8      	it	lt
 800496e:	18e4      	addlt	r4, r4, r3
 8004970:	f000 fa27 	bl	8004dc2 <__malloc_lock>
 8004974:	4a1e      	ldr	r2, [pc, #120]	; (80049f0 <_free_r+0x94>)
 8004976:	6813      	ldr	r3, [r2, #0]
 8004978:	4610      	mov	r0, r2
 800497a:	b933      	cbnz	r3, 800498a <_free_r+0x2e>
 800497c:	6063      	str	r3, [r4, #4]
 800497e:	6014      	str	r4, [r2, #0]
 8004980:	4628      	mov	r0, r5
 8004982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004986:	f000 ba1d 	b.w	8004dc4 <__malloc_unlock>
 800498a:	42a3      	cmp	r3, r4
 800498c:	d90b      	bls.n	80049a6 <_free_r+0x4a>
 800498e:	6821      	ldr	r1, [r4, #0]
 8004990:	1862      	adds	r2, r4, r1
 8004992:	4293      	cmp	r3, r2
 8004994:	bf01      	itttt	eq
 8004996:	681a      	ldreq	r2, [r3, #0]
 8004998:	685b      	ldreq	r3, [r3, #4]
 800499a:	1852      	addeq	r2, r2, r1
 800499c:	6022      	streq	r2, [r4, #0]
 800499e:	6063      	str	r3, [r4, #4]
 80049a0:	6004      	str	r4, [r0, #0]
 80049a2:	e7ed      	b.n	8004980 <_free_r+0x24>
 80049a4:	4613      	mov	r3, r2
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	b10a      	cbz	r2, 80049ae <_free_r+0x52>
 80049aa:	42a2      	cmp	r2, r4
 80049ac:	d9fa      	bls.n	80049a4 <_free_r+0x48>
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	1858      	adds	r0, r3, r1
 80049b2:	42a0      	cmp	r0, r4
 80049b4:	d10b      	bne.n	80049ce <_free_r+0x72>
 80049b6:	6820      	ldr	r0, [r4, #0]
 80049b8:	4401      	add	r1, r0
 80049ba:	1858      	adds	r0, r3, r1
 80049bc:	4282      	cmp	r2, r0
 80049be:	6019      	str	r1, [r3, #0]
 80049c0:	d1de      	bne.n	8004980 <_free_r+0x24>
 80049c2:	6810      	ldr	r0, [r2, #0]
 80049c4:	6852      	ldr	r2, [r2, #4]
 80049c6:	4401      	add	r1, r0
 80049c8:	6019      	str	r1, [r3, #0]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	e7d8      	b.n	8004980 <_free_r+0x24>
 80049ce:	d902      	bls.n	80049d6 <_free_r+0x7a>
 80049d0:	230c      	movs	r3, #12
 80049d2:	602b      	str	r3, [r5, #0]
 80049d4:	e7d4      	b.n	8004980 <_free_r+0x24>
 80049d6:	6820      	ldr	r0, [r4, #0]
 80049d8:	1821      	adds	r1, r4, r0
 80049da:	428a      	cmp	r2, r1
 80049dc:	bf01      	itttt	eq
 80049de:	6811      	ldreq	r1, [r2, #0]
 80049e0:	6852      	ldreq	r2, [r2, #4]
 80049e2:	1809      	addeq	r1, r1, r0
 80049e4:	6021      	streq	r1, [r4, #0]
 80049e6:	6062      	str	r2, [r4, #4]
 80049e8:	605c      	str	r4, [r3, #4]
 80049ea:	e7c9      	b.n	8004980 <_free_r+0x24>
 80049ec:	bd38      	pop	{r3, r4, r5, pc}
 80049ee:	bf00      	nop
 80049f0:	20000204 	.word	0x20000204

080049f4 <_malloc_r>:
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	1ccd      	adds	r5, r1, #3
 80049f8:	f025 0503 	bic.w	r5, r5, #3
 80049fc:	3508      	adds	r5, #8
 80049fe:	2d0c      	cmp	r5, #12
 8004a00:	bf38      	it	cc
 8004a02:	250c      	movcc	r5, #12
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	4606      	mov	r6, r0
 8004a08:	db01      	blt.n	8004a0e <_malloc_r+0x1a>
 8004a0a:	42a9      	cmp	r1, r5
 8004a0c:	d903      	bls.n	8004a16 <_malloc_r+0x22>
 8004a0e:	230c      	movs	r3, #12
 8004a10:	6033      	str	r3, [r6, #0]
 8004a12:	2000      	movs	r0, #0
 8004a14:	bd70      	pop	{r4, r5, r6, pc}
 8004a16:	f000 f9d4 	bl	8004dc2 <__malloc_lock>
 8004a1a:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <_malloc_r+0xac>)
 8004a1c:	6814      	ldr	r4, [r2, #0]
 8004a1e:	4621      	mov	r1, r4
 8004a20:	b991      	cbnz	r1, 8004a48 <_malloc_r+0x54>
 8004a22:	4c20      	ldr	r4, [pc, #128]	; (8004aa4 <_malloc_r+0xb0>)
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	b91b      	cbnz	r3, 8004a30 <_malloc_r+0x3c>
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f000 f98f 	bl	8004d4c <_sbrk_r>
 8004a2e:	6020      	str	r0, [r4, #0]
 8004a30:	4629      	mov	r1, r5
 8004a32:	4630      	mov	r0, r6
 8004a34:	f000 f98a 	bl	8004d4c <_sbrk_r>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d124      	bne.n	8004a86 <_malloc_r+0x92>
 8004a3c:	230c      	movs	r3, #12
 8004a3e:	4630      	mov	r0, r6
 8004a40:	6033      	str	r3, [r6, #0]
 8004a42:	f000 f9bf 	bl	8004dc4 <__malloc_unlock>
 8004a46:	e7e4      	b.n	8004a12 <_malloc_r+0x1e>
 8004a48:	680b      	ldr	r3, [r1, #0]
 8004a4a:	1b5b      	subs	r3, r3, r5
 8004a4c:	d418      	bmi.n	8004a80 <_malloc_r+0x8c>
 8004a4e:	2b0b      	cmp	r3, #11
 8004a50:	d90f      	bls.n	8004a72 <_malloc_r+0x7e>
 8004a52:	600b      	str	r3, [r1, #0]
 8004a54:	18cc      	adds	r4, r1, r3
 8004a56:	50cd      	str	r5, [r1, r3]
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f000 f9b3 	bl	8004dc4 <__malloc_unlock>
 8004a5e:	f104 000b 	add.w	r0, r4, #11
 8004a62:	1d23      	adds	r3, r4, #4
 8004a64:	f020 0007 	bic.w	r0, r0, #7
 8004a68:	1ac3      	subs	r3, r0, r3
 8004a6a:	d0d3      	beq.n	8004a14 <_malloc_r+0x20>
 8004a6c:	425a      	negs	r2, r3
 8004a6e:	50e2      	str	r2, [r4, r3]
 8004a70:	e7d0      	b.n	8004a14 <_malloc_r+0x20>
 8004a72:	684b      	ldr	r3, [r1, #4]
 8004a74:	428c      	cmp	r4, r1
 8004a76:	bf16      	itet	ne
 8004a78:	6063      	strne	r3, [r4, #4]
 8004a7a:	6013      	streq	r3, [r2, #0]
 8004a7c:	460c      	movne	r4, r1
 8004a7e:	e7eb      	b.n	8004a58 <_malloc_r+0x64>
 8004a80:	460c      	mov	r4, r1
 8004a82:	6849      	ldr	r1, [r1, #4]
 8004a84:	e7cc      	b.n	8004a20 <_malloc_r+0x2c>
 8004a86:	1cc4      	adds	r4, r0, #3
 8004a88:	f024 0403 	bic.w	r4, r4, #3
 8004a8c:	42a0      	cmp	r0, r4
 8004a8e:	d005      	beq.n	8004a9c <_malloc_r+0xa8>
 8004a90:	1a21      	subs	r1, r4, r0
 8004a92:	4630      	mov	r0, r6
 8004a94:	f000 f95a 	bl	8004d4c <_sbrk_r>
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d0cf      	beq.n	8004a3c <_malloc_r+0x48>
 8004a9c:	6025      	str	r5, [r4, #0]
 8004a9e:	e7db      	b.n	8004a58 <_malloc_r+0x64>
 8004aa0:	20000204 	.word	0x20000204
 8004aa4:	20000208 	.word	0x20000208

08004aa8 <__ssputs_r>:
 8004aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aac:	688e      	ldr	r6, [r1, #8]
 8004aae:	4682      	mov	sl, r0
 8004ab0:	429e      	cmp	r6, r3
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	4690      	mov	r8, r2
 8004ab6:	4699      	mov	r9, r3
 8004ab8:	d837      	bhi.n	8004b2a <__ssputs_r+0x82>
 8004aba:	898a      	ldrh	r2, [r1, #12]
 8004abc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ac0:	d031      	beq.n	8004b26 <__ssputs_r+0x7e>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	6825      	ldr	r5, [r4, #0]
 8004ac6:	6909      	ldr	r1, [r1, #16]
 8004ac8:	1a6f      	subs	r7, r5, r1
 8004aca:	6965      	ldr	r5, [r4, #20]
 8004acc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ad0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004ad4:	f109 0301 	add.w	r3, r9, #1
 8004ad8:	443b      	add	r3, r7
 8004ada:	429d      	cmp	r5, r3
 8004adc:	bf38      	it	cc
 8004ade:	461d      	movcc	r5, r3
 8004ae0:	0553      	lsls	r3, r2, #21
 8004ae2:	d530      	bpl.n	8004b46 <__ssputs_r+0x9e>
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	f7ff ff85 	bl	80049f4 <_malloc_r>
 8004aea:	4606      	mov	r6, r0
 8004aec:	b950      	cbnz	r0, 8004b04 <__ssputs_r+0x5c>
 8004aee:	230c      	movs	r3, #12
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	f8ca 3000 	str.w	r3, [sl]
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004afe:	81a3      	strh	r3, [r4, #12]
 8004b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b04:	463a      	mov	r2, r7
 8004b06:	6921      	ldr	r1, [r4, #16]
 8004b08:	f7ff fc32 	bl	8004370 <memcpy>
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b16:	81a3      	strh	r3, [r4, #12]
 8004b18:	6126      	str	r6, [r4, #16]
 8004b1a:	443e      	add	r6, r7
 8004b1c:	6026      	str	r6, [r4, #0]
 8004b1e:	464e      	mov	r6, r9
 8004b20:	6165      	str	r5, [r4, #20]
 8004b22:	1bed      	subs	r5, r5, r7
 8004b24:	60a5      	str	r5, [r4, #8]
 8004b26:	454e      	cmp	r6, r9
 8004b28:	d900      	bls.n	8004b2c <__ssputs_r+0x84>
 8004b2a:	464e      	mov	r6, r9
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	4641      	mov	r1, r8
 8004b30:	6820      	ldr	r0, [r4, #0]
 8004b32:	f000 f92d 	bl	8004d90 <memmove>
 8004b36:	68a3      	ldr	r3, [r4, #8]
 8004b38:	2000      	movs	r0, #0
 8004b3a:	1b9b      	subs	r3, r3, r6
 8004b3c:	60a3      	str	r3, [r4, #8]
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	441e      	add	r6, r3
 8004b42:	6026      	str	r6, [r4, #0]
 8004b44:	e7dc      	b.n	8004b00 <__ssputs_r+0x58>
 8004b46:	462a      	mov	r2, r5
 8004b48:	f000 f93d 	bl	8004dc6 <_realloc_r>
 8004b4c:	4606      	mov	r6, r0
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d1e2      	bne.n	8004b18 <__ssputs_r+0x70>
 8004b52:	6921      	ldr	r1, [r4, #16]
 8004b54:	4650      	mov	r0, sl
 8004b56:	f7ff ff01 	bl	800495c <_free_r>
 8004b5a:	e7c8      	b.n	8004aee <__ssputs_r+0x46>

08004b5c <_svfiprintf_r>:
 8004b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b60:	461d      	mov	r5, r3
 8004b62:	898b      	ldrh	r3, [r1, #12]
 8004b64:	b09d      	sub	sp, #116	; 0x74
 8004b66:	061f      	lsls	r7, r3, #24
 8004b68:	4680      	mov	r8, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	4616      	mov	r6, r2
 8004b6e:	d50f      	bpl.n	8004b90 <_svfiprintf_r+0x34>
 8004b70:	690b      	ldr	r3, [r1, #16]
 8004b72:	b96b      	cbnz	r3, 8004b90 <_svfiprintf_r+0x34>
 8004b74:	2140      	movs	r1, #64	; 0x40
 8004b76:	f7ff ff3d 	bl	80049f4 <_malloc_r>
 8004b7a:	6020      	str	r0, [r4, #0]
 8004b7c:	6120      	str	r0, [r4, #16]
 8004b7e:	b928      	cbnz	r0, 8004b8c <_svfiprintf_r+0x30>
 8004b80:	230c      	movs	r3, #12
 8004b82:	f8c8 3000 	str.w	r3, [r8]
 8004b86:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8a:	e0c8      	b.n	8004d1e <_svfiprintf_r+0x1c2>
 8004b8c:	2340      	movs	r3, #64	; 0x40
 8004b8e:	6163      	str	r3, [r4, #20]
 8004b90:	2300      	movs	r3, #0
 8004b92:	9309      	str	r3, [sp, #36]	; 0x24
 8004b94:	2320      	movs	r3, #32
 8004b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b9a:	2330      	movs	r3, #48	; 0x30
 8004b9c:	f04f 0b01 	mov.w	fp, #1
 8004ba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ba4:	9503      	str	r5, [sp, #12]
 8004ba6:	4637      	mov	r7, r6
 8004ba8:	463d      	mov	r5, r7
 8004baa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004bae:	b10b      	cbz	r3, 8004bb4 <_svfiprintf_r+0x58>
 8004bb0:	2b25      	cmp	r3, #37	; 0x25
 8004bb2:	d13e      	bne.n	8004c32 <_svfiprintf_r+0xd6>
 8004bb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004bb8:	d00b      	beq.n	8004bd2 <_svfiprintf_r+0x76>
 8004bba:	4653      	mov	r3, sl
 8004bbc:	4632      	mov	r2, r6
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	f7ff ff71 	bl	8004aa8 <__ssputs_r>
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	f000 80a4 	beq.w	8004d14 <_svfiprintf_r+0x1b8>
 8004bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bce:	4453      	add	r3, sl
 8004bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd2:	783b      	ldrb	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 809d 	beq.w	8004d14 <_svfiprintf_r+0x1b8>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004be4:	9304      	str	r3, [sp, #16]
 8004be6:	9307      	str	r3, [sp, #28]
 8004be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bec:	931a      	str	r3, [sp, #104]	; 0x68
 8004bee:	462f      	mov	r7, r5
 8004bf0:	2205      	movs	r2, #5
 8004bf2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004bf6:	4850      	ldr	r0, [pc, #320]	; (8004d38 <_svfiprintf_r+0x1dc>)
 8004bf8:	f7ff fbac 	bl	8004354 <memchr>
 8004bfc:	9b04      	ldr	r3, [sp, #16]
 8004bfe:	b9d0      	cbnz	r0, 8004c36 <_svfiprintf_r+0xda>
 8004c00:	06d9      	lsls	r1, r3, #27
 8004c02:	bf44      	itt	mi
 8004c04:	2220      	movmi	r2, #32
 8004c06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c0a:	071a      	lsls	r2, r3, #28
 8004c0c:	bf44      	itt	mi
 8004c0e:	222b      	movmi	r2, #43	; 0x2b
 8004c10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c14:	782a      	ldrb	r2, [r5, #0]
 8004c16:	2a2a      	cmp	r2, #42	; 0x2a
 8004c18:	d015      	beq.n	8004c46 <_svfiprintf_r+0xea>
 8004c1a:	462f      	mov	r7, r5
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	250a      	movs	r5, #10
 8004c20:	9a07      	ldr	r2, [sp, #28]
 8004c22:	4639      	mov	r1, r7
 8004c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c28:	3b30      	subs	r3, #48	; 0x30
 8004c2a:	2b09      	cmp	r3, #9
 8004c2c:	d94d      	bls.n	8004cca <_svfiprintf_r+0x16e>
 8004c2e:	b1b8      	cbz	r0, 8004c60 <_svfiprintf_r+0x104>
 8004c30:	e00f      	b.n	8004c52 <_svfiprintf_r+0xf6>
 8004c32:	462f      	mov	r7, r5
 8004c34:	e7b8      	b.n	8004ba8 <_svfiprintf_r+0x4c>
 8004c36:	4a40      	ldr	r2, [pc, #256]	; (8004d38 <_svfiprintf_r+0x1dc>)
 8004c38:	463d      	mov	r5, r7
 8004c3a:	1a80      	subs	r0, r0, r2
 8004c3c:	fa0b f000 	lsl.w	r0, fp, r0
 8004c40:	4318      	orrs	r0, r3
 8004c42:	9004      	str	r0, [sp, #16]
 8004c44:	e7d3      	b.n	8004bee <_svfiprintf_r+0x92>
 8004c46:	9a03      	ldr	r2, [sp, #12]
 8004c48:	1d11      	adds	r1, r2, #4
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	9103      	str	r1, [sp, #12]
 8004c4e:	2a00      	cmp	r2, #0
 8004c50:	db01      	blt.n	8004c56 <_svfiprintf_r+0xfa>
 8004c52:	9207      	str	r2, [sp, #28]
 8004c54:	e004      	b.n	8004c60 <_svfiprintf_r+0x104>
 8004c56:	4252      	negs	r2, r2
 8004c58:	f043 0302 	orr.w	r3, r3, #2
 8004c5c:	9207      	str	r2, [sp, #28]
 8004c5e:	9304      	str	r3, [sp, #16]
 8004c60:	783b      	ldrb	r3, [r7, #0]
 8004c62:	2b2e      	cmp	r3, #46	; 0x2e
 8004c64:	d10c      	bne.n	8004c80 <_svfiprintf_r+0x124>
 8004c66:	787b      	ldrb	r3, [r7, #1]
 8004c68:	2b2a      	cmp	r3, #42	; 0x2a
 8004c6a:	d133      	bne.n	8004cd4 <_svfiprintf_r+0x178>
 8004c6c:	9b03      	ldr	r3, [sp, #12]
 8004c6e:	3702      	adds	r7, #2
 8004c70:	1d1a      	adds	r2, r3, #4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	9203      	str	r2, [sp, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfb8      	it	lt
 8004c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c7e:	9305      	str	r3, [sp, #20]
 8004c80:	4d2e      	ldr	r5, [pc, #184]	; (8004d3c <_svfiprintf_r+0x1e0>)
 8004c82:	2203      	movs	r2, #3
 8004c84:	7839      	ldrb	r1, [r7, #0]
 8004c86:	4628      	mov	r0, r5
 8004c88:	f7ff fb64 	bl	8004354 <memchr>
 8004c8c:	b138      	cbz	r0, 8004c9e <_svfiprintf_r+0x142>
 8004c8e:	2340      	movs	r3, #64	; 0x40
 8004c90:	1b40      	subs	r0, r0, r5
 8004c92:	fa03 f000 	lsl.w	r0, r3, r0
 8004c96:	9b04      	ldr	r3, [sp, #16]
 8004c98:	3701      	adds	r7, #1
 8004c9a:	4303      	orrs	r3, r0
 8004c9c:	9304      	str	r3, [sp, #16]
 8004c9e:	7839      	ldrb	r1, [r7, #0]
 8004ca0:	2206      	movs	r2, #6
 8004ca2:	4827      	ldr	r0, [pc, #156]	; (8004d40 <_svfiprintf_r+0x1e4>)
 8004ca4:	1c7e      	adds	r6, r7, #1
 8004ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004caa:	f7ff fb53 	bl	8004354 <memchr>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d038      	beq.n	8004d24 <_svfiprintf_r+0x1c8>
 8004cb2:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <_svfiprintf_r+0x1e8>)
 8004cb4:	bb13      	cbnz	r3, 8004cfc <_svfiprintf_r+0x1a0>
 8004cb6:	9b03      	ldr	r3, [sp, #12]
 8004cb8:	3307      	adds	r3, #7
 8004cba:	f023 0307 	bic.w	r3, r3, #7
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	9303      	str	r3, [sp, #12]
 8004cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc4:	444b      	add	r3, r9
 8004cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc8:	e76d      	b.n	8004ba6 <_svfiprintf_r+0x4a>
 8004cca:	fb05 3202 	mla	r2, r5, r2, r3
 8004cce:	2001      	movs	r0, #1
 8004cd0:	460f      	mov	r7, r1
 8004cd2:	e7a6      	b.n	8004c22 <_svfiprintf_r+0xc6>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	250a      	movs	r5, #10
 8004cd8:	4619      	mov	r1, r3
 8004cda:	3701      	adds	r7, #1
 8004cdc:	9305      	str	r3, [sp, #20]
 8004cde:	4638      	mov	r0, r7
 8004ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ce4:	3a30      	subs	r2, #48	; 0x30
 8004ce6:	2a09      	cmp	r2, #9
 8004ce8:	d903      	bls.n	8004cf2 <_svfiprintf_r+0x196>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0c8      	beq.n	8004c80 <_svfiprintf_r+0x124>
 8004cee:	9105      	str	r1, [sp, #20]
 8004cf0:	e7c6      	b.n	8004c80 <_svfiprintf_r+0x124>
 8004cf2:	fb05 2101 	mla	r1, r5, r1, r2
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	4607      	mov	r7, r0
 8004cfa:	e7f0      	b.n	8004cde <_svfiprintf_r+0x182>
 8004cfc:	ab03      	add	r3, sp, #12
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	4622      	mov	r2, r4
 8004d02:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <_svfiprintf_r+0x1ec>)
 8004d04:	a904      	add	r1, sp, #16
 8004d06:	4640      	mov	r0, r8
 8004d08:	f7fe f8ee 	bl	8002ee8 <_printf_float>
 8004d0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d10:	4681      	mov	r9, r0
 8004d12:	d1d6      	bne.n	8004cc2 <_svfiprintf_r+0x166>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	065b      	lsls	r3, r3, #25
 8004d18:	f53f af35 	bmi.w	8004b86 <_svfiprintf_r+0x2a>
 8004d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d1e:	b01d      	add	sp, #116	; 0x74
 8004d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d24:	ab03      	add	r3, sp, #12
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	4622      	mov	r2, r4
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <_svfiprintf_r+0x1ec>)
 8004d2c:	a904      	add	r1, sp, #16
 8004d2e:	4640      	mov	r0, r8
 8004d30:	f7fe fb86 	bl	8003440 <_printf_i>
 8004d34:	e7ea      	b.n	8004d0c <_svfiprintf_r+0x1b0>
 8004d36:	bf00      	nop
 8004d38:	08004fcc 	.word	0x08004fcc
 8004d3c:	08004fd2 	.word	0x08004fd2
 8004d40:	08004fd6 	.word	0x08004fd6
 8004d44:	08002ee9 	.word	0x08002ee9
 8004d48:	08004aa9 	.word	0x08004aa9

08004d4c <_sbrk_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	2300      	movs	r3, #0
 8004d50:	4c05      	ldr	r4, [pc, #20]	; (8004d68 <_sbrk_r+0x1c>)
 8004d52:	4605      	mov	r5, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	f7fd ff9c 	bl	8002c94 <_sbrk>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_sbrk_r+0x1a>
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_sbrk_r+0x1a>
 8004d64:	602b      	str	r3, [r5, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	20000380 	.word	0x20000380

08004d6c <__ascii_mbtowc>:
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	b901      	cbnz	r1, 8004d72 <__ascii_mbtowc+0x6>
 8004d70:	a901      	add	r1, sp, #4
 8004d72:	b142      	cbz	r2, 8004d86 <__ascii_mbtowc+0x1a>
 8004d74:	b14b      	cbz	r3, 8004d8a <__ascii_mbtowc+0x1e>
 8004d76:	7813      	ldrb	r3, [r2, #0]
 8004d78:	600b      	str	r3, [r1, #0]
 8004d7a:	7812      	ldrb	r2, [r2, #0]
 8004d7c:	1c10      	adds	r0, r2, #0
 8004d7e:	bf18      	it	ne
 8004d80:	2001      	movne	r0, #1
 8004d82:	b002      	add	sp, #8
 8004d84:	4770      	bx	lr
 8004d86:	4610      	mov	r0, r2
 8004d88:	e7fb      	b.n	8004d82 <__ascii_mbtowc+0x16>
 8004d8a:	f06f 0001 	mvn.w	r0, #1
 8004d8e:	e7f8      	b.n	8004d82 <__ascii_mbtowc+0x16>

08004d90 <memmove>:
 8004d90:	4288      	cmp	r0, r1
 8004d92:	b510      	push	{r4, lr}
 8004d94:	eb01 0302 	add.w	r3, r1, r2
 8004d98:	d807      	bhi.n	8004daa <memmove+0x1a>
 8004d9a:	1e42      	subs	r2, r0, #1
 8004d9c:	4299      	cmp	r1, r3
 8004d9e:	d00a      	beq.n	8004db6 <memmove+0x26>
 8004da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004da4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004da8:	e7f8      	b.n	8004d9c <memmove+0xc>
 8004daa:	4283      	cmp	r3, r0
 8004dac:	d9f5      	bls.n	8004d9a <memmove+0xa>
 8004dae:	1881      	adds	r1, r0, r2
 8004db0:	1ad2      	subs	r2, r2, r3
 8004db2:	42d3      	cmn	r3, r2
 8004db4:	d100      	bne.n	8004db8 <memmove+0x28>
 8004db6:	bd10      	pop	{r4, pc}
 8004db8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dbc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004dc0:	e7f7      	b.n	8004db2 <memmove+0x22>

08004dc2 <__malloc_lock>:
 8004dc2:	4770      	bx	lr

08004dc4 <__malloc_unlock>:
 8004dc4:	4770      	bx	lr

08004dc6 <_realloc_r>:
 8004dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc8:	4607      	mov	r7, r0
 8004dca:	4614      	mov	r4, r2
 8004dcc:	460e      	mov	r6, r1
 8004dce:	b921      	cbnz	r1, 8004dda <_realloc_r+0x14>
 8004dd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	f7ff be0d 	b.w	80049f4 <_malloc_r>
 8004dda:	b922      	cbnz	r2, 8004de6 <_realloc_r+0x20>
 8004ddc:	f7ff fdbe 	bl	800495c <_free_r>
 8004de0:	4625      	mov	r5, r4
 8004de2:	4628      	mov	r0, r5
 8004de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de6:	f000 f821 	bl	8004e2c <_malloc_usable_size_r>
 8004dea:	42a0      	cmp	r0, r4
 8004dec:	d20f      	bcs.n	8004e0e <_realloc_r+0x48>
 8004dee:	4621      	mov	r1, r4
 8004df0:	4638      	mov	r0, r7
 8004df2:	f7ff fdff 	bl	80049f4 <_malloc_r>
 8004df6:	4605      	mov	r5, r0
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d0f2      	beq.n	8004de2 <_realloc_r+0x1c>
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	4622      	mov	r2, r4
 8004e00:	f7ff fab6 	bl	8004370 <memcpy>
 8004e04:	4631      	mov	r1, r6
 8004e06:	4638      	mov	r0, r7
 8004e08:	f7ff fda8 	bl	800495c <_free_r>
 8004e0c:	e7e9      	b.n	8004de2 <_realloc_r+0x1c>
 8004e0e:	4635      	mov	r5, r6
 8004e10:	e7e7      	b.n	8004de2 <_realloc_r+0x1c>

08004e12 <__ascii_wctomb>:
 8004e12:	b149      	cbz	r1, 8004e28 <__ascii_wctomb+0x16>
 8004e14:	2aff      	cmp	r2, #255	; 0xff
 8004e16:	bf8b      	itete	hi
 8004e18:	238a      	movhi	r3, #138	; 0x8a
 8004e1a:	700a      	strbls	r2, [r1, #0]
 8004e1c:	6003      	strhi	r3, [r0, #0]
 8004e1e:	2001      	movls	r0, #1
 8004e20:	bf88      	it	hi
 8004e22:	f04f 30ff 	movhi.w	r0, #4294967295
 8004e26:	4770      	bx	lr
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4770      	bx	lr

08004e2c <_malloc_usable_size_r>:
 8004e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e30:	1f18      	subs	r0, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bfbc      	itt	lt
 8004e36:	580b      	ldrlt	r3, [r1, r0]
 8004e38:	18c0      	addlt	r0, r0, r3
 8004e3a:	4770      	bx	lr

08004e3c <_init>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	bf00      	nop
 8004e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e42:	bc08      	pop	{r3}
 8004e44:	469e      	mov	lr, r3
 8004e46:	4770      	bx	lr

08004e48 <_fini>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	bf00      	nop
 8004e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4e:	bc08      	pop	{r3}
 8004e50:	469e      	mov	lr, r3
 8004e52:	4770      	bx	lr
